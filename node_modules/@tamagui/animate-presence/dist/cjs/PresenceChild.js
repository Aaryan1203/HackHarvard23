var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var PresenceChild_exports = {};
__export(PresenceChild_exports, {
  PresenceChild: () => PresenceChild
});
module.exports = __toCommonJS(PresenceChild_exports);
var import_use_presence = require("@tamagui/use-presence"), import_web = require("@tamagui/web"), React = __toESM(require("react")), import_react = require("react"), import_jsx_runtime = require("react/jsx-runtime");
const PresenceChild = ({
  children,
  initial,
  isPresent,
  onExitComplete,
  exitVariant,
  enterVariant,
  enterExitVariant,
  presenceAffectsLayout
}) => {
  const presenceChildren = React.useMemo(newChildrenMap, []), id = (0, import_react.useId)() || "", context = React.useMemo(
    () => ({
      id,
      initial,
      isPresent,
      exitVariant,
      enterVariant,
      enterExitVariant,
      onExitComplete: (id2) => {
        presenceChildren.set(id2, !0);
        for (const isComplete of presenceChildren.values())
          if (!isComplete)
            return;
        onExitComplete == null || onExitComplete();
      },
      register: (id2) => (presenceChildren.set(id2, !1), () => presenceChildren.delete(id2))
    }),
    /**
     * If the presence of a child affects the layout of the components around it,
     * we want to make a new context value to ensure they get re-rendered
     * so they can detect that layout change.
     */
    // eslint-disable-next-line react-hooks/exhaustive-deps
    presenceAffectsLayout ? void 0 : [isPresent, exitVariant, enterVariant]
  );
  return React.useMemo(() => {
    presenceChildren.forEach((_, key) => presenceChildren.set(key, !1));
  }, [isPresent]), (0, import_web.useIsomorphicLayoutEffect)(() => {
    !(isPresent || presenceChildren.size) && (onExitComplete == null || onExitComplete());
  }, [isPresent]), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_use_presence.PresenceContext.Provider, { value: context, children });
};
function newChildrenMap() {
  return /* @__PURE__ */ new Map();
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  PresenceChild
});
//# sourceMappingURL=PresenceChild.js.map
