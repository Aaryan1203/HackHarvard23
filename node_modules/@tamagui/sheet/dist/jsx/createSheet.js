import { useComposedRefs } from "@tamagui/compose-refs";
import {
  Stack,
  composeEventHandlers,
  useDidFinishSSR,
  useIsomorphicLayoutEffect,
  withStaticProperties
} from "@tamagui/core";
import { RemoveScroll } from "@tamagui/remove-scroll";
import { forwardRef, memo, useMemo } from "react";
import { Platform } from "react-native";
import { SHEET_HANDLE_NAME, SHEET_NAME, SHEET_OVERLAY_NAME } from "./constants";
import "./nativeSheet";
import { useSheetContext } from "./SheetContext";
import { SheetImplementationCustom } from "./SheetImplementationCustom";
import { SheetScrollView } from "./SheetScrollView";
import { useSheetController } from "./useSheetController";
import { useSheetOffscreenSize } from "./useSheetOffscreenSize";
function createSheet({ Handle, Frame, Overlay }) {
  const SheetHandle = Handle.extractable(
    ({ __scopeSheet, ...props }) => {
      const context = useSheetContext(SHEET_HANDLE_NAME, __scopeSheet);
      return context.onlyShowFrame ? null : (
        // @ts-ignore
        <Handle
          onPress={() => {
            const max = context.snapPoints.length + (context.dismissOnSnapToBottom ? -1 : 0), nextPos = (context.position + 1) % max;
            context.setPosition(nextPos);
          }}
          open={context.open}
          {...props}
        />
      );
    }
  ), SheetOverlay = Overlay.extractable(
    memo((propsIn) => {
      const { __scopeSheet, ...props } = propsIn, context = useSheetContext(SHEET_OVERLAY_NAME, __scopeSheet), element = useMemo(
        () => (
          // @ts-ignore
          <Overlay
            {...props}
            onPress={composeEventHandlers(
              props.onPress,
              context.dismissOnOverlayPress ? () => {
                context.setOpen(!1);
              } : void 0
            )}
          />
        ),
        [props.onPress, context.dismissOnOverlayPress]
      );
      return useIsomorphicLayoutEffect(() => {
        context.onOverlayComponent?.(element);
      }, [element]), context.onlyShowFrame, null;
    })
  ), SheetFrame = Frame.extractable(
    forwardRef(
      ({
        __scopeSheet,
        adjustPaddingForOffscreenContent,
        disableHideBottomOverflow,
        children,
        ...props
      }, forwardedRef) => {
        const context = useSheetContext(SHEET_NAME, __scopeSheet), { hasFit, removeScrollEnabled, frameSize, contentRef } = context, composedContentRef = useComposedRefs(forwardedRef, contentRef), offscreenSize = useSheetOffscreenSize(context), sheetContents = useMemo(() => (
          // @ts-ignore
          <Frame
            ref={composedContentRef}
            flex={hasFit ? 0 : 1}
            height={hasFit ? void 0 : frameSize}
            {...props}
          >
            {children}
            {adjustPaddingForOffscreenContent && <Stack data-sheet-offscreen-pad height={offscreenSize} width="100%" />}
          </Frame>
        ), [props, frameSize, offscreenSize, adjustPaddingForOffscreenContent, hasFit]);
        return <>
          <RemoveScroll
            forwardProps
            enabled={removeScrollEnabled}
            allowPinchZoom
            shards={[contentRef]}
            removeScrollBar={!1}
          >{sheetContents}</RemoveScroll>
          {
            /* below frame hide when bouncing past 100% */
          }
          {!disableHideBottomOverflow && // @ts-ignore
          <Frame
            {...props}
            componentName="SheetCover"
            children={null}
            position="absolute"
            bottom="-50%"
            zIndex={-1}
            height={context.frameSize}
            left={0}
            right={0}
            borderWidth={0}
            borderRadius={0}
            shadowOpacity={0}
          />}
        </>;
      }
    )
  ), Sheet = forwardRef(function(props, ref) {
    const hydrated = useDidFinishSSR(), { isShowingNonSheet } = useSheetController();
    let SheetImplementation = SheetImplementationCustom;
    return props.native && Platform.OS, isShowingNonSheet || !hydrated ? null : <SheetImplementation ref={ref} {...props} />;
  }), components = {
    Frame: SheetFrame,
    Overlay: SheetOverlay,
    Handle: SheetHandle,
    ScrollView: SheetScrollView
  }, Controlled = withStaticProperties(Sheet, components);
  return withStaticProperties(Sheet, {
    ...components,
    Controlled
  });
}
export {
  createSheet
};
//# sourceMappingURL=createSheet.js.map
