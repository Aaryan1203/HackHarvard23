var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var createSheet_exports = {};
__export(createSheet_exports, {
  createSheet: () => createSheet
});
module.exports = __toCommonJS(createSheet_exports);
var import_compose_refs = require("@tamagui/compose-refs"), import_core = require("@tamagui/core"), import_remove_scroll = require("@tamagui/remove-scroll"), import_react = require("react"), import_react_native = require("react-native"), import_constants = require("./constants"), import_nativeSheet = require("./nativeSheet"), import_SheetContext = require("./SheetContext"), import_SheetImplementationCustom = require("./SheetImplementationCustom"), import_SheetScrollView = require("./SheetScrollView"), import_useSheetController = require("./useSheetController"), import_useSheetOffscreenSize = require("./useSheetOffscreenSize"), import_jsx_runtime = (
  // @ts-ignore
  require("react/jsx-runtime")
);
function createSheet({ Handle, Frame, Overlay }) {
  const SheetHandle = Handle.extractable(
    ({ __scopeSheet, ...props }) => {
      const context = (0, import_SheetContext.useSheetContext)(import_constants.SHEET_HANDLE_NAME, __scopeSheet);
      return context.onlyShowFrame ? null : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        Handle,
        {
          onPress: () => {
            const max = context.snapPoints.length + (context.dismissOnSnapToBottom ? -1 : 0), nextPos = (context.position + 1) % max;
            context.setPosition(nextPos);
          },
          open: context.open,
          ...props
        }
      );
    }
  ), SheetOverlay = Overlay.extractable(
    (0, import_react.memo)((propsIn) => {
      const { __scopeSheet, ...props } = propsIn, context = (0, import_SheetContext.useSheetContext)(import_constants.SHEET_OVERLAY_NAME, __scopeSheet), element = (0, import_react.useMemo)(
        () => (
          // @ts-ignore
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            Overlay,
            {
              ...props,
              onPress: (0, import_core.composeEventHandlers)(
                props.onPress,
                context.dismissOnOverlayPress ? () => {
                  context.setOpen(!1);
                } : void 0
              )
            }
          )
        ),
        [props.onPress, context.dismissOnOverlayPress]
      );
      return (0, import_core.useIsomorphicLayoutEffect)(() => {
        var _a;
        (_a = context.onOverlayComponent) == null || _a.call(context, element);
      }, [element]), context.onlyShowFrame, null;
    })
  ), SheetFrame = Frame.extractable(
    (0, import_react.forwardRef)(
      ({
        __scopeSheet,
        adjustPaddingForOffscreenContent,
        disableHideBottomOverflow,
        children,
        ...props
      }, forwardedRef) => {
        const context = (0, import_SheetContext.useSheetContext)(import_constants.SHEET_NAME, __scopeSheet), { hasFit, removeScrollEnabled, frameSize, contentRef } = context, composedContentRef = (0, import_compose_refs.useComposedRefs)(forwardedRef, contentRef), offscreenSize = (0, import_useSheetOffscreenSize.useSheetOffscreenSize)(context), sheetContents = (0, import_react.useMemo)(() => (
          // @ts-ignore
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
            Frame,
            {
              ref: composedContentRef,
              flex: hasFit ? 0 : 1,
              height: hasFit ? void 0 : frameSize,
              ...props,
              children: [
                children,
                adjustPaddingForOffscreenContent && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_core.Stack, { "data-sheet-offscreen-pad": !0, height: offscreenSize, width: "100%" })
              ]
            }
          )
        ), [props, frameSize, offscreenSize, adjustPaddingForOffscreenContent, hasFit]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            import_remove_scroll.RemoveScroll,
            {
              forwardProps: !0,
              enabled: removeScrollEnabled,
              allowPinchZoom: !0,
              shards: [contentRef],
              removeScrollBar: !1,
              children: sheetContents
            }
          ),
          !disableHideBottomOverflow && // @ts-ignore
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            Frame,
            {
              ...props,
              componentName: "SheetCover",
              children: null,
              position: "absolute",
              bottom: "-50%",
              zIndex: -1,
              height: context.frameSize,
              left: 0,
              right: 0,
              borderWidth: 0,
              borderRadius: 0,
              shadowOpacity: 0
            }
          )
        ] });
      }
    )
  ), Sheet = (0, import_react.forwardRef)(function(props, ref) {
    const hydrated = (0, import_core.useDidFinishSSR)(), { isShowingNonSheet } = (0, import_useSheetController.useSheetController)();
    let SheetImplementation = import_SheetImplementationCustom.SheetImplementationCustom;
    return props.native && import_react_native.Platform.OS, isShowingNonSheet || !hydrated ? null : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SheetImplementation, { ref, ...props });
  }), components = {
    Frame: SheetFrame,
    Overlay: SheetOverlay,
    Handle: SheetHandle,
    ScrollView: import_SheetScrollView.SheetScrollView
  }, Controlled = (0, import_core.withStaticProperties)(Sheet, components);
  return (0, import_core.withStaticProperties)(Sheet, {
    ...components,
    Controlled
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createSheet
});
//# sourceMappingURL=createSheet.js.map
