import { composeRefs } from "@tamagui/compose-refs";
import { useEvent } from "@tamagui/web";
import { useCallback, useEffect, useRef } from "react";
import { registerFocusable } from "./registerFocusable";
function useFocusable({
  isInput,
  props,
  ref
}) {
  const { id, onChangeText, value, defaultValue } = props, inputValue = useRef(value || defaultValue || ""), unregisterFocusable = useRef(), inputRef = useCallback(
    (input) => {
      var _a;
      id && input && ((_a = unregisterFocusable.current) == null || _a.call(unregisterFocusable), unregisterFocusable.current = registerFocusable(id, {
        focus: input.focus,
        ...isInput && {
          // react-native doesn't support programmatic .select()
          focusAndSelect() {
            input.focus(), input.setSelection && typeof inputValue.current == "string" && input.setSelection(0, inputValue.current.length);
          }
        }
      }));
    },
    [isInput, id]
  ), combinedRefs = composeRefs(ref, inputRef);
  return useEffect(() => () => {
    var _a;
    (_a = unregisterFocusable.current) == null || _a.call(unregisterFocusable);
  }, []), {
    ref: combinedRefs,
    onChangeText: useEvent((value2) => {
      inputValue.current = value2, onChangeText == null || onChangeText(value2);
    })
  };
}
function focusableInputHOC(Component) {
  return Component.styleable((props, ref) => {
    var _a;
    const isInput = (_a = Component.staticConfig) == null ? void 0 : _a.isInput, { ref: combinedRef, onChangeText } = useFocusable({
      ref,
      props,
      isInput
    }), finalProps = isInput ? {
      ...props,
      onChangeText
    } : props;
    return <Component ref={combinedRef} {...finalProps} />;
  });
}
export {
  focusableInputHOC,
  useFocusable
};
//# sourceMappingURL=focusableInputHOC.js.map
