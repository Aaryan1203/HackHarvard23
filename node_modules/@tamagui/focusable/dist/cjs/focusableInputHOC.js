var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var focusableInputHOC_exports = {};
__export(focusableInputHOC_exports, {
  focusableInputHOC: () => focusableInputHOC,
  useFocusable: () => useFocusable
});
module.exports = __toCommonJS(focusableInputHOC_exports);
var import_compose_refs = require("@tamagui/compose-refs"), import_web = require("@tamagui/web"), import_react = require("react"), import_registerFocusable = require("./registerFocusable"), import_jsx_runtime = require("react/jsx-runtime");
function useFocusable({
  isInput,
  props,
  ref
}) {
  const { id, onChangeText, value, defaultValue } = props, inputValue = (0, import_react.useRef)(value || defaultValue || ""), unregisterFocusable = (0, import_react.useRef)(), inputRef = (0, import_react.useCallback)(
    (input) => {
      var _a;
      id && input && ((_a = unregisterFocusable.current) == null || _a.call(unregisterFocusable), unregisterFocusable.current = (0, import_registerFocusable.registerFocusable)(id, {
        focus: input.focus,
        ...isInput && {
          // react-native doesn't support programmatic .select()
          focusAndSelect() {
            input.focus(), input.setSelection && typeof inputValue.current == "string" && input.setSelection(0, inputValue.current.length);
          }
        }
      }));
    },
    [isInput, id]
  ), combinedRefs = (0, import_compose_refs.composeRefs)(ref, inputRef);
  return (0, import_react.useEffect)(() => () => {
    var _a;
    (_a = unregisterFocusable.current) == null || _a.call(unregisterFocusable);
  }, []), {
    ref: combinedRefs,
    onChangeText: (0, import_web.useEvent)((value2) => {
      inputValue.current = value2, onChangeText == null || onChangeText(value2);
    })
  };
}
function focusableInputHOC(Component) {
  return Component.styleable((props, ref) => {
    var _a;
    const isInput = (_a = Component.staticConfig) == null ? void 0 : _a.isInput, { ref: combinedRef, onChangeText } = useFocusable({
      ref,
      props,
      isInput
    }), finalProps = isInput ? {
      ...props,
      onChangeText
    } : props;
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, { ref: combinedRef, ...finalProps });
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  focusableInputHOC,
  useFocusable
});
//# sourceMappingURL=focusableInputHOC.js.map
