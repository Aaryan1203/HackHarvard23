"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
));
var import_compose_refs = require("@tamagui/compose-refs"), import_use_previous = require("@tamagui/use-previous"), React = __toESM(require("react"));
const BubbleSelect = React.forwardRef((props, forwardedRef) => {
  const { value, ...selectProps } = props, ref = React.useRef(null), composedRefs = (0, import_compose_refs.useComposedRefs)(forwardedRef, ref), prevValue = (0, import_use_previous.usePrevious)(value);
  return React.useEffect(() => {
    const select = ref.current, selectProto = window.HTMLSelectElement.prototype, setValue = Object.getOwnPropertyDescriptor(
      selectProto,
      "value"
    ).set;
    if (prevValue !== value && setValue) {
      const event = new Event("change", { bubbles: !0 });
      setValue.call(select, value), select.dispatchEvent(event);
    }
  }, [prevValue, value]), null;
});
//# sourceMappingURL=BubbleSelect.js.map
