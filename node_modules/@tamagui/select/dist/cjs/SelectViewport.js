var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var SelectViewport_exports = {};
__export(SelectViewport_exports, {
  SelectViewport: () => SelectViewport,
  SelectViewportFrame: () => SelectViewportFrame
});
module.exports = __toCommonJS(SelectViewport_exports);
var import_react = require("@floating-ui/react"), import_animate_presence = require("@tamagui/animate-presence"), import_core = require("@tamagui/core"), import_core2 = require("@tamagui/core"), import_portal = require("@tamagui/portal"), import_stacks = require("@tamagui/stacks"), import_constants = require("./constants"), import_context = require("./context"), import_useSelectBreakpointActive = require("./useSelectBreakpointActive"), import_jsx_runtime = require("react/jsx-runtime");
const SelectViewportFrame = (0, import_core2.styled)(import_stacks.ThemeableStack, {
  name: import_constants.VIEWPORT_NAME,
  variants: {
    unstyled: {
      false: {
        size: "$2",
        backgroundColor: "$background",
        elevate: !0,
        bordered: !0,
        userSelect: "none",
        outlineWidth: 0
      }
    },
    size: {
      "...size": (val, { tokens }) => ({
        borderRadius: tokens.radius[val] ?? val
      })
    }
  },
  defaultVariants: {
    unstyled: !1
  }
}), SelectViewport = SelectViewportFrame.styleable(
  function(props, forwardedRef) {
    var _a;
    const { __scopeSelect, children, disableScroll, ...viewportProps } = props, context = (0, import_context.useSelectContext)(import_constants.VIEWPORT_NAME, __scopeSelect), itemContext = (0, import_context.useSelectItemParentContext)(import_constants.VIEWPORT_NAME, __scopeSelect), breakpointActive = (0, import_useSelectBreakpointActive.useSelectBreakpointActive)(context.sheetBreakpoint);
    (0, import_core.useIsomorphicLayoutEffect)(() => {
      context.update && context.update();
    }, [breakpointActive]);
    const composedRefs = (0, import_core.composeRefs)(
      forwardedRef,
      (_a = context.floatingContext) == null ? void 0 : _a.refs.setFloating
    );
    if (itemContext.shouldRenderWebNative)
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children });
    if (breakpointActive || !import_core.isWeb)
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_portal.PortalItem, { hostName: `${context.scopeKey}SheetContents`, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_context.ForwardSelectContext,
        {
          __scopeSelect,
          itemContext,
          context,
          children
        }
      ) });
    if (!itemContext.interactions)
      return process.env.NODE_ENV === "development" && console.warn("No interactions provided to Select, potentially missing Adapt"), null;
    const {
      style,
      // remove this, it was set to "Select" always
      className,
      ...floatingProps
    } = itemContext.interactions.getFloatingProps(), { scrollbarWidth, listStyleType, overflow, ...restStyle } = style;
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
      !disableScroll && !props.unstyled && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        "style",
        {
          dangerouslySetInnerHTML: {
            __html: selectViewportCSS
          }
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react.FloatingFocusManager, { context: context.floatingContext, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_animate_presence.AnimatePresence, { children: context.open ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        SelectViewportFrame,
        {
          disableClassName: !0,
          size: itemContext.size,
          role: "presentation",
          ...viewportProps,
          ref: composedRefs,
          ...floatingProps,
          ...restStyle,
          ...!props.unstyled && {
            overflow: disableScroll ? void 0 : overflow ?? "scroll"
          },
          children
        },
        "select-viewport"
      ) : null }) }),
      !context.open && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { style: { display: "none" }, children: props.children })
    ] });
  }
), selectViewportCSS = `
.is_SelectViewport {
  scrollbar-width: none;
  -webkit-overflow-scrolling: touch;
  overscroll-behavior: contain;
}

.is_SelectViewport::-webkit-scrollbar{
  display:none
}
`;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SelectViewport,
  SelectViewportFrame
});
//# sourceMappingURL=SelectViewport.js.map
