"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var Select_exports = {};
__export(Select_exports, {
  Select: () => Select,
  SelectGroupFrame: () => SelectGroupFrame,
  SelectIcon: () => SelectIcon,
  SelectSeparator: () => SelectSeparator
});
module.exports = __toCommonJS(Select_exports);
var import_adapt = require("@tamagui/adapt"), import_compose_refs = require("@tamagui/compose-refs"), import_core = require("@tamagui/core"), import_get_token = require("@tamagui/get-token"), import_list_item = require("@tamagui/list-item"), import_portal = require("@tamagui/portal"), import_separator = require("@tamagui/separator"), import_sheet = require("@tamagui/sheet"), import_stacks = require("@tamagui/stacks"), import_text = require("@tamagui/text"), import_use_controllable_state = require("@tamagui/use-controllable-state"), React = __toESM(require("react")), import_constants = require("./constants"), import_context = require("./context"), import_SelectContent = require("./SelectContent"), import_SelectImpl = require("./SelectImpl"), import_SelectItem = require("./SelectItem"), import_SelectItemText = require("./SelectItemText"), import_SelectScrollButton = require("./SelectScrollButton"), import_SelectTrigger = require("./SelectTrigger"), import_SelectViewport = require("./SelectViewport"), import_useSelectBreakpointActive = require("./useSelectBreakpointActive"), import_jsx_runtime = require("react/jsx-runtime");
const VALUE_NAME = "SelectValue", SelectValueFrame = (0, import_core.styled)(import_text.SizableText, {
  name: VALUE_NAME,
  userSelect: "none"
}), SelectValue = SelectValueFrame.styleable(function({
  __scopeSelect,
  children: childrenProp,
  placeholder,
  ...props
}, forwardedRef) {
  const context = (0, import_context.useSelectContext)(VALUE_NAME, __scopeSelect), itemParentContext = (0, import_context.useSelectItemParentContext)(VALUE_NAME, __scopeSelect), composedRefs = (0, import_compose_refs.useComposedRefs)(forwardedRef, context.onValueNodeChange), children = childrenProp ?? context.selectedItem, selectValueChildren = context.value == null || context.value === "" ? placeholder ?? children : children;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    SelectValueFrame,
    {
      ...!props.unstyled && {
        size: itemParentContext.size,
        ellipse: !0
      },
      ref: composedRefs,
      pointerEvents: "none",
      ...props,
      children: unwrapSelectItem(selectValueChildren)
    }
  );
});
function unwrapSelectItem(selectValueChildren) {
  return React.Children.map(selectValueChildren, (child) => {
    var _a, _b, _c;
    if (child) {
      if (((_b = (_a = child.type) == null ? void 0 : _a.staticConfig) == null ? void 0 : _b.componentName) === import_SelectItemText.ITEM_TEXT_NAME)
        return child.props.children;
      if ((_c = child.props) != null && _c.children)
        return unwrapSelectItem(child.props.children);
    }
    return child;
  });
}
const SelectIcon = (0, import_core.styled)(import_stacks.XStack, {
  name: "SelectIcon",
  // @ts-ignore
  "aria-hidden": !0,
  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_text.Paragraph, { children: "\u25BC" })
}), ITEM_INDICATOR_NAME = "SelectItemIndicator", SelectItemIndicatorFrame = (0, import_core.styled)(import_stacks.XStack, {
  name: import_SelectItemText.ITEM_TEXT_NAME
}), SelectItemIndicator = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...itemIndicatorProps } = props, context = (0, import_context.useSelectItemParentContext)(ITEM_INDICATOR_NAME, __scopeSelect), itemContext = (0, import_SelectItem.useSelectItemContext)(ITEM_INDICATOR_NAME, __scopeSelect);
    return context.shouldRenderWebNative ? null : itemContext.isSelected ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SelectItemIndicatorFrame, { "aria-hidden": !0, ...itemIndicatorProps, ref: forwardedRef }) : null;
  }
);
SelectItemIndicator.displayName = ITEM_INDICATOR_NAME;
const GROUP_NAME = "SelectGroup", [SelectGroupContextProvider, useSelectGroupContext] = (0, import_context.createSelectContext)(GROUP_NAME), SelectGroupFrame = (0, import_core.styled)(import_stacks.YStack, {
  name: GROUP_NAME,
  width: "100%"
}), NativeSelectTextFrame = (0, import_core.styled)(import_text.SizableText, {
  tag: "select",
  backgroundColor: "$background",
  borderColor: "$borderColor",
  hoverStyle: {
    backgroundColor: "$backgroundHover"
  }
}), NativeSelectFrame = (0, import_core.styled)(import_stacks.ThemeableStack, {
  name: "NativeSelect",
  bordered: !0,
  userSelect: "none",
  outlineWidth: 0,
  paddingRight: 10,
  variants: {
    size: {
      "...size": (val, extras) => {
        const { tokens } = extras, paddingHorizontal = (0, import_core.getVariableValue)(tokens.space[val]);
        return {
          borderRadius: tokens.radius[val] ?? val,
          minHeight: tokens.size[val],
          paddingRight: paddingHorizontal + 20,
          paddingLeft: paddingHorizontal,
          paddingVertical: (0, import_get_token.getSpace)(val, {
            shift: -3
          })
        };
      }
    }
  },
  defaultVariants: {
    size: "$2"
  }
}), SelectGroup = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...groupProps } = props, groupId = React.useId(), context = (0, import_context.useSelectContext)(GROUP_NAME, __scopeSelect), itemParentContext = (0, import_context.useSelectItemParentContext)(GROUP_NAME, __scopeSelect), size = itemParentContext.size ?? "$true", nativeSelectRef = React.useRef(null), content = function() {
      return itemParentContext.shouldRenderWebNative ? (
        // @ts-expect-error until we support typing based on tag
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(NativeSelectFrame, { asChild: !0, size, value: context.value, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          NativeSelectTextFrame,
          {
            onChange: (event) => {
              itemParentContext.onChange(event.currentTarget.value);
            },
            size,
            ref: nativeSelectRef,
            style: {
              color: "var(--color)",
              // @ts-ignore
              appearance: "none"
            },
            children: props.children
          }
        ) })
      ) : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        SelectGroupFrame,
        {
          role: "group",
          "aria-labelledby": groupId,
          ...groupProps,
          ref: forwardedRef
        }
      );
    }();
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SelectGroupContextProvider, { scope: __scopeSelect, id: groupId || "", children: content });
  }
);
SelectGroup.displayName = GROUP_NAME;
const LABEL_NAME = "SelectLabel", SelectLabel = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...labelProps } = props, context = (0, import_context.useSelectItemParentContext)(LABEL_NAME, __scopeSelect), groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);
    return context.shouldRenderWebNative ? null : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_list_item.ListItem,
      {
        tag: "div",
        componentName: LABEL_NAME,
        fontWeight: "800",
        id: groupContext.id,
        size: context.size,
        ...labelProps,
        ref: forwardedRef
      }
    );
  }
);
SelectLabel.displayName = LABEL_NAME;
const SelectSeparator = (0, import_core.styled)(import_separator.Separator, {
  name: "SelectSeparator"
}), SelectSheetController = (props) => {
  const context = (0, import_context.useSelectContext)("SelectSheetController", props.__scopeSelect), showSheet = (0, import_useSelectBreakpointActive.useShowSelectSheet)(context), breakpointActive = (0, import_useSelectBreakpointActive.useSelectBreakpointActive)(context.sheetBreakpoint), getShowSheet = (0, import_core.useGet)(showSheet);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    import_sheet.SheetController,
    {
      onOpenChange: (val) => {
        getShowSheet() && props.onOpenChange(val);
      },
      open: context.open,
      hidden: breakpointActive === !1,
      children: props.children
    }
  );
}, SelectSheetImpl = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: props.children }), Select = (0, import_core.withStaticProperties)(
  (props) => {
    const {
      __scopeSelect,
      native,
      children,
      open: openProp,
      defaultOpen,
      onOpenChange,
      value: valueProp,
      defaultValue,
      onValueChange,
      disablePreventBodyScroll,
      size: sizeProp = "$true",
      onActiveChange,
      dir
    } = props, id = React.useId(), scopeKey = __scopeSelect ? Object.keys(__scopeSelect)[0] ?? id : id, { when, AdaptProvider } = (0, import_adapt.useAdaptParent)({
      Contents: React.useCallback(
        () => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_portal.PortalHost, { name: `${scopeKey}SheetContents` }),
        [scopeKey]
      )
    }), sheetBreakpoint = when, SelectImpl = (0, import_useSelectBreakpointActive.useSelectBreakpointActive)(sheetBreakpoint) || !import_core.isWeb ? SelectSheetImpl : import_SelectImpl.SelectInlineImpl, forceUpdate = React.useReducer(() => ({}), {})[1], [selectedItem, setSelectedItem] = React.useState(null), [open, setOpen] = (0, import_use_controllable_state.useControllableState)({
      prop: openProp,
      defaultProp: defaultOpen || !1,
      onChange: onOpenChange
    }), [value, setValue] = (0, import_use_controllable_state.useControllableState)({
      prop: valueProp,
      defaultProp: defaultValue || "",
      onChange: onValueChange,
      transition: !0
    });
    React.useEffect(() => {
      open && emitValue(value);
    }, [open]);
    const [activeIndex, setActiveIndex] = React.useState(0), [emitValue, valueSubscribe] = useEmitter(), [emitActiveIndex, activeIndexSubscribe] = useEmitter(), selectedIndexRef = React.useRef(null), activeIndexRef = React.useRef(null), listContentRef = React.useRef([]), [selectedIndex, setSelectedIndex] = React.useState(0), [valueNode, setValueNode] = React.useState(null);
    (0, import_core.useIsomorphicLayoutEffect)(() => {
      selectedIndexRef.current = selectedIndex, activeIndexRef.current = activeIndex;
    });
    const shouldRenderWebNative = import_core.isWeb && (native === !0 || native === "web" || Array.isArray(native) && native.includes("web"));
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AdaptProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_context.SelectItemParentProvider,
      {
        scope: __scopeSelect,
        initialValue: React.useMemo(() => value, []),
        size: sizeProp,
        activeIndexSubscribe,
        valueSubscribe,
        setOpen,
        onChange: React.useCallback((val) => {
          setValue(val), emitValue(val);
        }, []),
        onActiveChange: (0, import_core.useEvent)((...args) => {
          onActiveChange == null || onActiveChange(...args);
        }),
        setSelectedIndex,
        setValueAtIndex: React.useCallback((index, value2) => {
          listContentRef.current[index] = value2;
        }, []),
        shouldRenderWebNative,
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_context.SelectProvider,
          {
            scope: __scopeSelect,
            disablePreventBodyScroll,
            dir,
            blockSelection: !1,
            fallback: !1,
            selectedItem,
            setSelectedItem,
            forceUpdate,
            valueNode,
            onValueNodeChange: setValueNode,
            scopeKey,
            sheetBreakpoint,
            activeIndex,
            selectedIndex,
            setActiveIndex: React.useCallback((index) => {
              setActiveIndex((prev) => prev !== index ? (typeof index == "number" && emitActiveIndex(index), index) : prev);
            }, []),
            value,
            open,
            native,
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SelectSheetController, { onOpenChange: setOpen, __scopeSelect, children: shouldRenderWebNative ? children : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              SelectImpl,
              {
                activeIndexRef,
                listContentRef,
                selectedIndexRef,
                ...props,
                open,
                value,
                children
              }
            ) })
          }
        )
      }
    ) });
  },
  {
    Adapt: import_adapt.Adapt,
    Content: import_SelectContent.SelectContent,
    Group: SelectGroup,
    Icon: SelectIcon,
    Item: import_SelectItem.SelectItem,
    ItemIndicator: SelectItemIndicator,
    ItemText: import_SelectItemText.SelectItemText,
    Label: SelectLabel,
    ScrollDownButton: import_SelectScrollButton.SelectScrollDownButton,
    ScrollUpButton: import_SelectScrollButton.SelectScrollUpButton,
    Trigger: import_SelectTrigger.SelectTrigger,
    Value: SelectValue,
    Viewport: import_SelectViewport.SelectViewport,
    Sheet: import_sheet.Sheet.Controlled
  }
);
function useEmitter() {
  const listeners = React.useRef();
  listeners.current || (listeners.current = /* @__PURE__ */ new Set());
  const emit = (value) => {
    listeners.current.forEach((l) => l(value));
  }, subscribe = React.useCallback((listener) => (listeners.current.add(listener), () => {
    listeners.current.delete(listener);
  }), []);
  return [emit, subscribe];
}
Select.displayName = import_constants.SELECT_NAME;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Select,
  SelectGroupFrame,
  SelectIcon,
  SelectSeparator
});
//# sourceMappingURL=Select.js.map
