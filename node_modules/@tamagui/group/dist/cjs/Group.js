var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var Group_exports = {};
__export(Group_exports, {
  Group: () => Group,
  GroupFrame: () => GroupFrame,
  XGroup: () => XGroup,
  YGroup: () => YGroup,
  useGroupItem: () => useGroupItem
});
module.exports = __toCommonJS(Group_exports);
var import_core = require("@tamagui/core"), import_create_context = require("@tamagui/create-context"), import_stacks = require("@tamagui/stacks"), import_use_controllable_state = require("@tamagui/use-controllable-state"), import_react = __toESM(require("react")), import_react_native = require("react-native"), import_reforest = require("reforest"), import_jsx_runtime = require("react/jsx-runtime");
const GROUP_NAME = "Group", [createGroupContext, createGroupScope] = (0, import_create_context.createContextScope)(GROUP_NAME), [GroupProvider, useGroupContext] = createGroupContext(GROUP_NAME), GroupFrame = (0, import_core.styled)(import_stacks.ThemeableStack, {
  name: "GroupFrame",
  variants: {
    unstyled: {
      false: {
        size: "$true"
      }
    },
    size: (val, { tokens }) => ({
      borderRadius: tokens.radius[val] ?? val ?? tokens.radius.$true
    })
  },
  defaultVariants: {
    unstyled: !1
  }
});
function createGroup(verticalDefault) {
  return (0, import_core.withStaticProperties)(
    (0, import_react.forwardRef)((props, ref) => {
      const activeProps = (0, import_core.useProps)(props), {
        __scopeGroup,
        children: childrenProp,
        space,
        size = "$true",
        spaceDirection,
        separator,
        scrollable,
        axis = verticalDefault ? "vertical" : "horizontal",
        orientation = axis,
        disabled: disabledProp,
        disablePassBorderRadius: disablePassBorderRadiusProp,
        borderRadius,
        forceUseItem,
        ...restProps
      } = (0, import_core.getExpandedShorthands)(activeProps), vertical = orientation === "vertical", [itemChildrenCount, setItemChildrenCount] = (0, import_use_controllable_state.useControllableState)({
        defaultProp: forceUseItem ? 1 : 0
      }), isUsingItems = itemChildrenCount > 0, radius = borderRadius ?? (size ? (0, import_core.getVariableValue)((0, import_core.getTokens)().radius[size]) - 1 : void 0), disablePassBorderRadius = disablePassBorderRadiusProp ?? !(radius !== void 0), childrenArray = import_react.Children.toArray(childrenProp), children = isUsingItems ? import_react.Children.toArray(childrenProp).filter(import_react.isValidElement) : childrenArray.map((child, i) => {
        if (!(0, import_react.isValidElement)(child))
          return child;
        const disabled = child.props.disabled ?? disabledProp, isFirst = i === 0, isLast = i === childrenArray.length - 1, radiusStyles = disablePassBorderRadius === !0 ? null : getBorderRadius({
          isFirst,
          isLast,
          radius,
          vertical,
          disable: disablePassBorderRadius
        }), props2 = {
          disabled,
          ...(0, import_core.isTamaguiElement)(child) ? radiusStyles : { style: radiusStyles }
        };
        return cloneElementWithPropOrder(child, props2);
      }), indexedChildren = (0, import_reforest.useIndexedChildren)(
        (0, import_core.spacedChildren)({
          direction: spaceDirection,
          separator,
          // @ts-ignore
          space,
          children
        })
      ), onItemMount = import_react.default.useCallback(
        () => setItemChildrenCount((prev) => prev + 1),
        []
      ), onItemUnmount = import_react.default.useCallback(
        () => setItemChildrenCount((prev) => prev - 1),
        []
      );
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        GroupProvider,
        {
          disablePassBorderRadius,
          vertical: orientation === "vertical",
          radius,
          disabled: disabledProp,
          onItemMount,
          onItemUnmount,
          scope: __scopeGroup,
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            GroupFrame,
            {
              ref,
              size,
              flexDirection: orientation === "horizontal" ? "row" : "column",
              borderRadius,
              ...restProps,
              children: wrapScroll({ ...activeProps, orientation }, indexedChildren)
            }
          )
        }
      );
    }),
    {
      Item: GroupItem
    }
  );
}
const GroupItem = (props) => {
  var _a;
  const { __scopeGroup, children, forcePlacement } = props, groupItemProps = useGroupItem(
    { disabled: (0, import_react.isValidElement)(children) ? children.props.disabled : void 0 },
    forcePlacement,
    __scopeGroup
  );
  return (0, import_react.isValidElement)(children) ? (0, import_core.isTamaguiElement)(children) ? import_react.default.cloneElement(children, groupItemProps) : import_react.default.cloneElement(children, {
    style: {
      ...(_a = children.props) == null ? void 0 : _a.style,
      ...groupItemProps
    }
  }) : children;
}, useGroupItem = (childrenProps, forcePlacement, __scopeGroup) => {
  const treeIndex = (0, import_reforest.useIndex)(), context = useGroupContext("GroupItem", __scopeGroup);
  if (import_react.default.useEffect(() => (context.onItemMount(), () => {
    context.onItemUnmount();
  }), []), !treeIndex)
    throw Error("<Group.Item/> should only be used within a <Group/>");
  const isFirst = forcePlacement === "first" || forcePlacement !== "last" && treeIndex.index === 0, isLast = forcePlacement === "last" || forcePlacement !== "first" && treeIndex.index === treeIndex.maxIndex;
  let propsToPass = {
    disabled: childrenProps.disabled ?? context.disabled
  };
  if (context.disablePassBorderRadius !== !0) {
    const borderRadius = getBorderRadius({
      radius: context.radius,
      isFirst,
      isLast,
      vertical: context.vertical,
      disable: context.disablePassBorderRadius
    });
    return { ...propsToPass, ...borderRadius };
  }
  return propsToPass;
}, Group = createGroup(!0), YGroup = Group, XGroup = createGroup(!1), wrapScroll = ({ scrollable, orientation, showScrollIndicator = !1 }, children) => scrollable ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
  import_react_native.ScrollView,
  {
    ...orientation === "vertical" && {
      showsVerticalScrollIndicator: showScrollIndicator
    },
    ...orientation === "horizontal" && {
      horizontal: !0,
      showsHorizontalScrollIndicator: showScrollIndicator
    },
    children
  }
) : children, getBorderRadius = ({
  isFirst,
  isLast,
  radius,
  vertical,
  disable
}) => ({
  borderTopLeftRadius: isFirst && disable !== "top" && disable !== "start" ? radius : 0,
  borderTopRightRadius: disable !== "top" && disable !== "end" && (vertical && isFirst || !vertical && isLast) ? radius : 0,
  borderBottomLeftRadius: disable !== "bottom" && disable !== "start" && (vertical && isLast || !vertical && isFirst) ? radius : 0,
  borderBottomRightRadius: isLast && disable !== "bottom" && disable !== "end" ? radius : 0
}), cloneElementWithPropOrder = (child, props) => {
  const next = (0, import_core.mergeProps)(child.props, props, (0, import_core.getConfig)().shorthands);
  return import_react.default.cloneElement({ ...child, props: null }, next);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Group,
  GroupFrame,
  XGroup,
  YGroup,
  useGroupItem
});
//# sourceMappingURL=Group.js.map
