import { isClient, isServer, isWeb } from "@tamagui/constants";
import * as React from "react";
import { ComponentContext } from "../contexts/ComponentContext";
import { useMediaListeners } from "../hooks/useMedia";
import { ThemeProvider } from "./ThemeProvider";
import { jsx } from "react/jsx-runtime";
function TamaguiProvider({
  children,
  disableInjectCSS,
  config,
  ...themePropsProvider
}) {
  return isWeb && isServer || useMediaListeners(config), isClient && React.useLayoutEffect(() => {
    if (document.documentElement.classList.contains("t_unmounted") && document.documentElement.classList.remove("t_unmounted"), disableInjectCSS)
      return;
    const style = document.createElement("style");
    return style.appendChild(document.createTextNode(config.getCSS())), document.head.appendChild(style), () => {
      document.head.removeChild(style);
    };
  }, [config, disableInjectCSS]), /* @__PURE__ */ jsx(ComponentContext.Provider, { animationDriver: config.animations, children: /* @__PURE__ */ jsx(
    ThemeProvider,
    {
      themeClassNameOnRoot: config.themeClassNameOnRoot,
      disableRootThemeClass: config.disableRootThemeClass,
      ...themePropsProvider,
      defaultTheme: themePropsProvider.defaultTheme ?? Object.keys(config.themes)[0],
      children
    }
  ) });
}
export {
  TamaguiProvider
};
//# sourceMappingURL=TamaguiProvider.js.map
