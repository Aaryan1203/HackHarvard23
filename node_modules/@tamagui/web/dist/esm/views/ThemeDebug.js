import { useForceUpdate } from "@tamagui/use-force-update";
import { useEffect, useId, useState } from "react";
import { createPortal } from "react-dom";
import { Fragment, jsx, jsxs } from "react/jsx-runtime";
let node;
function ThemeDebug({
  themeState,
  themeProps,
  children
}) {
  if (themeProps["disable-child-theme"])
    return children;
  if (process.env.NODE_ENV === "development") {
    const [onChangeCount, setOnChangeCount] = useState(0), rerender = useForceUpdate(), id = useId();
    return process.env.NODE_ENV === "development" && typeof document < "u" && (node || (node = document.createElement("div"), node.style.height = "200px", node.style.overflowY = "scroll", node.style.position = "fixed", node.style.zIndex = 1e7, node.style.bottom = "30px", node.style.left = "30px", node.style.right = "30px", node.style.display = "flex", node.style.border = "1px solid #888", node.style.flexDirection = "row", node.style.background = "var(--background)", document.body.appendChild(node))), useEffect(() => {
      themeState.themeManager?.parentManager?.onChangeTheme((name, manager) => {
        setOnChangeCount((p) => ++p), console.warn(
          `theme changed for ${themeState.themeManager?.id} from parent ${themeState.themeManager?.parentManager?.id} to new name`,
          name
        );
      });
    }, [themeState.themeManager]), useEffect(() => {
      const tm = setInterval(rerender, 1e3);
      return () => clearTimeout(tm);
    }, []), /* @__PURE__ */ jsxs(Fragment, { children: [
      createPortal(
        /* @__PURE__ */ jsxs(
          "code",
          {
            style: {
              whiteSpace: "pre"
            },
            children: [
              "<Theme ",
              id,
              " />\xA0",
              JSON.stringify(
                {
                  name: themeState?.state?.name,
                  className: themeState?.state?.className,
                  inverse: themeProps.inverse,
                  forceClassName: themeProps.forceClassName,
                  parent: themeState.themeManager?.state.parentName,
                  id: themeState.themeManager?.id,
                  parentId: themeState.themeManager?.parentManager?.id,
                  isNew: themeState.isNewTheme,
                  onChangeCount,
                  listening: [...themeState.themeManager?._listeningIds || []].join(
                    ","
                  ),
                  _numChangeEventsSent: themeState.themeManager?._numChangeEventsSent
                },
                null,
                2
              )
            ]
          }
        ),
        node
      ),
      /* @__PURE__ */ jsx("div", { style: { color: "red" }, children: id }),
      children
    ] });
  }
  return children;
}
export {
  ThemeDebug
};
//# sourceMappingURL=ThemeDebug.js.map
