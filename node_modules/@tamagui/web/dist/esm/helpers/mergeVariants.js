const mergeVariants = (parentVariants, ourVariants) => {
  const variants = {};
  for (const key in ourVariants) {
    const parentVariant = parentVariants?.[key], ourVariant = ourVariants[key];
    if (!parentVariant || typeof ourVariant == "function") {
      variants[key] = ourVariant;
      continue;
    }
    if (parentVariant && !ourVariant) {
      variants[key] = parentVariant[key];
      continue;
    }
    variants[key] = {};
    for (const subKey in ourVariant) {
      const val = ourVariant[subKey], parentVal = parentVariant?.[subKey];
      typeof val == "function" || !parentVal || typeof parentVal == "function" ? variants[key][subKey] = val : variants[key][subKey] = {
        // keep order
        ...parentVal,
        ...val
      };
    }
    parentVariant && (variants[key] = {
      ...parentVariant,
      ...variants[key]
    });
  }
  return {
    ...parentVariants,
    ...variants
  };
};
export {
  mergeVariants
};
//# sourceMappingURL=mergeVariants.js.map
