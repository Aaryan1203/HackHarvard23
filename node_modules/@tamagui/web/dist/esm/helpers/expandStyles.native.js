import { isWeb } from "@tamagui/constants";
import { expandStyle } from "./expandStyle";
import { normalizeShadow } from "./normalizeShadow";
import { normalizeValueWithProperty } from "./normalizeValueWithProperty";
import { pseudoDescriptors } from "./pseudoDescriptors";
function expandStylesAndRemoveNullishValues(style) {
  const res = {};
  for (let key in style) {
    const valIn = style[key];
    if (valIn == null)
      continue;
    if (key in pseudoDescriptors) {
      res[key] = expandStylesAndRemoveNullishValues(valIn);
      continue;
    }
    const val = normalizeValueWithProperty(valIn, key), out = expandStyle(key, val);
    out ? Object.assign(res, Object.fromEntries(out)) : res[key] = val;
  }
  return fixStyles(res), res;
}
function fixStyles(style) {
  "elevationAndroid" in style && (style.elevation = style.elevationAndroid, delete style.elevationAndroid), (style.shadowRadius || style.shadowColor || style.shadowOpacity || style.shadowOffset) && Object.assign(style, normalizeShadow(style));
  for (const key in borderDefaults)
    key in style && !style[borderDefaults[key]] && (style[borderDefaults[key]] = "solid");
}
const nativeStyle = isWeb ? null : "borderStyle", borderDefaults = {
  borderWidth: "borderStyle",
  borderBottomWidth: nativeStyle || "borderBottomStyle",
  borderTopWidth: nativeStyle || "borderTopStyle",
  borderLeftWidth: nativeStyle || "borderLeftStyle",
  borderRightWidth: nativeStyle || "borderRightStyle"
};
export {
  expandStylesAndRemoveNullishValues,
  fixStyles
};
//# sourceMappingURL=expandStyles.js.map
