var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var normalizeValueWithProperty_exports = {};
__export(normalizeValueWithProperty_exports, {
  normalizeValueWithProperty: () => normalizeValueWithProperty,
  reverseMapClassNameToValue: () => reverseMapClassNameToValue
});
module.exports = __toCommonJS(normalizeValueWithProperty_exports);
var import_constants = require("@tamagui/constants"), import_helpers = require("@tamagui/helpers"), import_insertStyleRule = require("./insertStyleRule");
const stylePropsAllPlusTransforms = {
  ...import_helpers.stylePropsAll,
  translateX: !0,
  translateY: !0
};
function normalizeValueWithProperty(value, property) {
  if (!import_constants.isWeb || typeof value == "boolean" || property && property in import_helpers.stylePropsUnitless || property && !(property in stylePropsAllPlusTransforms))
    return value;
  let res = value;
  return value && typeof value == "object" ? value : (typeof value == "number" ? res = `${value}px` : property && (res = `${res}`), res);
}
const rcache = {};
function reverseMapClassNameToValue(key, className) {
  const cssRule = (0, import_insertStyleRule.getAllSelectors)()[className];
  if (rcache[cssRule])
    return rcache[cssRule];
  if (!cssRule) {
    process.env.NODE_ENV === "development" && console.warn(
      `No CSS rule found for ${key} looking for selector ".${className}", you may not be injecting extracted CSS`
    );
    return;
  }
  const cssVal = cssRule.replace(/.*:/, "").replace(/;.*/, "").trim();
  let res;
  return cssVal.startsWith("var(") ? res = cssVal : import_helpers.stylePropsUnitless[key] ? res = +cssVal : cssVal.endsWith("px") ? res = +cssVal.replace("px", "") : res = cssVal, rcache[cssRule] = res, process.env.NODE_ENV === "development" && typeof res == "number" && isNaN(res) && console.info("Tamagui invalid parsed value, NaN:", {
    res,
    cssVal,
    cssRule,
    key,
    className
  }), res;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  normalizeValueWithProperty,
  reverseMapClassNameToValue
});
//# sourceMappingURL=normalizeValueWithProperty.js.map
