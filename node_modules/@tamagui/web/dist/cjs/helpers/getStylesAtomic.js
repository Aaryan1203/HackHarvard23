var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var getStylesAtomic_exports = {};
__export(getStylesAtomic_exports, {
  generateAtomicStyles: () => generateAtomicStyles,
  getStylesAtomic: () => getStylesAtomic,
  styleToCSS: () => styleToCSS,
  transformsToString: () => transformsToString
});
module.exports = __toCommonJS(getStylesAtomic_exports);
var import_helpers = require("@tamagui/helpers"), import_config = require("../config"), import_defaultOffset = require("./defaultOffset"), import_normalizeValueWithProperty = require("./normalizeValueWithProperty"), import_pseudoDescriptors = require("./pseudoDescriptors");
function getStylesAtomic(stylesIn, debug) {
  let res = [];
  for (const pseudoName in import_pseudoDescriptors.pseudoDescriptorsBase) {
    const pseudoStyle = stylesIn[pseudoName];
    pseudoStyle && (res = [
      ...res,
      ...generateAtomicStyles(pseudoStyle, import_pseudoDescriptors.pseudoDescriptorsBase[pseudoName])
    ]);
  }
  return res = [...res, ...generateAtomicStyles(stylesIn)], process.env.NODE_ENV === "development" && debug === "verbose" && console.info(" \u{1FAAE} getStylesAtomic", { stylesIn, res }), res;
}
let conf;
function transformsToString(transforms) {
  return transforms.map(
    // { scale: 2 } => 'scale(2)'
    // { translateX: 20 } => 'translateX(20px)'
    // { matrix: [1,2,3,4,5,6] } => 'matrix(1,2,3,4,5,6)'
    (transform) => {
      const type = Object.keys(transform)[0], value = transform[type];
      return type === "matrix" || type === "matrix3d" ? `${type}(${value.join(",")})` : `${type}(${(0, import_normalizeValueWithProperty.normalizeValueWithProperty)(value, type)})`;
    }
  ).join(" ");
}
const generateAtomicStyles = (style, pseudo) => {
  if (!style)
    return [];
  conf = conf || (0, import_config.getConfig)(), styleToCSS(style);
  const out = [];
  for (const key in style) {
    if (key in import_pseudoDescriptors.pseudoDescriptors)
      continue;
    let val = style[key];
    if (val == null)
      continue;
    key === "transform" && Array.isArray(style.transform) && (val = transformsToString(val));
    const value = (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(val, key), hash = (0, import_helpers.simpleHash)(`${value}`), pseudoPrefix = pseudo ? `0${pseudo.name}-` : "", identifier = `_${conf.inverseShorthands[key] || key}-${pseudoPrefix}${hash}`, rules = createAtomicRules(identifier, key, value, pseudo), styleObject = {
      property: key,
      pseudo: pseudo == null ? void 0 : pseudo.name,
      identifier,
      rules,
      value
    };
    out.push(styleObject);
  }
  return out;
};
function styleToCSS(style) {
  const { shadowOffset, shadowRadius, shadowColor } = style;
  if (style.shadowRadius) {
    const offset = shadowOffset || import_defaultOffset.defaultOffset, width = (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(offset.width), height = (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(offset.height), radius = (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(shadowRadius), shadow = `${width} ${height} ${radius} ${shadowColor}`;
    style.boxShadow = style.boxShadow ? `${style.boxShadow}, ${shadow}` : shadow, delete style.shadowOffset, delete style.shadowRadius, delete style.shadowColor, delete style.shadowOpacity;
  }
  const { textShadowColor, textShadowOffset, textShadowRadius } = style;
  if (textShadowColor || textShadowOffset || textShadowRadius) {
    const { height, width } = textShadowOffset || import_defaultOffset.defaultOffset, radius = textShadowRadius || 0, color = (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(textShadowColor, "textShadowColor");
    if (color && (height !== 0 || width !== 0 || radius !== 0)) {
      const blurRadius = (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(radius), offsetX = (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(width), offsetY = (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(height);
      style.textShadow = `${offsetX} ${offsetY} ${blurRadius} ${color}`;
    }
    delete style.textShadowColor, delete style.textShadowOffset, delete style.textShadowRadius;
  }
}
function createDeclarationBlock(style, important = !1) {
  let next = "";
  for (const [key, value] of style)
    next += `${hyphenateStyleName(key)}:${value}${important ? " !important" : ""};`;
  return `{${next}}`;
}
const hcache = {}, toHyphenLower = (match) => `-${match.toLowerCase()}`, hyphenateStyleName = (key) => {
  if (key in hcache)
    return hcache[key];
  const val = key.replace(/[A-Z]/g, toHyphenLower);
  return hcache[key] = val, val;
}, pseudoSelectorPrefixes = (() => {
  const res = {};
  for (const key in import_pseudoDescriptors.pseudoDescriptors) {
    const pseudo = import_pseudoDescriptors.pseudoDescriptors[key];
    res[pseudo.name] = `${[...Array(pseudo.priority)].map(() => ":root").join("")} `;
  }
  return res;
})();
function createAtomicRules(identifier, property, value, pseudo) {
  const selector = pseudo ? (
    // adding one more :root so we always override react native web styles :/
    `${pseudoSelectorPrefixes[pseudo.name]} .${identifier}:${pseudo.name}`
  ) : `:root .${identifier}`, important = !!pseudo;
  let rules = [];
  switch (property) {
    case "placeholderTextColor": {
      const block = createDeclarationBlock(
        [
          ["color", value],
          ["opacity", 1]
        ],
        important
      );
      rules.push(`${selector}::placeholder${block}`);
      break;
    }
    case "backgroundClip":
    case "userSelect": {
      const webkitProperty = `Webkit${`${property[0].toUpperCase()}${property.slice(1)}`}`, block = createDeclarationBlock(
        [
          [property, value],
          [webkitProperty, value]
        ],
        important
      );
      rules.push(`${selector}${block}`);
      break;
    }
    case "pointerEvents": {
      let finalValue = value;
      value === "auto" || value === "box-only" ? (finalValue = "auto", value === "box-only" && rules.push(`${selector}>*${boxOnly}`)) : (value === "none" || value === "box-none") && (finalValue = "none", value === "box-none" && rules.push(`${selector}>*${boxNone}`));
      const block = createDeclarationBlock([["pointerEvents", finalValue]], !0);
      rules.push(`${selector}${block}`);
      break;
    }
    default: {
      const block = createDeclarationBlock([[property, value]], important);
      rules.push(`${selector}${block}`);
      break;
    }
  }
  return (pseudo == null ? void 0 : pseudo.name) === "hover" && (rules = rules.map((r) => `@media not all and (hover: none) { ${r} }`)), rules;
}
const boxNone = createDeclarationBlock([["pointerEvents", "auto"]], !0), boxOnly = createDeclarationBlock([["pointerEvents", "none"]], !0);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  generateAtomicStyles,
  getStylesAtomic,
  styleToCSS,
  transformsToString
});
//# sourceMappingURL=getStylesAtomic.js.map
