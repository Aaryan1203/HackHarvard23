"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var getVariantExtras_exports = {};
__export(getVariantExtras_exports, {
  getFontsForLanguage: () => getFontsForLanguage,
  getVariantExtras: () => getVariantExtras
});
module.exports = __toCommonJS(getVariantExtras_exports);
var import_createVariable = require("../createVariable"), import_createProxy = require("./createProxy");
function getVariantExtras(styleState) {
  const { curProps, conf, context, theme } = styleState;
  let fonts = conf.fontsParsed;
  context != null && context.language && (fonts = getFontsForLanguage(conf.fontsParsed, context.language));
  const fontFamily = (0, import_createVariable.getVariableValue)(
    styleState.fontFamily || styleState.curProps.fontFamily || styleState.conf.defaultFont
  );
  return {
    fonts,
    tokens: conf.tokensParsed,
    theme,
    fontFamily,
    font: fonts[fontFamily] || fonts[styleState.conf.defaultFont],
    // TODO do this in splitstlye
    // we avoid passing in default props for media queries because that would confuse things like SizableText.size:
    props: (0, import_createProxy.createProxy)(curProps, {
      // handles shorthands
      get(target, key) {
        const shorthand = conf.inverseShorthands[key];
        if (shorthand && Reflect.has(target, shorthand))
          return Reflect.get(target, shorthand);
        if (Reflect.has(target, key))
          return Reflect.get(target, key);
      }
    })
  };
}
const fontLanguageCache = /* @__PURE__ */ new WeakMap();
function getFontsForLanguage(fonts, language) {
  if (fontLanguageCache.has(language))
    return fontLanguageCache.get(language);
  const next = {
    ...fonts,
    ...Object.fromEntries(
      Object.entries(language).map(([name, lang]) => {
        if (lang === "default")
          return [];
        const langKey = `$${name}_${lang}`;
        return [`$${name}`, fonts[langKey]];
      })
    )
  };
  return fontLanguageCache.set(language, next), next;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getFontsForLanguage,
  getVariantExtras
});
//# sourceMappingURL=getVariantExtras.js.map
