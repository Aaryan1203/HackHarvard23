"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var insertFont_exports = {};
__export(insertFont_exports, {
  insertFont: () => insertFont,
  parseFont: () => parseFont,
  registerFontVariables: () => registerFontVariables,
  updateFont: () => updateFont
});
module.exports = __toCommonJS(insertFont_exports);
var import_config = require("./config"), import_createFont = require("./createFont"), import_createVariables = require("./createVariables"), import_registerCSSVariable = require("./helpers/registerCSSVariable");
function insertFont(name, fontIn) {
  const font = (0, import_createFont.createFont)(fontIn), tokened = (0, import_createVariables.createVariables)(font, name), parsed = parseFont(tokened);
  return (0, import_config.setConfigFont)(name, tokened, parsed), parsed;
}
const updateFont = insertFont;
function parseFont(definition) {
  var _a;
  const parsed = {};
  for (const attrKey in definition) {
    const attr = definition[attrKey];
    if (attrKey === "family" || attrKey === "face")
      parsed[attrKey] = attr;
    else {
      parsed[attrKey] = {};
      for (const key in attr) {
        let val = attr[key];
        ((_a = val.val) == null ? void 0 : _a[0]) === "$" && (val = val.val), parsed[attrKey][`$${key}`] = val;
      }
    }
  }
  return parsed;
}
function registerFontVariables(parsedFont) {
  const response = [];
  for (const fkey in parsedFont)
    if (fkey !== "face") {
      if (fkey === "family") {
        const val = parsedFont[fkey];
        (0, import_registerCSSVariable.registerCSSVariable)(val), response.push((0, import_registerCSSVariable.variableToCSS)(val));
      } else
        for (const fskey in parsedFont[fkey])
          if (typeof parsedFont[fkey][fskey] != "string") {
            const val = parsedFont[fkey][fskey];
            (0, import_registerCSSVariable.registerCSSVariable)(val), response.push((0, import_registerCSSVariable.variableToCSS)(val));
          }
    }
  return response;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  insertFont,
  parseFont,
  registerFontVariables,
  updateFont
});
//# sourceMappingURL=insertFont.js.map
