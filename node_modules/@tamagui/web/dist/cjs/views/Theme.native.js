"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var Theme_exports = {};
__export(Theme_exports, {
  Theme: () => Theme,
  useThemedChildren: () => useThemedChildren
});
module.exports = __toCommonJS(Theme_exports);
var import_constants = require("@tamagui/constants"), import_react = __toESM(require("react")), import_createVariable = require("../createVariable"), import_ThemeManagerContext = require("../helpers/ThemeManagerContext"), import_useTheme = require("../hooks/useTheme"), import_ThemeDebug = require("./ThemeDebug"), import_jsx_runtime = require("react/jsx-runtime");
const Theme = (0, import_react.forwardRef)(function(props, ref) {
  if (props.disable)
    return props.children;
  const isRoot = !!props._isRoot, disableDirectChildTheme = props["disable-child-theme"], themeState = (0, import_useTheme.useChangeThemeEffect)(props, isRoot), children = (0, import_react.useMemo)(() => {
    let children2 = disableDirectChildTheme ? import_react.Children.map(
      props.children,
      (child) => (0, import_react.cloneElement)(child, { "data-disable-theme": !0 })
    ) : props.children;
    if (ref)
      try {
        import_react.default.Children.only(children2), children2 = (0, import_react.cloneElement)(children2, { ref });
      } catch {
      }
    return process.env.NODE_ENV === "development" && props.debug === "visualize" && (children2 = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ThemeDebug.ThemeDebug, { themeState, themeProps: props, children: children2 })), children2;
  }, [props.children, disableDirectChildTheme]);
  return useThemedChildren(themeState, children, props, isRoot);
});
Theme.avoidForwardRef = !0;
function useThemedChildren(themeState, children, props, isRoot = !1, avoidWrap = !1) {
  const { themeManager, isNewTheme } = themeState, { shallow, forceClassName } = props, hasEverThemed = (0, import_react.useRef)(!1);
  if (isNewTheme && (hasEverThemed.current = !0), !(isNewTheme || props.inverse || hasEverThemed.current || forceClassName || isRoot))
    return children;
  let next = children;
  shallow && themeManager && (next = import_react.Children.toArray(children).map((child) => (0, import_react.isValidElement)(child) ? (0, import_react.cloneElement)(
    child,
    void 0,
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Theme, { name: themeManager.state.parentName, children: child.props.children })
  ) : child));
  const elementsWithContext = themeManager ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ThemeManagerContext.ThemeManagerContext.Provider, { value: themeManager, children: next }) : next;
  return forceClassName === !1 ? elementsWithContext : import_constants.isWeb && !avoidWrap ? wrapThemeElements({
    children: elementsWithContext,
    themeState,
    forceClassName,
    isRoot
  }) : elementsWithContext;
}
function wrapThemeElements({
  children,
  themeState,
  forceClassName,
  isRoot
}) {
  var _a;
  if (isRoot && forceClassName === !1)
    return children;
  const inverse = themeState.inversed, requiresExtraWrapper = inverse != null || forceClassName;
  if (!themeState.isNewTheme && !requiresExtraWrapper)
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: "_dsp_contents is_Theme", children });
  const { className, style } = getThemeClassNameAndStyle(themeState, isRoot);
  let themedChildren = /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: `${className} _dsp_contents is_Theme`, style, children });
  if (requiresExtraWrapper) {
    const name = ((_a = themeState.state) == null ? void 0 : _a.name) || "", inverseClassName = name.startsWith("light") ? "t_light is_inversed" : name.startsWith("dark") ? "t_dark is_inversed" : "";
    themedChildren = /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: `${inverse ? inverseClassName : ""} _dsp_contents`, children: themedChildren });
  }
  return themedChildren;
}
function getThemeClassNameAndStyle(themeState, isRoot = !1) {
  var _a, _b;
  const themeColor = (_a = themeState.state) != null && _a.theme && themeState.isNewTheme ? (0, import_createVariable.variableToString)(themeState.state.theme.color) : "", style = themeColor ? {
    color: themeColor
  } : void 0;
  let className = ((_b = themeState.state) == null ? void 0 : _b.className) || "";
  return isRoot && (className = className.replace("t_sub_theme", "")), { style, className };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Theme,
  useThemedChildren
});
//# sourceMappingURL=Theme.js.map
