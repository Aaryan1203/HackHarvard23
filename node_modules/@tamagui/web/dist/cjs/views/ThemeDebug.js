var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var ThemeDebug_exports = {};
__export(ThemeDebug_exports, {
  ThemeDebug: () => ThemeDebug
});
module.exports = __toCommonJS(ThemeDebug_exports);
var import_use_force_update = require("@tamagui/use-force-update"), import_react = require("react"), import_react_dom = require("react-dom"), import_jsx_runtime = require("react/jsx-runtime");
let node;
function ThemeDebug({
  themeState,
  themeProps,
  children
}) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  if (themeProps["disable-child-theme"])
    return children;
  if (process.env.NODE_ENV === "development") {
    const [onChangeCount, setOnChangeCount] = (0, import_react.useState)(0), rerender = (0, import_use_force_update.useForceUpdate)(), id = (0, import_react.useId)();
    return process.env.NODE_ENV === "development" && typeof document < "u" && (node || (node = document.createElement("div"), node.style.height = "200px", node.style.overflowY = "scroll", node.style.position = "fixed", node.style.zIndex = 1e7, node.style.bottom = "30px", node.style.left = "30px", node.style.right = "30px", node.style.display = "flex", node.style.border = "1px solid #888", node.style.flexDirection = "row", node.style.background = "var(--background)", document.body.appendChild(node))), (0, import_react.useEffect)(() => {
      var _a2, _b2;
      (_b2 = (_a2 = themeState.themeManager) == null ? void 0 : _a2.parentManager) == null || _b2.onChangeTheme((name, manager) => {
        var _a3, _b3, _c2;
        setOnChangeCount((p) => ++p), console.warn(
          `theme changed for ${(_a3 = themeState.themeManager) == null ? void 0 : _a3.id} from parent ${(_c2 = (_b3 = themeState.themeManager) == null ? void 0 : _b3.parentManager) == null ? void 0 : _c2.id} to new name`,
          name
        );
      });
    }, [themeState.themeManager]), (0, import_react.useEffect)(() => {
      const tm = setInterval(rerender, 1e3);
      return () => clearTimeout(tm);
    }, []), /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
      (0, import_react_dom.createPortal)(
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
          "code",
          {
            style: {
              whiteSpace: "pre"
            },
            children: [
              "<Theme ",
              id,
              " />\xA0",
              JSON.stringify(
                {
                  name: (_a = themeState == null ? void 0 : themeState.state) == null ? void 0 : _a.name,
                  className: (_b = themeState == null ? void 0 : themeState.state) == null ? void 0 : _b.className,
                  inverse: themeProps.inverse,
                  forceClassName: themeProps.forceClassName,
                  parent: (_c = themeState.themeManager) == null ? void 0 : _c.state.parentName,
                  id: (_d = themeState.themeManager) == null ? void 0 : _d.id,
                  parentId: (_f = (_e = themeState.themeManager) == null ? void 0 : _e.parentManager) == null ? void 0 : _f.id,
                  isNew: themeState.isNewTheme,
                  onChangeCount,
                  listening: [...((_g = themeState.themeManager) == null ? void 0 : _g._listeningIds) || []].join(
                    ","
                  ),
                  _numChangeEventsSent: (_h = themeState.themeManager) == null ? void 0 : _h._numChangeEventsSent
                },
                null,
                2
              )
            ]
          }
        ),
        node
      ),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { style: { color: "red" }, children: id }),
      children
    ] });
  }
  return children;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ThemeDebug
});
//# sourceMappingURL=ThemeDebug.js.map
