"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var createSwitch_exports = {};
__export(createSwitch_exports, {
  createSwitch: () => createSwitch
});
module.exports = __toCommonJS(createSwitch_exports);
var import_compose_refs = require("@tamagui/compose-refs"), import_core = require("@tamagui/core"), import_focusable = require("@tamagui/focusable"), import_label = require("@tamagui/label"), import_stacks = require("@tamagui/stacks"), import_use_controllable_state = require("@tamagui/use-controllable-state"), import_use_previous = require("@tamagui/use-previous"), React = __toESM(require("react")), import_react_native = require("react-native"), import_Switch = require("./Switch"), import_SwitchContext = require("./SwitchContext"), import_jsx_runtime = (
  // @ts-ignore
  require("react/jsx-runtime")
);
function createSwitch({
  disableActiveTheme,
  Frame = import_Switch.SwitchFrame,
  Thumb = import_Switch.SwitchThumb
}) {
  process.env.NODE_ENV === "development" && (Frame !== import_Switch.SwitchFrame && Frame.staticConfig.context && console.warn(
    "Warning: createSwitch() needs to control context to pass checked state from Frame to Thumb, any custom context passed will be overridden."
  ), Thumb !== import_Switch.SwitchThumb && Thumb.staticConfig.context && console.warn(
    "Warning: createSwitch() needs to control context to pass checked state from Frame to Thumb, any custom context passed will be overridden."
  )), Frame.staticConfig.context = import_SwitchContext.SwitchContext, Thumb.staticConfig.context = import_SwitchContext.SwitchContext;
  const SwitchThumbComponent = Thumb.styleable(function(props, forwardedRef) {
    const { size: sizeProp, unstyled: unstyledProp, ...thumbProps } = props, context = React.useContext(import_SwitchContext.SwitchContext), {
      disabled,
      checked,
      unstyled: unstyledContext,
      frameWidth,
      size: sizeContext
    } = context, [thumbWidth, setThumbWidth] = React.useState(0), initialChecked = React.useRef(checked).current, distance = frameWidth - thumbWidth, x = initialChecked ? checked ? 0 : -distance : checked ? distance : 0;
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      Thumb,
      {
        ...(unstyledProp ?? unstyledContext ?? !1) === !1 && {
          unstyled: !1,
          size: sizeProp ?? sizeContext ?? "$true",
          ...!disableActiveTheme && {
            theme: checked ? "active" : null
          }
        },
        "data-state": getState(checked),
        "data-disabled": disabled ? "" : void 0,
        alignSelf: initialChecked ? "flex-end" : "flex-start",
        checked,
        x,
        ...thumbProps,
        onLayout: (0, import_core.composeEventHandlers)(
          props.onLayout,
          (e) => (
            // @ts-ignore
            setThumbWidth(e.nativeEvent.layout.width)
          )
        ),
        ref: forwardedRef
      }
    );
  }), SwitchComponent = Frame.extractable(
    React.forwardRef(function(propsIn, forwardedRef) {
      const styledContext = React.useContext(import_SwitchContext.SwitchContext), props = (0, import_core.useProps)(propsIn, {
        noNormalize: !0,
        noExpand: !0,
        resolveValues: "none",
        forComponent: Frame
      }), {
        labeledBy: ariaLabelledby,
        name,
        checked: checkedProp,
        defaultChecked,
        required,
        disabled,
        value = "on",
        onCheckedChange,
        size = styledContext.size ?? "$true",
        unstyled = styledContext.unstyled ?? !1,
        native: nativeProp,
        nativeProps,
        children,
        ...switchProps
      } = props, native = Array.isArray(nativeProp) ? nativeProp : [nativeProp], shouldRenderMobileNative = !import_core.isWeb && nativeProp === !0 || !import_core.isWeb && native.includes("mobile") || native.includes("android") && import_react_native.Platform.OS === "android" || native.includes("ios") && import_react_native.Platform.OS === "ios", [button, setButton] = React.useState(null), composedRefs = (0, import_compose_refs.useComposedRefs)(forwardedRef, (node) => setButton(node)), labelId = (0, import_label.useLabelContext)(button), labelledBy = ariaLabelledby || labelId, hasConsumerStoppedPropagationRef = React.useRef(!1), isFormControl = import_core.isWeb ? button ? !!button.closest("form") : !0 : !1, [frameWidth, setFrameWidth] = React.useState(0), [checked = !1, setChecked] = (0, import_use_controllable_state.useControllableState)({
        prop: checkedProp,
        defaultProp: defaultChecked || !1,
        onChange: onCheckedChange,
        transition: !0
      });
      return shouldRenderMobileNative ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_react_native.Switch,
        {
          value: checkedProp,
          onValueChange: onCheckedChange,
          ...nativeProps
        }
      ) : (import_core.isWeb || React.useEffect(() => {
        if (props.id)
          return (0, import_focusable.registerFocusable)(props.id, {
            focus: () => {
              setChecked((x) => !x);
            }
          });
      }, [props.id, setChecked]), /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          Frame,
          {
            unstyled,
            size,
            checked,
            disabled,
            frameWidth,
            themeShallow: !0,
            ...!disableActiveTheme && {
              theme: checked ? "active" : null,
              themeShallow: !0
            },
            role: "switch",
            "aria-checked": checked,
            "aria-labelledby": labelledBy,
            "aria-required": required,
            "data-state": getState(checked),
            "data-disabled": disabled ? "" : void 0,
            tabIndex: disabled ? void 0 : 0,
            value,
            ...switchProps,
            ref: composedRefs,
            onPress: (0, import_core.composeEventHandlers)(props.onPress, (event) => {
              setChecked((prevChecked) => !prevChecked), import_core.isWeb && isFormControl && (hasConsumerStoppedPropagationRef.current = event.isPropagationStopped(), hasConsumerStoppedPropagationRef.current || event.stopPropagation());
            }),
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              import_stacks.YStack,
              {
                alignSelf: "stretch",
                flex: 1,
                onLayout: (e) => {
                  setFrameWidth(e.nativeEvent.layout.width);
                },
                children: typeof children == "function" ? children(checked) : children
              }
            )
          }
        ),
        import_core.isWeb && isFormControl && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          BubbleInput,
          {
            control: button,
            bubbles: !hasConsumerStoppedPropagationRef.current,
            name,
            value,
            checked,
            required,
            disabled,
            style: { transform: "translateX(-100%)" }
          }
        )
      ] }));
    })
  ), BubbleInput = (props) => {
    const { control, checked, bubbles = !0, ...inputProps } = props, ref = React.useRef(null), prevChecked = (0, import_use_previous.usePrevious)(checked);
    return React.useEffect(() => {
      const input = ref.current, inputProto = window.HTMLInputElement.prototype, setChecked = Object.getOwnPropertyDescriptor(
        inputProto,
        "checked"
      ).set;
      if (prevChecked !== checked && setChecked) {
        const event = new Event("click", { bubbles });
        setChecked.call(input, checked), input.dispatchEvent(event);
      }
    }, [prevChecked, checked, bubbles]), // @ts-ignore
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      "input",
      {
        type: "checkbox",
        "aria-hidden": !0,
        defaultChecked: checked,
        ...inputProps,
        tabIndex: -1,
        ref,
        style: {
          ...props.style,
          // ...controlSize,
          position: "absolute",
          pointerEvents: "none",
          opacity: 0,
          margin: 0
        }
      }
    );
  };
  function getState(checked) {
    return checked ? "checked" : "unchecked";
  }
  return (0, import_core.withStaticProperties)(SwitchComponent, {
    Thumb: SwitchThumbComponent
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createSwitch
});
//# sourceMappingURL=createSwitch.js.map
