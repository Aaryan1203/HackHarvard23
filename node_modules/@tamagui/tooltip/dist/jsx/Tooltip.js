import "@tamagui/polyfill-dev";
import {
  FloatingDelayGroup,
  useDelayGroup,
  useDelayGroupContext,
  useDismiss,
  useFloating,
  useFocus,
  useHover,
  useInteractions,
  useRole
} from "@floating-ui/react";
import { useEvent, withStaticProperties } from "@tamagui/core";
import { FloatingOverrideContext } from "@tamagui/floating";
import { getSize } from "@tamagui/get-token";
import {
  PopoverAnchor,
  PopoverArrow,
  PopoverContent,
  PopoverContext,
  PopoverTrigger
} from "@tamagui/popover";
import {
  Popper,
  PopperContentFrame,
  usePopperContext
} from "@tamagui/popper";
import { useControllableState } from "@tamagui/use-controllable-state";
import * as React from "react";
const TOOLTIP_SCOPE = "tooltip", TooltipContent = PopperContentFrame.extractable(
  React.forwardRef(
    ({ __scopeTooltip, ...props }, ref) => {
      const popper = usePopperContext(__scopeTooltip || TOOLTIP_SCOPE), padding = props.padding ?? props.size ?? popper.size ?? getSize("$true", {
        shift: -2
      });
      return <PopoverContent
        __scopePopover={__scopeTooltip || TOOLTIP_SCOPE}
        componentName="Tooltip"
        disableRemoveScroll
        disableFocusScope
        {...!props.unstyled && {
          padding
        }}
        ref={ref}
        {...props}
      />;
    }
  )
), TooltipArrow = React.forwardRef(
  (props, ref) => {
    const { __scopeTooltip, ...rest } = props;
    return <PopoverArrow
      __scopePopover={__scopeTooltip || TOOLTIP_SCOPE}
      componentName="Tooltip"
      ref={ref}
      {...rest}
    />;
  }
), TooltipGroup = ({ children, delay }) => <FloatingDelayGroup delay={React.useMemo(() => delay, [JSON.stringify(delay)])}>{children}</FloatingDelayGroup>, TooltipComponent = React.forwardRef(function(props, ref) {
  const {
    children,
    delay: delayProp,
    restMs = typeof delayProp > "u" ? 500 : typeof delayProp == "number" ? delayProp : 0,
    onOpenChange: onOpenChangeProp,
    focus,
    open: openProp,
    __scopeTooltip,
    ...restProps
  } = props, triggerRef = React.useRef(null), [hasCustomAnchor, setHasCustomAnchor] = React.useState(!1), { delay: delayGroup, setCurrentId } = useDelayGroupContext(), delay = delayProp ?? delayGroup, [open, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: !1,
    onChange: onOpenChangeProp
  }), id = props.groupId, onOpenChange = useEvent((open2) => {
    open2 && setCurrentId(id), setOpen(open2);
  }), useFloatingFn = (props2) => {
    const floating = useFloating({
      ...props2,
      open,
      onOpenChange
    }), { getReferenceProps, getFloatingProps } = useInteractions([
      useHover(floating.context, { delay, restMs }),
      useFocus(floating.context, focus),
      useRole(floating.context, { role: "tooltip" }),
      useDismiss(floating.context),
      useDelayGroup(floating.context, { id })
    ]);
    return {
      ...floating,
      open,
      getReferenceProps,
      getFloatingProps
    };
  }, useFloatingContext = React.useCallback(useFloatingFn, [id, delay, open]), onCustomAnchorAdd = React.useCallback(() => setHasCustomAnchor(!0), []), onCustomAnchorRemove = React.useCallback(() => setHasCustomAnchor(!1), []), contentId = React.useId(), smallerSize = props.unstyled ? null : getSize("$true", {
    shift: -2,
    bounds: [0]
  });
  return (
    // TODO: FloatingOverrideContext might also need to be scoped
    <FloatingOverrideContext.Provider value={useFloatingContext}>
      {
        /* default tooltip to a smaller size */
      }
      <Popper
        __scopePopper={__scopeTooltip || TOOLTIP_SCOPE}
        size={smallerSize?.key}
        allowFlip
        stayInFrame
        {...restProps}
      ><PopoverContext.Provider
        contentId={contentId}
        triggerRef={triggerRef}
        sheetBreakpoint={!1}
        open={open}
        scope={__scopeTooltip || TOOLTIP_SCOPE}
        onOpenChange={setOpen}
        onOpenToggle={voidFn}
        hasCustomAnchor={hasCustomAnchor}
        onCustomAnchorAdd={onCustomAnchorAdd}
        onCustomAnchorRemove={onCustomAnchorRemove}
      >{children}</PopoverContext.Provider></Popper>
    </FloatingOverrideContext.Provider>
  );
}), TooltipTrigger = React.forwardRef(function(props, ref) {
  const { __scopeTooltip, ...rest } = props;
  return <PopoverTrigger
    {...rest}
    __scopePopover={__scopeTooltip || TOOLTIP_SCOPE}
    ref={ref}
  />;
}), TooltipAnchor = React.forwardRef(function(props, ref) {
  const { __scopeTooltip, ...rest } = props;
  return <PopoverAnchor {...rest} __scopePopover={__scopeTooltip || TOOLTIP_SCOPE} ref={ref} />;
}), Tooltip2 = withStaticProperties(TooltipComponent, {
  Anchor: TooltipAnchor,
  Arrow: TooltipArrow,
  Content: TooltipContent,
  Trigger: TooltipTrigger
}), voidFn = () => {
};
export {
  Tooltip2 as Tooltip,
  TooltipGroup
};
//# sourceMappingURL=Tooltip.js.map
