var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var mediaQueryList_exports = {};
__export(mediaQueryList_exports, {
  NativeMediaQueryList: () => NativeMediaQueryList
});
module.exports = __toCommonJS(mediaQueryList_exports);
var import_react_native = require("react-native"), import_matchQuery = require("./matchQuery");
class NativeMediaQueryList {
  constructor(query) {
    this.query = query;
    this.notify(), import_react_native.Dimensions.addEventListener("change", () => {
      this.notify();
    });
  }
  listeners = [];
  get orientation() {
    const windowDimensions = import_react_native.Dimensions.get("window");
    return windowDimensions.height > windowDimensions.width ? "portrait" : "landscape";
  }
  notify() {
    this.listeners.forEach((listener) => {
      listener(this.orientation);
    });
  }
  addListener(listener) {
    this.listeners.push(listener);
  }
  removeListener(listener) {
    const index = this.listeners.indexOf(listener);
    index !== -1 && this.listeners.splice(index, 1);
  }
  match(query, { width, height }) {
    return (0, import_matchQuery.matchQuery)(query, {
      type: "screen",
      orientation: height > width ? "portrait" : "landscape",
      "device-width": width,
      "device-height": height
    });
  }
  get matches() {
    const windowDimensions = import_react_native.Dimensions.get("window");
    return (0, import_matchQuery.matchQuery)(this.query, {
      type: "screen",
      orientation: this.orientation,
      ...windowDimensions,
      "device-width": windowDimensions.width,
      "device-height": windowDimensions.height
    });
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  NativeMediaQueryList
});
//# sourceMappingURL=mediaQueryList.js.map
