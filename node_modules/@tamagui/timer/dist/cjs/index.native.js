"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var src_exports = {};
__export(src_exports, {
  timer: () => timer
});
module.exports = __toCommonJS(src_exports);
function timer() {
  let runs = 0;
  const typesOfRuns = /* @__PURE__ */ new Set(), timings = {};
  function print() {
    const typeRuns = runs / typesOfRuns.size;
    let totalTime = 0;
    const out = [
      `Ran ${typeRuns} per-type, ${runs} total`,
      ...[...typesOfRuns].map((name) => {
        const avg = `avg ${`${timings[name] / typeRuns}`.slice(0, 9).padEnd(9)}ms`, total = timings[name];
        return totalTime += total, `${name.slice(0, 30).padStart(31)} | ${avg} | total ${total}ms`;
      }),
      `                                    total ${totalTime}ms`
    ].join(`
`);
    return console.info(out), out;
  }
  return {
    start(opts) {
      const quiet = (opts == null ? void 0 : opts.quiet) ?? !0;
      function time(strings, ...vars) {
        const elapsed = performance.now() - start;
        start = performance.now();
        const tag = strings[0];
        if (typesOfRuns.add(tag), runs++, timings[tag] ??= 0, timings[tag] += elapsed, !quiet) {
          let result = "";
          strings.forEach((str, i) => {
            result += `${str}${i === strings.length - 1 ? "" : vars[i]}`;
          }), console.info(`${`${elapsed}ms`.slice(0, 6).padStart(7)} |`, result);
        }
      }
      let start = performance.now();
      return time.print = print, time;
    },
    profile() {
      return {
        timings,
        runs
      };
    },
    print
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  timer
});
//# sourceMappingURL=index.js.map
