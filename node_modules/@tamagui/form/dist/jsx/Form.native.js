import {
  Stack,
  View,
  composeEventHandlers,
  styled,
  withStaticProperties
} from "@tamagui/core";
import { createContextScope } from "@tamagui/create-context";
const FORM_NAME = "Form", FormFrame = styled(Stack, {
  name: FORM_NAME,
  tag: "form"
}), [createFormContext] = createContextScope(FORM_NAME), [FormProvider, useFormContext] = createFormContext(FORM_NAME), TRIGGER_NAME = "FormTrigger", FormTriggerFrame = styled(View, {
  name: TRIGGER_NAME
}), FormTrigger = FormTriggerFrame.styleable(
  (props, forwardedRef) => {
    const { __scopeForm, children, onPress, ...triggerProps } = props, context = useFormContext(TRIGGER_NAME, __scopeForm);
    return <FormTriggerFrame
      tag="button"
      {...triggerProps}
      ref={forwardedRef}
      onPress={composeEventHandlers(onPress, context.onSubmit)}
    >{children}</FormTriggerFrame>;
  }
), FormComponent = FormFrame.extractable(function({
  onSubmit,
  ...props
}) {
  return <FormProvider scope={props.__scopeForm} onSubmit={onSubmit}><FormFrame {...props} onSubmit={(e) => e.preventDefault()} /></FormProvider>;
}), Form2 = withStaticProperties(FormComponent, {
  Trigger: FormTrigger
});
export {
  Form2 as Form,
  FormFrame,
  FormProvider,
  FormTrigger,
  useFormContext
};
//# sourceMappingURL=Form.js.map
