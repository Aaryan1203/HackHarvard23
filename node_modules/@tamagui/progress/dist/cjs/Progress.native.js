"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var Progress_exports = {};
__export(Progress_exports, {
  Progress: () => Progress,
  ProgressFrame: () => ProgressFrame,
  ProgressIndicator: () => ProgressIndicator,
  ProgressIndicatorFrame: () => ProgressIndicatorFrame,
  createProgressScope: () => createProgressScope
});
module.exports = __toCommonJS(Progress_exports);
var import_core = require("@tamagui/core"), import_create_context = require("@tamagui/create-context"), import_get_token = require("@tamagui/get-token"), import_stacks = require("@tamagui/stacks"), React = __toESM(require("react")), import_jsx_runtime = require("react/jsx-runtime");
const PROGRESS_NAME = "Progress", [createProgressContext, createProgressScope] = (0, import_create_context.createContextScope)(PROGRESS_NAME), [ProgressProvider, useProgressContext] = createProgressContext(PROGRESS_NAME), INDICATOR_NAME = "ProgressIndicator", ProgressIndicatorFrame = (0, import_core.styled)(import_stacks.ThemeableStack, {
  name: INDICATOR_NAME,
  variants: {
    unstyled: {
      false: {
        height: "100%",
        width: "100%",
        backgrounded: !0
      }
    }
  },
  defaultVariants: {
    unstyled: !1
  }
}), ProgressIndicator = ProgressIndicatorFrame.styleable(function(props, forwardedRef) {
  const { __scopeProgress, ...indicatorProps } = props, context = useProgressContext(INDICATOR_NAME, __scopeProgress), pct = context.max - (context.value ?? 0), x = -(context.width === 0 ? 300 : context.width) * (pct / 100);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    ProgressIndicatorFrame,
    {
      "data-state": getProgressState(context.value, context.max),
      "data-value": context.value ?? void 0,
      "data-max": context.max,
      x,
      width: context.width,
      ...!props.unstyled && {
        animateOnly: ["transform"],
        opacity: context.width === 0 ? 0 : 1
      },
      ...indicatorProps,
      ref: forwardedRef
    }
  );
});
function defaultGetValueLabel(value, max) {
  return `${Math.round(value / max * 100)}%`;
}
function getProgressState(value, maxValue) {
  return value == null ? "indeterminate" : value === maxValue ? "complete" : "loading";
}
function isNumber(value) {
  return typeof value == "number";
}
function isValidMaxNumber(max) {
  return isNumber(max) && !isNaN(max) && max > 0;
}
function isValidValueNumber(value, max) {
  return isNumber(value) && !isNaN(value) && value <= max && value >= 0;
}
const DEFAULT_MAX = 100, ProgressFrame = (0, import_core.styled)(import_stacks.ThemeableStack, {
  name: "Progress",
  variants: {
    unstyled: {
      false: {
        borderRadius: 1e5,
        overflow: "hidden",
        backgrounded: !0
      }
    },
    size: {
      "...size": (val) => {
        const size = Math.round((0, import_core.getVariableValue)((0, import_get_token.getSize)(val)) * 0.25);
        return {
          height: size,
          minWidth: (0, import_core.getVariableValue)(size) * 20,
          width: "100%"
        };
      }
    }
  },
  defaultVariants: {
    unstyled: !1
  }
}), Progress = (0, import_core.withStaticProperties)(
  ProgressFrame.styleable(function(props, forwardedRef) {
    const {
      __scopeProgress,
      value: valueProp,
      max: maxProp,
      getValueLabel = defaultGetValueLabel,
      size = "$true",
      ...progressProps
    } = props, max = isValidMaxNumber(maxProp) ? maxProp : DEFAULT_MAX, value = isValidValueNumber(valueProp, max) ? valueProp : null, valueLabel = isNumber(value) ? getValueLabel(value, max) : void 0, [width, setWidth] = React.useState(0);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ProgressProvider, { scope: __scopeProgress, value, max, width, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      ProgressFrame,
      {
        "aria-valuemax": max,
        "aria-valuemin": 0,
        "aria-valuenow": isNumber(value) ? value : void 0,
        "aria-valuetext": valueLabel,
        role: "progressbar",
        "data-state": getProgressState(value, max),
        "data-value": value ?? void 0,
        "data-max": max,
        ...progressProps.unstyled !== !0 && {
          size
        },
        ...progressProps,
        onLayout: (e) => {
          var _a;
          setWidth(e.nativeEvent.layout.width), (_a = progressProps.onLayout) == null || _a.call(progressProps, e);
        },
        ref: forwardedRef
      }
    ) });
  }),
  {
    Indicator: ProgressIndicator
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Progress,
  ProgressFrame,
  ProgressIndicator,
  ProgressIndicatorFrame,
  createProgressScope
});
//# sourceMappingURL=Progress.js.map
