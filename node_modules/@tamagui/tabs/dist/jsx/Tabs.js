import { getButtonSized } from "@tamagui/get-button-sized";
import { Group, useGroupItem } from "@tamagui/group";
import { RovingFocusGroup } from "@tamagui/roving-focus";
import { SizableStack, ThemeableStack } from "@tamagui/stacks";
import { useControllableState } from "@tamagui/use-controllable-state";
import { useDirection } from "@tamagui/use-direction";
import {
  Theme,
  composeEventHandlers,
  composeRefs,
  createStyledContext,
  isWeb,
  styled,
  useEvent,
  withStaticProperties
} from "@tamagui/web";
import * as React from "react";
const TABS_CONTEXT = "TabsContext", TAB_LIST_NAME = "TabsList", TabsListFrame = styled(Group, {
  name: TAB_LIST_NAME,
  focusable: !0
}), TabsList = TabsListFrame.extractable(
  React.forwardRef(
    (props, forwardedRef) => {
      const { __scopeTabs, loop = !0, children, ...listProps } = props, context = useTabsContext(__scopeTabs);
      return <RovingFocusGroup
        __scopeRovingFocusGroup={__scopeTabs || TABS_CONTEXT}
        asChild="except-style"
        orientation={context.orientation}
        dir={context.dir}
        loop={loop}
      ><TabsListFrame
        role="tablist"
        aria-orientation={context.orientation}
        ref={forwardedRef}
        orientation={context.orientation}
        {...listProps}
      >{children}</TabsListFrame></RovingFocusGroup>;
    }
  )
);
TabsList.displayName = TAB_LIST_NAME;
const TRIGGER_NAME = "TabsTrigger", TabsTriggerFrame = styled(ThemeableStack, {
  name: TRIGGER_NAME,
  justifyContent: "center",
  alignItems: "center",
  flexWrap: "nowrap",
  flexDirection: "row",
  cursor: "pointer",
  focusable: !0,
  userSelect: "none",
  variants: {
    size: {
      "...size": getButtonSized
    },
    disabled: {
      true: {
        pointerEvents: "none"
      }
    },
    unstyled: {
      false: {
        backgroundColor: "$background",
        pressStyle: {
          backgroundColor: "$backgroundPress"
        },
        hoverStyle: {
          backgroundColor: "$backgroundHover"
        },
        focusStyle: {
          backgroundColor: "$backgroundFocus"
        }
      }
    }
  },
  defaultVariants: {
    unstyled: !1
  }
}), TabsTrigger = TabsTriggerFrame.extractable(
  React.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopeTabs,
        value,
        disabled = !1,
        onInteraction,
        ...triggerProps
      } = props, context = useTabsContext(__scopeTabs), triggerId = makeTriggerId(context.baseId, value), contentId = makeContentId(context.baseId, value), isSelected = value === context.value, [layout, setLayout] = React.useState(null), triggerRef = React.useRef(null), groupItemProps = useGroupItem({ disabled });
      return React.useEffect(() => (context.registerTrigger(), () => context.unregisterTrigger()), []), React.useEffect(() => {
        if (!triggerRef.current || !isWeb)
          return;
        function getTriggerSize() {
          triggerRef.current && setLayout({
            width: triggerRef.current.offsetWidth,
            height: triggerRef.current.offsetHeight,
            x: triggerRef.current.offsetLeft,
            y: triggerRef.current.offsetTop
          });
        }
        getTriggerSize();
        const observer = new ResizeObserver(getTriggerSize);
        return observer.observe(triggerRef.current), () => {
          triggerRef.current && observer.unobserve(triggerRef.current);
        };
      }, [context.triggersCount]), React.useEffect(() => {
        isSelected && layout && onInteraction?.("select", layout);
      }, [isSelected, value, layout]), <Theme name={isSelected ? "active" : null}><RovingFocusGroup.Item
        __scopeRovingFocusGroup={__scopeTabs || TABS_CONTEXT}
        asChild="except-style"
        focusable={!disabled}
        active={isSelected}
      ><TabsTriggerFrame
        onLayout={(event) => {
          isWeb || setLayout(event.nativeEvent.layout);
        }}
        onHoverIn={composeEventHandlers(props.onHoverIn, () => {
          layout && onInteraction?.("hover", layout);
        })}
        onHoverOut={composeEventHandlers(props.onHoverOut, () => {
          onInteraction?.("hover", null);
        })}
        role="tab"
        aria-selected={isSelected}
        aria-controls={contentId}
        data-state={isSelected ? "active" : "inactive"}
        data-disabled={disabled ? "" : void 0}
        disabled={disabled}
        id={triggerId}
        size={context.size}
        {...groupItemProps}
        {...triggerProps}
        ref={composeRefs(forwardedRef, triggerRef)}
        onPress={composeEventHandlers(props.onPress ?? void 0, (event) => {
          const webChecks = !isWeb || event.button === 0 && event.ctrlKey === !1;
          !disabled && !isSelected && webChecks ? context.onChange(value) : event.preventDefault();
        })}
        {...isWeb && {
          type: "button",
          onKeyDown: composeEventHandlers(
            props.onKeyDown,
            (event) => {
              [" ", "Enter"].includes(event.key) && (context.onChange(value), event.preventDefault());
            }
          ),
          onFocus: composeEventHandlers(props.onFocus, (event) => {
            layout && onInteraction?.("focus", layout);
            const isAutomaticActivation = context.activationMode !== "manual";
            !isSelected && !disabled && isAutomaticActivation && context.onChange(value);
          }),
          onBlur: composeEventHandlers(props.onFocus, () => {
            onInteraction?.("focus", null);
          })
        }}
      /></RovingFocusGroup.Item></Theme>;
    }
  )
);
TabsTrigger.displayName = TRIGGER_NAME;
const CONTENT_NAME = "TabsContent", TabsContentFrame = styled(ThemeableStack, {
  name: CONTENT_NAME
}), TabsContent = TabsContentFrame.styleable(
  function(props, forwardedRef) {
    const { __scopeTabs, value, forceMount, children, ...contentProps } = props, context = useTabsContext(__scopeTabs), isSelected = value === context.value, show = forceMount || isSelected, triggerId = makeTriggerId(context.baseId, value), contentId = makeContentId(context.baseId, value);
    return show ? <TabsContentFrame
      key={value}
      data-state={isSelected ? "active" : "inactive"}
      data-orientation={context.orientation}
      role="tabpanel"
      aria-labelledby={triggerId}
      hidden={!show}
      id={contentId}
      tabIndex={0}
      {...contentProps}
      ref={forwardedRef}
    >{children}</TabsContentFrame> : null;
  }
), TABS_NAME = "Tabs", { Provider: TabsProvider, useStyledContext: useTabsContext } = createStyledContext(), TabsFrame = styled(SizableStack, {
  name: TABS_NAME
}), Tabs = withStaticProperties(
  TabsFrame.extractable(
    React.forwardRef(
      (props, forwardedRef) => {
        const {
          __scopeTabs,
          value: valueProp,
          onValueChange,
          defaultValue,
          orientation = "horizontal",
          dir,
          activationMode = "automatic",
          size = "$true",
          ...tabsProps
        } = props, direction = useDirection(dir), [value, setValue] = useControllableState({
          prop: valueProp,
          onChange: onValueChange,
          defaultProp: defaultValue ?? ""
        }), [triggersCount, setTriggersCount] = React.useState(0), registerTrigger = useEvent(() => setTriggersCount((v) => v + 1)), unregisterTrigger = useEvent(() => setTriggersCount((v) => v - 1));
        return <TabsProvider
          scope={__scopeTabs}
          baseId={React.useId()}
          value={value}
          onChange={setValue}
          orientation={orientation}
          dir={direction}
          activationMode={activationMode}
          size={size}
          registerTrigger={registerTrigger}
          triggersCount={triggersCount}
          unregisterTrigger={unregisterTrigger}
        ><TabsFrame
          direction={direction}
          data-orientation={orientation}
          {...tabsProps}
          ref={forwardedRef}
        /></TabsProvider>;
      }
    )
  ),
  {
    List: TabsList,
    /**
     * @deprecated Use Tabs.Tab instead
     */
    Trigger: TabsTrigger,
    Tab: TabsTrigger,
    Content: TabsContent
  }
);
Tabs.displayName = TABS_NAME;
function makeTriggerId(baseId, value) {
  return `${baseId}-trigger-${value}`;
}
function makeContentId(baseId, value) {
  return `${baseId}-content-${value}`;
}
export {
  Tabs
};
//# sourceMappingURL=Tabs.js.map
