var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var mutateTheme_exports = {};
__export(mutateTheme_exports, {
  _mutateTheme: () => _mutateTheme,
  mutateThemes: () => mutateThemes
});
module.exports = __toCommonJS(mutateTheme_exports);
var import_constants = require("@tamagui/constants"), import_web = require("@tamagui/web"), import_react = require("react");
function mutateThemes({
  themes,
  batch,
  insertCSS = !0,
  ...props
}) {
  const allThemesProxied = {}, allThemesRaw = {};
  for (const { name, theme } of themes) {
    const res = _mutateTheme({
      ...props,
      name,
      theme,
      // we'll do one update at the end
      avoidUpdate: !0,
      // always add which also replaces but doesnt fail first time
      mutationType: "add"
    });
    res && (allThemesProxied[name] = res.theme, allThemesRaw[name] = res.themeRaw);
  }
  const cssRules = insertCSS ? insertThemeCSS(allThemesRaw, batch) : [];
  return (0, import_react.startTransition)(() => {
    for (const themeName in allThemesProxied) {
      const theme = allThemesProxied[themeName];
      updateThemeConfig(themeName, theme), notifyThemeManagersOfUpdate(themeName, theme);
    }
  }), {
    themes: allThemesProxied,
    themesRaw: allThemesRaw,
    cssRules
  };
}
function _mutateTheme(props) {
  if (import_constants.isServer) {
    process.env.NODE_ENV === "development" && console.warn("Theme mutation is not supported on server side");
    return;
  }
  const config = (0, import_web.getConfig)(), { name: themeName, theme: themeIn, insertCSS, mutationType } = props;
  if (process.env.NODE_ENV === "development") {
    if (!config)
      throw new Error("No config");
    const theme2 = config.themes[props.name];
    if (mutationType !== "add" && !theme2)
      throw new Error(
        `${mutationType === "replace" ? "Replace" : "Update"} theme failed! Theme ${props.name} does not exist`
      );
  }
  const theme = {
    ...mutationType === "update" ? config.themes[themeName] ?? {} : {},
    ...themeIn
  };
  for (const key in theme)
    (0, import_web.ensureThemeVariable)(theme, key);
  const themeProxied = (0, import_web.proxyThemeToParents)(themeName, theme), response = {
    themeRaw: theme,
    theme: themeProxied,
    cssRules: []
  };
  return props.avoidUpdate || (insertCSS && (response.cssRules = insertThemeCSS({
    [themeName]: theme
  })), updateThemeConfig(themeName, themeProxied), notifyThemeManagersOfUpdate(themeName, themeProxied)), response;
}
function updateThemeConfig(themeName, theme) {
  const config = (0, import_web.getConfig)();
  config.themes[themeName] = theme, (0, import_web.updateConfig)("themes", config.themes);
}
function notifyThemeManagersOfUpdate(themeName, theme) {
  import_web.activeThemeManagers.forEach((manager) => {
    manager.state.name === themeName && manager.updateStateFromProps(
      {
        name: themeName,
        forceTheme: theme
      },
      !0
    );
  });
}
function insertThemeCSS(themes, batch = !1) {
  const config = (0, import_web.getConfig)();
  let cssRules = [];
  for (const themeName in themes) {
    const theme = themes[themeName], rules = (0, import_web.getThemeCSSRules)({
      config,
      themeName,
      names: [themeName],
      theme
    });
    cssRules = [...cssRules, ...rules], batch || updateStyle(`t_theme_style_${themeName}`, rules);
  }
  if (batch) {
    const id = (0, import_web.simpleHash)(typeof batch == "string" ? batch : Object.keys(themes).join(""));
    updateStyle(`t_theme_style_${id}`, cssRules);
  }
  return cssRules;
}
function updateStyle(id, rules) {
  var _a;
  const existing = document.querySelector(`#${id}`), style = document.createElement("style");
  style.id = id, style.appendChild(document.createTextNode(rules.join(`
`))), document.head.appendChild(style), existing && ((_a = existing.parentElement) == null || _a.removeChild(existing));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  _mutateTheme,
  mutateThemes
});
//# sourceMappingURL=_mutateTheme.js.map
