var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var useElementLayout_exports = {};
__export(useElementLayout_exports, {
  measureLayout: () => measureLayout,
  useElementLayout: () => useElementLayout
});
module.exports = __toCommonJS(useElementLayout_exports);
var import_constants = require("@tamagui/constants"), import_getBoundingClientRect = require("../helpers/getBoundingClientRect"), import_getRect = require("../helpers/getRect");
const LayoutHandlers = /* @__PURE__ */ new WeakMap();
let resizeObserver = null;
typeof window < "u" && "ResizeObserver" in window && (resizeObserver = new ResizeObserver((entries) => {
  for (const { target } of entries) {
    const onLayout = LayoutHandlers.get(target);
    if (typeof onLayout != "function")
      return;
    measureLayout(target, null, (x, y, width, height, left, top) => {
      onLayout({
        nativeEvent: {
          layout: { x, y, width, height, left, top },
          target
        },
        timeStamp: Date.now()
      });
    });
  }
}));
const measureLayout = (node, relativeTo, callback) => {
  const relativeNode = relativeTo || (node == null ? void 0 : node.parentNode);
  relativeNode instanceof HTMLElement && setTimeout(() => {
    const relativeRect = (0, import_getBoundingClientRect.getBoundingClientRect)(relativeNode), { height, left, top, width } = (0, import_getRect.getRect)(node), x = left - relativeRect.left, y = top - relativeRect.top;
    callback(x, y, width, height, left, top);
  }, 0);
};
function useElementLayout(ref, onLayout) {
  (0, import_constants.useIsomorphicLayoutEffect)(() => {
    if (!resizeObserver || !onLayout)
      return;
    const node = ref.current;
    if (node)
      return LayoutHandlers.set(node, onLayout), resizeObserver.observe(node), () => {
        resizeObserver == null || resizeObserver.unobserve(node);
      };
  }, [ref, onLayout]);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  measureLayout,
  useElementLayout
});
//# sourceMappingURL=useElementLayout.js.map
