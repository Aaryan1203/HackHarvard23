"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
}, __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default")), __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);

// ../react-native-use-responder-events/dist/cjs/utils.native.js
var require_utils_native = __commonJS({
  "../react-native-use-responder-events/dist/cjs/utils.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), utils_exports = {};
    __export2(utils_exports, {
      canUseDOM: () => canUseDOM,
      getBoundingClientRect: () => getBoundingClientRect2,
      getLowestCommonAncestor: () => getLowestCommonAncestor,
      getResponderPaths: () => getResponderPaths,
      hasTargetTouches: () => hasTargetTouches,
      hasValidSelection: () => hasValidSelection,
      isPrimaryPointerDown: () => isPrimaryPointerDown,
      isSelectionValid: () => isSelectionValid,
      setResponderId: () => setResponderId
    });
    module2.exports = __toCommonJS2(utils_exports);
    var keyName = "__reactResponderId", canUseDOM = !!(typeof window < "u" && window.document && window.document.createElement), getBoundingClientRect2 = (node) => {
      if (node && node.nodeType === 1 && node.getBoundingClientRect)
        return node.getBoundingClientRect();
    };
    function getEventPath(domEvent) {
      var _a;
      if (domEvent.type === "selectionchange") {
        let target = (_a = window.getSelection()) == null ? void 0 : _a.anchorNode;
        return composedPathFallback(target);
      } else
        return domEvent.composedPath != null ? domEvent.composedPath() : composedPathFallback(domEvent.target);
    }
    function composedPathFallback(target) {
      let path = [];
      for (; target != null && target !== document.body; )
        path.push(target), target = target.parentNode;
      return path;
    }
    function getResponderId(node) {
      return node != null ? node[keyName] : null;
    }
    function setResponderId(node, id) {
      node != null && (node[keyName] = id);
    }
    function getResponderPaths(domEvent) {
      let idPath = [], nodePath = [], eventPath = getEventPath(domEvent);
      for (let i = 0; i < eventPath.length; i++) {
        let node = eventPath[i], id = getResponderId(node);
        id != null && (idPath.push(id), nodePath.push(node));
      }
      return { idPath, nodePath };
    }
    function getLowestCommonAncestor(pathA, pathB) {
      let pathALength = pathA.length, pathBLength = pathB.length;
      if (
        // If either path is empty
        pathALength === 0 || pathBLength === 0 || // If the last elements aren't the same there can't be a common ancestor
        // that is connected to the responder system
        pathA[pathALength - 1] !== pathB[pathBLength - 1]
      )
        return null;
      let itemA = pathA[0], indexA = 0, itemB = pathB[0], indexB = 0;
      pathALength - pathBLength > 0 && (indexA = pathALength - pathBLength, itemA = pathA[indexA], pathALength = pathBLength), pathBLength - pathALength > 0 && (indexB = pathBLength - pathALength, itemB = pathB[indexB], pathBLength = pathALength);
      let depth = pathALength;
      for (; depth--; ) {
        if (itemA === itemB)
          return itemA;
        itemA = pathA[indexA++], itemB = pathB[indexB++];
      }
      return null;
    }
    function hasTargetTouches(target, touches) {
      if (!touches || touches.length === 0)
        return !1;
      for (let i = 0; i < touches.length; i++) {
        let node = touches[i].target;
        if (node != null && target.contains(node))
          return !0;
      }
      return !1;
    }
    function hasValidSelection(domEvent) {
      return domEvent.type === "selectionchange" ? isSelectionValid() : domEvent.type === "select";
    }
    function isPrimaryPointerDown(domEvent) {
      let { altKey, button, buttons, ctrlKey, type } = domEvent, isTouch = type === "touchstart" || type === "touchmove", isPrimaryMouseDown = type === "mousedown" && (button === 0 || buttons === 1), isPrimaryMouseMove = type === "mousemove" && buttons === 1, noModifiers = altKey === !1 && ctrlKey === !1;
      return !!(isTouch || isPrimaryMouseDown && noModifiers || isPrimaryMouseMove && noModifiers);
    }
    function isSelectionValid() {
      let selection = window.getSelection();
      if (!selection)
        return !1;
      let string = selection.toString(), anchorNode = selection.anchorNode, focusNode = selection.focusNode, isTextNode = anchorNode && anchorNode.nodeType === window.Node.TEXT_NODE || focusNode && focusNode.nodeType === window.Node.TEXT_NODE;
      return string.length >= 1 && string !== `
` && !!isTextNode;
    }
  }
});

// ../react-native-use-responder-events/dist/cjs/createResponderEvent.native.js
var require_createResponderEvent_native = __commonJS({
  "../react-native-use-responder-events/dist/cjs/createResponderEvent.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), createResponderEvent_exports = {};
    __export2(createResponderEvent_exports, {
      default: () => createResponderEvent
    });
    module2.exports = __toCommonJS2(createResponderEvent_exports);
    var import_utils = require_utils_native(), emptyFunction = () => {
    }, emptyObject = {}, emptyArray = [];
    function normalizeIdentifier(identifier) {
      return identifier > 20 ? identifier % 20 : identifier;
    }
    function createResponderEvent(domEvent, responderTouchHistoryStore) {
      let rect, propagationWasStopped = !1, changedTouches, touches, domEventChangedTouches = domEvent.changedTouches, domEventType = domEvent.type, metaKey = domEvent.metaKey === !0, shiftKey = domEvent.shiftKey === !0, force = (domEventChangedTouches == null ? void 0 : domEventChangedTouches[0].force) || 0, identifier = normalizeIdentifier((domEventChangedTouches == null ? void 0 : domEventChangedTouches[0].identifier) || 0), clientX = (domEventChangedTouches == null ? void 0 : domEventChangedTouches[0].clientX) || domEvent.clientX, clientY = (domEventChangedTouches == null ? void 0 : domEventChangedTouches[0].clientY) || domEvent.clientY, pageX = (domEventChangedTouches == null ? void 0 : domEventChangedTouches[0].pageX) || domEvent.pageX, pageY = (domEventChangedTouches == null ? void 0 : domEventChangedTouches[0].pageY) || domEvent.pageY, preventDefault = typeof domEvent.preventDefault == "function" ? domEvent.preventDefault.bind(domEvent) : emptyFunction, timestamp = domEvent.timeStamp;
      function normalizeTouches(touches2) {
        return Array.prototype.slice.call(touches2).map((touch) => ({
          force: touch.force,
          identifier: normalizeIdentifier(touch.identifier),
          get locationX() {
            return locationX(touch.clientX);
          },
          get locationY() {
            return locationY(touch.clientY);
          },
          pageX: touch.pageX,
          pageY: touch.pageY,
          target: touch.target,
          timestamp
        }));
      }
      if (domEventChangedTouches != null)
        changedTouches = normalizeTouches(domEventChangedTouches), touches = normalizeTouches(domEvent.touches);
      else {
        let emulatedTouches = [
          {
            force,
            identifier,
            get locationX() {
              return locationX(clientX);
            },
            get locationY() {
              return locationY(clientY);
            },
            pageX,
            pageY,
            target: domEvent.target,
            timestamp
          }
        ];
        changedTouches = emulatedTouches, touches = domEventType === "mouseup" || domEventType === "dragstart" ? emptyArray : emulatedTouches;
      }
      let responderEvent = {
        bubbles: !0,
        cancelable: !0,
        // `currentTarget` is set before dispatch
        currentTarget: null,
        defaultPrevented: domEvent.defaultPrevented,
        dispatchConfig: emptyObject,
        eventPhase: domEvent.eventPhase,
        isDefaultPrevented() {
          return domEvent.defaultPrevented;
        },
        isPropagationStopped() {
          return propagationWasStopped;
        },
        isTrusted: domEvent.isTrusted,
        nativeEvent: {
          altKey: !1,
          ctrlKey: !1,
          metaKey,
          shiftKey,
          changedTouches,
          force,
          identifier,
          get locationX() {
            return locationX(clientX);
          },
          get locationY() {
            return locationY(clientY);
          },
          pageX,
          pageY,
          target: domEvent.target,
          timestamp,
          touches,
          type: domEventType
        },
        persist: emptyFunction,
        preventDefault,
        stopPropagation() {
          propagationWasStopped = !0;
        },
        target: domEvent.target,
        timeStamp: timestamp,
        touchHistory: responderTouchHistoryStore.touchHistory
      };
      function locationX(x) {
        if (rect = rect || (0, import_utils.getBoundingClientRect)(responderEvent.currentTarget), rect)
          return x - rect.left;
      }
      function locationY(y) {
        if (rect = rect || (0, import_utils.getBoundingClientRect)(responderEvent.currentTarget), rect)
          return y - rect.top;
      }
      return responderEvent;
    }
  }
});

// ../react-native-use-responder-events/dist/cjs/types.native.js
var require_types_native = __commonJS({
  "../react-native-use-responder-events/dist/cjs/types.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), types_exports = {};
    __export2(types_exports, {
      BLUR: () => BLUR,
      CONTEXT_MENU: () => CONTEXT_MENU,
      FOCUS_OUT: () => FOCUS_OUT,
      MOUSE_CANCEL: () => MOUSE_CANCEL,
      MOUSE_DOWN: () => MOUSE_DOWN,
      MOUSE_MOVE: () => MOUSE_MOVE,
      MOUSE_UP: () => MOUSE_UP,
      SCROLL: () => SCROLL,
      SELECT: () => SELECT,
      SELECTION_CHANGE: () => SELECTION_CHANGE,
      TOUCH_CANCEL: () => TOUCH_CANCEL,
      TOUCH_END: () => TOUCH_END,
      TOUCH_MOVE: () => TOUCH_MOVE,
      TOUCH_START: () => TOUCH_START,
      isCancelish: () => isCancelish,
      isEndish: () => isEndish,
      isMoveish: () => isMoveish,
      isScroll: () => isScroll,
      isSelectionChange: () => isSelectionChange,
      isStartish: () => isStartish
    });
    module2.exports = __toCommonJS2(types_exports);
    var BLUR = "blur", CONTEXT_MENU = "contextmenu", FOCUS_OUT = "focusout", MOUSE_DOWN = "mousedown", MOUSE_MOVE = "mousemove", MOUSE_UP = "mouseup", MOUSE_CANCEL = "dragstart", TOUCH_START = "touchstart", TOUCH_MOVE = "touchmove", TOUCH_END = "touchend", TOUCH_CANCEL = "touchcancel", SCROLL = "scroll", SELECT = "select", SELECTION_CHANGE = "selectionchange";
    function isStartish(eventType) {
      return eventType === TOUCH_START || eventType === MOUSE_DOWN;
    }
    function isMoveish(eventType) {
      return eventType === TOUCH_MOVE || eventType === MOUSE_MOVE;
    }
    function isEndish(eventType) {
      return eventType === TOUCH_END || eventType === MOUSE_UP || isCancelish(eventType);
    }
    function isCancelish(eventType) {
      return eventType === TOUCH_CANCEL || eventType === MOUSE_CANCEL;
    }
    function isScroll(eventType) {
      return eventType === SCROLL;
    }
    function isSelectionChange(eventType) {
      return eventType === SELECT || eventType === SELECTION_CHANGE;
    }
  }
});

// ../react-native-use-responder-events/dist/cjs/ResponderTouchHistoryStore.native.js
var require_ResponderTouchHistoryStore_native = __commonJS({
  "../react-native-use-responder-events/dist/cjs/ResponderTouchHistoryStore.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), ResponderTouchHistoryStore_exports = {};
    __export2(ResponderTouchHistoryStore_exports, {
      ResponderTouchHistoryStore: () => ResponderTouchHistoryStore
    });
    module2.exports = __toCommonJS2(ResponderTouchHistoryStore_exports);
    var import_types = require_types_native(), MAX_TOUCH_BANK = 20;
    function timestampForTouch(touch) {
      return touch.timeStamp || touch.timestamp;
    }
    function createTouchRecord(touch) {
      return {
        touchActive: !0,
        startPageX: touch.pageX,
        startPageY: touch.pageY,
        startTimeStamp: timestampForTouch(touch),
        currentPageX: touch.pageX,
        currentPageY: touch.pageY,
        currentTimeStamp: timestampForTouch(touch),
        previousPageX: touch.pageX,
        previousPageY: touch.pageY,
        previousTimeStamp: timestampForTouch(touch)
      };
    }
    function resetTouchRecord(touchRecord, touch) {
      touchRecord.touchActive = !0, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch);
    }
    function getTouchIdentifier({ identifier }) {
      return identifier == null && console.error("Touch object is missing identifier."), identifier;
    }
    function recordTouchStart(touch, touchHistory) {
      let identifier = getTouchIdentifier(touch), touchRecord = touchHistory.touchBank[identifier];
      touchRecord ? resetTouchRecord(touchRecord, touch) : touchHistory.touchBank[identifier] = createTouchRecord(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
    }
    function recordTouchMove(touch, touchHistory) {
      let touchRecord = touchHistory.touchBank[getTouchIdentifier(touch)];
      touchRecord ? (touchRecord.touchActive = !0, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.warn(
        `Cannot record touch move without a touch start.
`,
        `Touch Move: ${printTouch(touch)}
`,
        `Touch Bank: ${printTouchBank(touchHistory)}`
      );
    }
    function recordTouchEnd(touch, touchHistory) {
      let touchRecord = touchHistory.touchBank[getTouchIdentifier(touch)];
      touchRecord ? (touchRecord.touchActive = !1, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.warn(
        `Cannot record touch end without a touch start.
`,
        `Touch End: ${printTouch(touch)}
`,
        `Touch Bank: ${printTouchBank(touchHistory)}`
      );
    }
    function printTouch(touch) {
      return JSON.stringify({
        identifier: touch.identifier,
        pageX: touch.pageX,
        pageY: touch.pageY,
        timestamp: timestampForTouch(touch)
      });
    }
    function printTouchBank(touchHistory) {
      let { touchBank } = touchHistory, printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));
      return touchBank.length > MAX_TOUCH_BANK && (printed += ` (original size: ${touchBank.length})`), printed;
    }
    var ResponderTouchHistoryStore = class {
      constructor() {
        this._touchHistory = {
          touchBank: [],
          //Array<TouchRecord>
          numberActiveTouches: 0,
          // If there is only one active touch, we remember its location. This prevents
          // us having to loop through all of the touches all the time in the most
          // common case.
          indexOfSingleActiveTouch: -1,
          mostRecentTimeStamp: 0
        };
      }
      recordTouchTrack(topLevelType, nativeEvent) {
        let touchHistory = this._touchHistory;
        if ((0, import_types.isMoveish)(topLevelType))
          nativeEvent.changedTouches.forEach((touch) => recordTouchMove(touch, touchHistory));
        else if ((0, import_types.isStartish)(topLevelType))
          nativeEvent.changedTouches.forEach((touch) => recordTouchStart(touch, touchHistory)), touchHistory.numberActiveTouches = nativeEvent.touches.length, touchHistory.numberActiveTouches === 1 && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);
        else if ((0, import_types.isEndish)(topLevelType) && (nativeEvent.changedTouches.forEach((touch) => recordTouchEnd(touch, touchHistory)), touchHistory.numberActiveTouches = nativeEvent.touches.length, touchHistory.numberActiveTouches === 1)) {
          let { touchBank } = touchHistory;
          for (let i = 0; i < touchBank.length; i++) {
            let touchTrackToCheck = touchBank[i];
            if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {
              touchHistory.indexOfSingleActiveTouch = i;
              break;
            }
          }
        }
      }
      get touchHistory() {
        return this._touchHistory;
      }
    };
  }
});

// ../react-native-use-responder-events/dist/cjs/ResponderSystem.native.js
var require_ResponderSystem_native = __commonJS({
  "../react-native-use-responder-events/dist/cjs/ResponderSystem.native.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create, __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __getProtoOf2 = Object.getPrototypeOf, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: !0 }) : target,
      mod
    )), __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), ResponderSystem_exports = {};
    __export2(ResponderSystem_exports, {
      addNode: () => addNode,
      attachListeners: () => attachListeners,
      getResponderNode: () => getResponderNode,
      removeNode: () => removeNode,
      terminateResponder: () => terminateResponder
    });
    module2.exports = __toCommonJS2(ResponderSystem_exports);
    var import_createResponderEvent = __toESM2(require_createResponderEvent_native()), import_ResponderTouchHistoryStore = require_ResponderTouchHistoryStore_native(), import_types = require_types_native(), import_utils = require_utils_native(), import_utils2 = require_utils_native(), emptyObject = {}, startRegistration = [
      "onStartShouldSetResponderCapture",
      "onStartShouldSetResponder",
      { bubbles: !0 }
    ], moveRegistration = [
      "onMoveShouldSetResponderCapture",
      "onMoveShouldSetResponder",
      { bubbles: !0 }
    ], scrollRegistration = [
      "onScrollShouldSetResponderCapture",
      "onScrollShouldSetResponder",
      { bubbles: !1 }
    ], shouldSetResponderEvents = {
      touchstart: startRegistration,
      mousedown: startRegistration,
      touchmove: moveRegistration,
      mousemove: moveRegistration,
      scroll: scrollRegistration
    }, emptyResponder = { id: null, idPath: null, node: null }, responderListenersMap = /* @__PURE__ */ new Map(), isEmulatingMouseEvents = !1, trackedTouchCount = 0, currentResponder = {
      id: null,
      node: null,
      idPath: null
    }, responderTouchHistoryStore = new import_ResponderTouchHistoryStore.ResponderTouchHistoryStore();
    function changeCurrentResponder(responder) {
      currentResponder = responder;
    }
    function getResponderConfig(id) {
      return responderListenersMap.get(id) ?? emptyObject;
    }
    function eventListener(domEvent) {
      let eventType = domEvent.type, eventTarget = domEvent.target;
      if (eventType === "touchstart" && (isEmulatingMouseEvents = !0), (eventType === "touchmove" || trackedTouchCount > 1) && (isEmulatingMouseEvents = !1), // Ignore browser emulated mouse events
      eventType === "mousedown" && isEmulatingMouseEvents || eventType === "mousemove" && isEmulatingMouseEvents || // Ignore mousemove if a mousedown didn't occur first
      eventType === "mousemove" && trackedTouchCount < 1)
        return;
      if (isEmulatingMouseEvents && eventType === "mouseup") {
        trackedTouchCount === 0 && (isEmulatingMouseEvents = !1);
        return;
      }
      let isStartEvent = (0, import_types.isStartish)(eventType) && (0, import_utils2.isPrimaryPointerDown)(domEvent), isMoveEvent = (0, import_types.isMoveish)(eventType), isEndEvent = (0, import_types.isEndish)(eventType), isScrollEvent = (0, import_types.isScroll)(eventType), isSelectionChangeEvent = (0, import_types.isSelectionChange)(eventType), responderEvent = (0, import_createResponderEvent.default)(domEvent, responderTouchHistoryStore);
      (isStartEvent || isMoveEvent || isEndEvent) && (domEvent.touches ? trackedTouchCount = domEvent.touches.length : isStartEvent ? trackedTouchCount = 1 : isEndEvent && (trackedTouchCount = 0), responderTouchHistoryStore.recordTouchTrack(
        eventType,
        responderEvent.nativeEvent
      ));
      let eventPaths = (0, import_utils2.getResponderPaths)(domEvent), wasNegotiated = !1, wantsResponder;
      if (isStartEvent || isMoveEvent || isScrollEvent && trackedTouchCount > 0) {
        let currentResponderIdPath = currentResponder.idPath, eventIdPath = eventPaths.idPath;
        if (currentResponderIdPath != null && eventIdPath != null) {
          let lowestCommonAncestor = (0, import_utils2.getLowestCommonAncestor)(
            currentResponderIdPath,
            eventIdPath
          );
          if (lowestCommonAncestor != null) {
            let index = eventIdPath.indexOf(lowestCommonAncestor) + (lowestCommonAncestor === currentResponder.id ? 1 : 0);
            eventPaths = {
              idPath: eventIdPath.slice(index),
              nodePath: eventPaths.nodePath.slice(index)
            };
          } else
            eventPaths = null;
        }
        eventPaths != null && (wantsResponder = findWantsResponder(eventPaths, domEvent, responderEvent), wantsResponder != null && (attemptTransfer(responderEvent, wantsResponder), wasNegotiated = !0));
      }
      if (currentResponder.id != null && currentResponder.node != null) {
        let { id, node } = currentResponder, {
          onResponderStart,
          onResponderMove,
          onResponderEnd,
          onResponderRelease,
          onResponderTerminate,
          onResponderTerminationRequest
        } = getResponderConfig(id);
        if (responderEvent.bubbles = !1, responderEvent.cancelable = !1, responderEvent.currentTarget = node, isStartEvent)
          onResponderStart != null && (responderEvent.dispatchConfig.registrationName = "onResponderStart", onResponderStart(responderEvent));
        else if (isMoveEvent)
          onResponderMove != null && (responderEvent.dispatchConfig.registrationName = "onResponderMove", onResponderMove(responderEvent));
        else {
          let isTerminateEvent = (0, import_types.isCancelish)(eventType) || // native context menu
          eventType === "contextmenu" || // window blur
          eventType === "blur" && eventTarget === window || // responder (or ancestors) blur
          eventType === "blur" && eventTarget.contains(node) && domEvent.relatedTarget !== node || // native scroll without using a pointer
          isScrollEvent && trackedTouchCount === 0 || // native scroll on node that is parent of the responder (allow siblings to scroll)
          isScrollEvent && eventTarget.contains(node) && eventTarget !== node || // native select/selectionchange on node
          isSelectionChangeEvent && (0, import_utils2.hasValidSelection)(domEvent), isReleaseEvent = isEndEvent && !isTerminateEvent && !(0, import_utils2.hasTargetTouches)(node, domEvent.touches);
          if (isEndEvent && onResponderEnd != null && (responderEvent.dispatchConfig.registrationName = "onResponderEnd", onResponderEnd(responderEvent)), isReleaseEvent && (onResponderRelease != null && (responderEvent.dispatchConfig.registrationName = "onResponderRelease", onResponderRelease(responderEvent)), changeCurrentResponder(emptyResponder)), isTerminateEvent) {
            let shouldTerminate = !0;
            (eventType === "contextmenu" || eventType === "scroll" || eventType === "selectionchange") && (wasNegotiated ? shouldTerminate = !1 : onResponderTerminationRequest != null && (responderEvent.dispatchConfig.registrationName = "onResponderTerminationRequest", onResponderTerminationRequest(responderEvent) === !1 && (shouldTerminate = !1))), shouldTerminate && (onResponderTerminate != null && (responderEvent.dispatchConfig.registrationName = "onResponderTerminate", onResponderTerminate(responderEvent)), changeCurrentResponder(emptyResponder), isEmulatingMouseEvents = !1, trackedTouchCount = 0);
          }
        }
      }
    }
    function findWantsResponder(eventPaths, domEvent, responderEvent) {
      let shouldSetCallbacks = shouldSetResponderEvents[domEvent.type];
      if (shouldSetCallbacks != null) {
        let { idPath, nodePath } = eventPaths, shouldSetCallbackCaptureName = shouldSetCallbacks[0], shouldSetCallbackBubbleName = shouldSetCallbacks[1], { bubbles } = shouldSetCallbacks[2], check = function(id, node, callbackName) {
          let shouldSetCallback = getResponderConfig(id)[callbackName];
          if (shouldSetCallback != null && (responderEvent.currentTarget = node, shouldSetCallback(responderEvent) === !0)) {
            let prunedIdPath = idPath.slice(idPath.indexOf(id));
            return { id, node, idPath: prunedIdPath };
          }
        };
        for (let i = idPath.length - 1; i >= 0; i--) {
          let id = idPath[i], node = nodePath[i], result = check(id, node, shouldSetCallbackCaptureName);
          if (result != null)
            return result;
          if (responderEvent.isPropagationStopped() === !0)
            return;
        }
        if (bubbles)
          for (let i = 0; i < idPath.length; i++) {
            let id = idPath[i], node = nodePath[i], result = check(id, node, shouldSetCallbackBubbleName);
            if (result != null)
              return result;
            if (responderEvent.isPropagationStopped() === !0)
              return;
          }
        else {
          let id = idPath[0], node = nodePath[0];
          if (domEvent.target === node)
            return check(id, node, shouldSetCallbackBubbleName);
        }
      }
    }
    function attemptTransfer(responderEvent, wantsResponder) {
      let { id: currentId, node: currentNode } = currentResponder, { id, node } = wantsResponder, { onResponderGrant, onResponderReject } = getResponderConfig(id);
      if (responderEvent.bubbles = !1, responderEvent.cancelable = !1, responderEvent.currentTarget = node, currentId == null)
        onResponderGrant != null && (responderEvent.currentTarget = node, responderEvent.dispatchConfig.registrationName = "onResponderGrant", onResponderGrant(responderEvent)), changeCurrentResponder(wantsResponder);
      else {
        let { onResponderTerminate, onResponderTerminationRequest } = getResponderConfig(currentId), allowTransfer = !0;
        onResponderTerminationRequest != null && (responderEvent.currentTarget = currentNode, responderEvent.dispatchConfig.registrationName = "onResponderTerminationRequest", onResponderTerminationRequest(responderEvent) === !1 && (allowTransfer = !1)), allowTransfer ? (onResponderTerminate != null && (responderEvent.currentTarget = currentNode, responderEvent.dispatchConfig.registrationName = "onResponderTerminate", onResponderTerminate(responderEvent)), onResponderGrant != null && (responderEvent.currentTarget = node, responderEvent.dispatchConfig.registrationName = "onResponderGrant", onResponderGrant(responderEvent)), changeCurrentResponder(wantsResponder)) : onResponderReject != null && (responderEvent.currentTarget = node, responderEvent.dispatchConfig.registrationName = "onResponderReject", onResponderReject(responderEvent));
      }
    }
    var documentEventsCapturePhase = ["blur", "scroll"], documentEventsBubblePhase = [
      // mouse
      "mousedown",
      "mousemove",
      "mouseup",
      "dragstart",
      // touch
      "touchstart",
      "touchmove",
      "touchend",
      "touchcancel",
      // other
      "contextmenu",
      "select",
      "selectionchange"
    ], isTamaguiResponderActive = Symbol();
    function attachListeners() {
      import_utils.canUseDOM && !window[isTamaguiResponderActive] && (window.addEventListener("blur", eventListener), documentEventsBubblePhase.forEach((eventType) => {
        document.addEventListener(eventType, eventListener);
      }), documentEventsCapturePhase.forEach((eventType) => {
        document.addEventListener(eventType, eventListener, !0);
      }), window[isTamaguiResponderActive] = !0);
    }
    function addNode(id, node, config) {
      (0, import_utils2.setResponderId)(node, id), responderListenersMap.set(id, config);
    }
    function removeNode(id) {
      currentResponder.id === id && terminateResponder(), responderListenersMap.has(id) && responderListenersMap.delete(id);
    }
    function terminateResponder() {
      let { id, node } = currentResponder;
      if (id != null && node != null) {
        let { onResponderTerminate } = getResponderConfig(id);
        if (onResponderTerminate != null) {
          let event = (0, import_createResponderEvent.default)({}, responderTouchHistoryStore);
          event.currentTarget = node, onResponderTerminate(event);
        }
        changeCurrentResponder(emptyResponder);
      }
      isEmulatingMouseEvents = !1, trackedTouchCount = 0;
    }
    function getResponderNode() {
      return currentResponder.node;
    }
  }
});

// ../react-native-use-responder-events/dist/cjs/useResponderEvents.native.js
var require_useResponderEvents_native = __commonJS({
  "../react-native-use-responder-events/dist/cjs/useResponderEvents.native.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create, __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __getProtoOf2 = Object.getPrototypeOf, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __reExport2 = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: !0 }) : target,
      mod
    )), __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), useResponderEvents_exports = {};
    __export2(useResponderEvents_exports, {
      useResponderEvents: () => useResponderEvents2
    });
    module2.exports = __toCommonJS2(useResponderEvents_exports);
    var React = __toESM2(require("react")), ResponderSystem = __toESM2(require_ResponderSystem_native());
    __reExport2(useResponderEvents_exports, require_utils_native(), module2.exports);
    var emptyObject = {};
    function useResponderEvents2(hostRef, config = emptyObject) {
      let id = React.useId(), isAttachedRef = React.useRef(!1);
      React.useEffect(() => (ResponderSystem.attachListeners(), () => {
        ResponderSystem.removeNode(id);
      }), [id]), React.useEffect(() => {
        let {
          onMoveShouldSetResponder,
          onMoveShouldSetResponderCapture,
          onScrollShouldSetResponder,
          onScrollShouldSetResponderCapture,
          onSelectionChangeShouldSetResponder,
          onSelectionChangeShouldSetResponderCapture,
          onStartShouldSetResponder,
          onStartShouldSetResponderCapture
        } = config, requiresResponderSystem = onMoveShouldSetResponder != null || onMoveShouldSetResponderCapture != null || onScrollShouldSetResponder != null || onScrollShouldSetResponderCapture != null || onSelectionChangeShouldSetResponder != null || onSelectionChangeShouldSetResponderCapture != null || onStartShouldSetResponder != null || onStartShouldSetResponderCapture != null, node = hostRef.current;
        requiresResponderSystem ? (ResponderSystem.addNode(id, node, config), isAttachedRef.current = !0) : isAttachedRef.current && (ResponderSystem.removeNode(id), isAttachedRef.current = !1);
      }, [config, hostRef, id]);
    }
  }
});

// ../react-native-use-responder-events/dist/cjs/index.native.js
var require_index_native = __commonJS({
  "../react-native-use-responder-events/dist/cjs/index.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __reExport2 = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), src_exports2 = {};
    module2.exports = __toCommonJS2(src_exports2);
    __reExport2(src_exports2, require_useResponderEvents_native(), module2.exports);
  }
});

// ../helpers/dist/cjs/clamp.native.js
var require_clamp_native = __commonJS({
  "../helpers/dist/cjs/clamp.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), clamp_exports = {};
    __export2(clamp_exports, {
      clamp: () => clamp
    });
    module2.exports = __toCommonJS2(clamp_exports);
    function clamp(value, [min, max]) {
      return Math.min(max, Math.max(min, value));
    }
  }
});

// ../helpers/dist/cjs/composeEventHandlers.native.js
var require_composeEventHandlers_native = __commonJS({
  "../helpers/dist/cjs/composeEventHandlers.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), composeEventHandlers_exports = {};
    __export2(composeEventHandlers_exports, {
      composeEventHandlers: () => composeEventHandlers2
    });
    module2.exports = __toCommonJS2(composeEventHandlers_exports);
    function composeEventHandlers2(og, next, { checkDefaultPrevented = !0 } = {}) {
      return !og || !next ? next || og || void 0 : function(event) {
        if (og == null || og(event), !event || !(checkDefaultPrevented && "defaultPrevented" in event) || // @ts-ignore
        "defaultPrevented" in event && !event.defaultPrevented)
          return next == null ? void 0 : next(event);
      };
    }
  }
});

// ../helpers/dist/cjs/concatClassName.native.js
var require_concatClassName_native = __commonJS({
  "../helpers/dist/cjs/concatClassName.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), concatClassName_exports = {};
    __export2(concatClassName_exports, {
      concatClassName: () => concatClassName
    });
    module2.exports = __toCommonJS2(concatClassName_exports);
    function concatClassName(_cn) {
      let args = arguments, usedPrefixes = [], final = "", len = args.length, propObjects = null;
      for (let x = len; x >= 0; x--) {
        let cns = args[x];
        if (!cns)
          continue;
        if (!Array.isArray(cns) && typeof cns != "string") {
          propObjects = propObjects || [], propObjects.push(cns);
          continue;
        }
        let names = Array.isArray(cns) ? cns : cns.split(" "), numNames = names.length;
        for (let i = numNames - 1; i >= 0; i--) {
          let name = names[i];
          if (!name || name === " ")
            continue;
          if (name[0] !== "_") {
            final = name + " " + final;
            continue;
          }
          let splitIndex = name.indexOf("-");
          if (splitIndex < 1) {
            final = name + " " + final;
            continue;
          }
          let isMediaQuery = name[splitIndex + 1] === "_", styleKey = name.slice(1, name.lastIndexOf("-")), mediaKey = isMediaQuery ? name.slice(splitIndex + 2, splitIndex + 7) : null, uid = mediaKey ? styleKey + mediaKey : styleKey;
          if (usedPrefixes.indexOf(uid) > -1)
            continue;
          usedPrefixes.push(uid);
          let propName = styleKey;
          propName && propObjects && propObjects.some((po) => {
            if (mediaKey) {
              let propKey = pseudoInvert[mediaKey];
              return po && po[propKey] && propName in po[propKey] && po[propKey] !== null;
            }
            return po && propName in po && po[propName] !== null;
          }) || (final = name + " " + final);
        }
      }
      return final;
    }
    var pseudoInvert = {
      hover: "hoverStyle",
      focus: "focusStyle",
      press: "pressStyle"
    };
  }
});

// ../constants/dist/cjs/constants.native.js
var require_constants_native = __commonJS({
  "../constants/dist/cjs/constants.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), constants_native_exports = {};
    __export2(constants_native_exports, {
      currentPlatform: () => currentPlatform,
      isAndroid: () => isAndroid,
      isChrome: () => isChrome,
      isClient: () => isClient,
      isIos: () => isIos,
      isServer: () => isServer,
      isTouchable: () => isTouchable,
      isWeb: () => isWeb,
      isWebTouchable: () => isWebTouchable,
      isWindowDefined: () => isWindowDefined,
      useIsomorphicLayoutEffect: () => useIsomorphicLayoutEffect3
    });
    module2.exports = __toCommonJS2(constants_native_exports);
    var import_react = require("react"), isWeb = !1, isWindowDefined = !1, isServer = !1, isClient = !1, useIsomorphicLayoutEffect3 = import_react.useLayoutEffect, isChrome = !1, isWebTouchable = !1, isTouchable = !0, isAndroid = !1, isIos = !1, currentPlatform = "native";
  }
});

// ../constants/dist/cjs/index.native.js
var require_index_native2 = __commonJS({
  "../constants/dist/cjs/index.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __reExport2 = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), src_exports2 = {};
    module2.exports = __toCommonJS2(src_exports2);
    __reExport2(src_exports2, require_constants_native(), module2.exports);
  }
});

// ../helpers/dist/cjs/validStyleProps.native.js
var require_validStyleProps_native = __commonJS({
  "../helpers/dist/cjs/validStyleProps.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), validStyleProps_exports = {};
    __export2(validStyleProps_exports, {
      stylePropsAll: () => stylePropsAll,
      stylePropsFont: () => stylePropsFont,
      stylePropsText: () => stylePropsText,
      stylePropsTextOnly: () => stylePropsTextOnly,
      stylePropsTransform: () => stylePropsTransform,
      stylePropsUnitless: () => stylePropsUnitless,
      stylePropsView: () => stylePropsView,
      tokenCategories: () => tokenCategories,
      validPseudoKeys: () => validPseudoKeys,
      validStyles: () => validStyles,
      validStylesOnBaseProps: () => validStylesOnBaseProps
    });
    module2.exports = __toCommonJS2(validStyleProps_exports);
    var import_constants2 = require_index_native2(), placeHolderTextColors = {
      placeholderTextColor: !0
    }, validStylesOnBaseProps = {
      ...placeHolderTextColors
    }, textColors = {
      color: !0,
      ...placeHolderTextColors,
      textDecorationColor: !0,
      textShadowColor: !0
    }, tokenCategories = {
      radius: {
        borderRadius: !0,
        borderTopLeftRadius: !0,
        borderTopRightRadius: !0,
        borderBottomLeftRadius: !0,
        borderBottomRightRadius: !0,
        // logical
        borderStartStartRadius: !0,
        borderStartEndRadius: !0,
        borderEndStartRadius: !0,
        borderEndEndRadius: !0
      },
      size: {
        width: !0,
        height: !0,
        minWidth: !0,
        minHeight: !0,
        maxWidth: !0,
        maxHeight: !0
      },
      zIndex: {
        zIndex: !0
      },
      color: {
        backgroundColor: !0,
        borderColor: !0,
        borderBlockStartColor: !0,
        borderBlockEndColor: !0,
        borderBlockColor: !0,
        borderBottomColor: !0,
        borderTopColor: !0,
        borderLeftColor: !0,
        borderRightColor: !0,
        borderEndColor: !0,
        borderStartColor: !0,
        shadowColor: !0,
        ...textColors
      }
    }, stylePropsUnitless = {
      WebkitLineClamp: !0,
      animationIterationCount: !0,
      aspectRatio: !0,
      borderImageOutset: !0,
      borderImageSlice: !0,
      borderImageWidth: !0,
      columnCount: !0,
      flex: !0,
      flexGrow: !0,
      flexOrder: !0,
      flexPositive: !0,
      flexShrink: !0,
      flexNegative: !0,
      fontWeight: !0,
      gridRow: !0,
      gridRowEnd: !0,
      gridRowGap: !0,
      gridRowStart: !0,
      gridColumn: !0,
      gridColumnEnd: !0,
      gridColumnGap: !0,
      gridColumnStart: !0,
      lineClamp: !0,
      opacity: !0,
      order: !0,
      orphans: !0,
      tabSize: !0,
      widows: !0,
      zIndex: !0,
      zoom: !0,
      scale: !0,
      scaleX: !0,
      scaleY: !0,
      scaleZ: !0,
      shadowOpacity: !0
    }, stylePropsTransform = {
      x: !0,
      y: !0,
      scale: !0,
      perspective: !0,
      scaleX: !0,
      scaleY: !0,
      skewX: !0,
      skewY: !0,
      matrix: !0,
      rotate: !0,
      rotateY: !0,
      rotateX: !0,
      rotateZ: !0
    }, stylePropsView = {
      backfaceVisibility: !0,
      borderBottomEndRadius: !0,
      borderBottomStartRadius: !0,
      borderBottomWidth: !0,
      borderLeftWidth: !0,
      borderRightWidth: !0,
      borderStyle: !0,
      borderTopEndRadius: !0,
      borderTopStartRadius: !0,
      borderTopWidth: !0,
      borderWidth: !0,
      transform: !0,
      alignContent: !0,
      alignItems: !0,
      alignSelf: !0,
      borderEndWidth: !0,
      borderStartWidth: !0,
      bottom: !0,
      display: !0,
      end: !0,
      flexBasis: !0,
      flexDirection: !0,
      flexWrap: !0,
      gap: !0,
      columnGap: !0,
      rowGap: !0,
      justifyContent: !0,
      left: !0,
      margin: !0,
      marginBlockEnd: !0,
      marginBlockStart: !0,
      marginInlineEnd: !0,
      marginInline: !0,
      marginInlineStart: !0,
      marginBottom: !0,
      marginEnd: !0,
      marginHorizontal: !0,
      marginLeft: !0,
      marginRight: !0,
      marginStart: !0,
      marginTop: !0,
      marginVertical: !0,
      overflow: !0,
      padding: !0,
      paddingBottom: !0,
      paddingInline: !0,
      paddingBlock: !0,
      paddingBlockStart: !0,
      paddingInlineEnd: !0,
      paddingInlineStart: !0,
      paddingEnd: !0,
      paddingHorizontal: !0,
      paddingLeft: !0,
      paddingRight: !0,
      paddingStart: !0,
      paddingTop: !0,
      paddingVertical: !0,
      position: !0,
      right: !0,
      start: !0,
      top: !0,
      direction: !0,
      shadowOffset: !0,
      shadowRadius: !0,
      ...tokenCategories.color,
      ...tokenCategories.radius,
      ...tokenCategories.size,
      ...tokenCategories.radius,
      ...validStylesOnBaseProps,
      ...stylePropsTransform,
      ...stylePropsUnitless,
      ...import_constants2.isAndroid ? { elevationAndroid: !0 } : {}
    }, stylePropsFont = {
      fontFamily: !0,
      fontSize: !0,
      fontStyle: !0,
      fontWeight: !0,
      letterSpacing: !0,
      lineHeight: !0,
      textTransform: !0
    }, stylePropsTextOnly = {
      ...stylePropsFont,
      textAlign: !0,
      textDecorationLine: !0,
      textDecorationStyle: !0,
      ...textColors,
      textShadowOffset: !0,
      textShadowRadius: !0
    }, stylePropsText = {
      ...stylePropsView,
      ...stylePropsTextOnly
    }, stylePropsAll = stylePropsText, validPseudoKeys = {
      enterStyle: !0,
      exitStyle: !0,
      hoverStyle: !0,
      pressStyle: !0,
      focusStyle: !0
    }, validStyles = {
      ...validPseudoKeys,
      ...stylePropsView
    };
  }
});

// ../helpers/dist/cjs/types.native.js
var require_types_native2 = __commonJS({
  "../helpers/dist/cjs/types.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), types_exports = {};
    module2.exports = __toCommonJS2(types_exports);
  }
});

// ../simple-hash/dist/cjs/index.native.js
var require_index_native3 = __commonJS({
  "../simple-hash/dist/cjs/index.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), src_exports2 = {};
    __export2(src_exports2, {
      simpleHash: () => simpleHash
    });
    module2.exports = __toCommonJS2(src_exports2);
    var cache = /* @__PURE__ */ new Map(), simpleHash = (str, hashMin = 10) => {
      if (cache.has(str))
        return cache.get(str);
      let hash = 0, valids = "", len = str.length;
      for (let i = 0; i < len; i++) {
        let char = str.charCodeAt(i);
        if (hashMin !== "strict" && (char === 46 && (valids += "d0t"), isValidCSSCharCode(char) && len <= hashMin)) {
          valids += str[i];
          continue;
        }
        hash = hashChar(hash, str[i]);
      }
      let res = valids + (hash ? Math.abs(hash) : "");
      return cache.size > 1e4 && cache.clear(), cache.set(str, res), res;
    }, hashChar = (hash, c) => Math.imul(31, hash) + c.charCodeAt(0) | 0;
    function isValidCSSCharCode(code) {
      return (
        // A-Z
        code >= 65 && code <= 90 || // a-z
        code >= 97 && code <= 122 || // _
        code === 95 || // -
        code === 45 || // 0-9
        code >= 48 && code <= 57
      );
    }
  }
});

// ../helpers/dist/cjs/index.native.js
var require_index_native4 = __commonJS({
  "../helpers/dist/cjs/index.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __reExport2 = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), src_exports2 = {};
    module2.exports = __toCommonJS2(src_exports2);
    __reExport2(src_exports2, require_clamp_native(), module2.exports);
    __reExport2(src_exports2, require_composeEventHandlers_native(), module2.exports);
    __reExport2(src_exports2, require_concatClassName_native(), module2.exports);
    __reExport2(src_exports2, require_validStyleProps_native(), module2.exports);
    __reExport2(src_exports2, require_types_native2(), module2.exports);
    __reExport2(src_exports2, require_index_native3(), module2.exports);
  }
});

// ../web/dist/cjs/config.native.js
var require_config_native = __commonJS({
  "../web/dist/cjs/config.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), config_exports = {};
    __export2(config_exports, {
      configListeners: () => configListeners,
      devConfig: () => devConfig,
      getConfig: () => getConfig2,
      getFont: () => getFont,
      getThemes: () => getThemes2,
      getToken: () => getToken2,
      getTokenObject: () => getTokenObject,
      getTokenValue: () => getTokenValue2,
      getTokens: () => getTokens2,
      onConfiguredOnce: () => onConfiguredOnce,
      setConfig: () => setConfig,
      setConfigFont: () => setConfigFont,
      setTokens: () => setTokens,
      setupDev: () => setupDev2,
      updateConfig: () => updateConfig2,
      useTokens: () => useTokens
    });
    module2.exports = __toCommonJS2(config_exports);
    var import_constants2 = require_index_native2(), conf, setConfig = (next) => {
      conf = next, configListeners.forEach((cb) => cb(next));
    }, setConfigFont = (name, font, fontParsed) => {
      conf.fonts[name] = font, conf.fontsParsed[`$${name}`] = fontParsed;
    }, getConfig2 = () => {
      if (!conf)
        throw new Error(
          "Missing tamagui config, you either have a duplicate config, or haven't set it up. Be sure createTamagui is called before rendering. Also, make sure all of your tamagui dependencies are on the same version (`tamagui`, `@tamagui/package-name`, etc.)"
        );
      return conf;
    }, tokensMerged;
    function setTokens(_) {
      tokensMerged = _;
    }
    var getTokens2 = ({
      prefixed
    } = {}) => {
      let { tokens, tokensParsed } = conf;
      return prefixed === !1 ? tokens : prefixed === !0 ? tokensParsed : tokensMerged;
    }, getTokenObject = (value, group) => {
      var _a, _b;
      return conf.specificTokens[value] ?? (group ? (_a = tokensMerged[group]) == null ? void 0 : _a[value] : (_b = tokensMerged[Object.keys(tokensMerged).find((cat) => tokensMerged[cat][value]) || ""]) == null ? void 0 : _b[value]);
    }, getToken2 = (value, group, useVariable = import_constants2.isWeb) => {
      let token = getTokenObject(value, group);
      return useVariable ? token == null ? void 0 : token.variable : token == null ? void 0 : token.val;
    }, getTokenValue2 = (value, group) => getToken2(value, group, !1), useTokens = getTokens2, getThemes2 = () => conf.themes, configListeners = /* @__PURE__ */ new Set(), onConfiguredOnce = (cb) => {
      conf ? cb(conf) : configListeners.add(cb);
    }, updateConfig2 = (key, value) => {
      Object.assign(conf[key], value);
    }, getFont = (name) => {
      var _a;
      let conf2 = getConfig2();
      return conf2.fontsParsed[name] ?? ((_a = Object.entries(conf2.fontsParsed).find(
        ([k]) => {
          var _a2, _b;
          return ((_b = (_a2 = conf2.fontsParsed[k]) == null ? void 0 : _a2.family) == null ? void 0 : _b.val) === name;
        }
      )) == null ? void 0 : _a[1]);
    }, devConfig;
    function setupDev2(conf2) {
    }
  }
});

// ../web/dist/cjs/createVariable.native.js
var require_createVariable_native = __commonJS({
  "../web/dist/cjs/createVariable.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), createVariable_exports = {};
    __export2(createVariable_exports, {
      createCSSVariable: () => createCSSVariable,
      createVariable: () => createVariable,
      didGetVariableValue: () => didGetVariableValue,
      getVariable: () => getVariable,
      getVariableName: () => getVariableName,
      getVariableValue: () => getVariableValue,
      getVariableVariable: () => getVariableVariable,
      isVariable: () => isVariable,
      setDidGetVariableValue: () => setDidGetVariableValue,
      variableToString: () => variableToString
    });
    module2.exports = __toCommonJS2(createVariable_exports);
    var import_constants2 = require_index_native2(), import_helpers = require_index_native4(), import_config = require_config_native(), IS_VAR = "isVar", createVariable = (props, skipHash = !1) => {
      if (!skipHash && isVariable(props))
        return props;
      let { key, name, val } = props;
      return {
        [IS_VAR]: !0,
        key,
        name: skipHash ? "" : (0, import_helpers.simpleHash)(name, 40),
        val,
        variable: import_constants2.isWeb ? skipHash ? `var(--${name})` : createCSSVariable(name) : ""
      };
    };
    function variableToString(vrble, getValue = !1) {
      return isVariable(vrble) ? !getValue && import_constants2.isWeb && vrble.variable ? vrble.variable : `${vrble.val}` : `${vrble || ""}`;
    }
    function isVariable(v) {
      return v && typeof v == "object" && IS_VAR in v;
    }
    function getVariable(nameOrVariable) {
      if (setDidGetVariableValue(!0), isVariable(nameOrVariable))
        return variableToString(nameOrVariable);
      let tokens = (0, import_config.getConfig)().tokensParsed;
      return variableToString(tokens[nameOrVariable] ?? nameOrVariable);
    }
    var accessed = !1, setDidGetVariableValue = (val) => accessed = val, didGetVariableValue = () => accessed;
    function getVariableValue(v) {
      return isVariable(v) ? (setDidGetVariableValue(!0), v.val) : v;
    }
    function getVariableName(v) {
      return isVariable(v) ? v.name : v;
    }
    function getVariableVariable(v) {
      return isVariable(v) ? v.variable : v;
    }
    var createCSSVariable = (nameProp, includeVar = !0) => {
      let name = (0, import_helpers.simpleHash)(nameProp, 60);
      return includeVar ? `var(--${name})` : name;
    };
  }
});

// ../web/dist/cjs/helpers/insertStyleRule.native.js
var require_insertStyleRule_native = __commonJS({
  "../web/dist/cjs/helpers/insertStyleRule.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), insertStyleRule_exports = {};
    __export2(insertStyleRule_exports, {
      getAllRules: () => getAllRules,
      getAllSelectors: () => getAllSelectors,
      getAllTransforms: () => getAllTransforms,
      insertStyleRules: () => insertStyleRules,
      insertedTransforms: () => insertedTransforms,
      listenForSheetChanges: () => listenForSheetChanges,
      scanAllSheets: () => scanAllSheets,
      shouldInsertStyleRules: () => shouldInsertStyleRules,
      updateRules: () => updateRules
    });
    module2.exports = __toCommonJS2(insertStyleRule_exports);
    var import_constants2 = require_index_native2(), import_createVariable = require_createVariable_native(), scannedCache = /* @__PURE__ */ new WeakMap(), totalSelectorsInserted = /* @__PURE__ */ new Map(), allSelectors = {}, allRules = {}, insertedTransforms = {}, getAllSelectors = () => allSelectors, getAllRules = () => Object.values(allRules), getAllTransforms = () => insertedTransforms;
    function addTransform(identifier, css, rule) {
      let s = css.indexOf("transform:");
      if (s === -1)
        return;
      let startI = s + 10, endI = css.indexOf(";"), value = css.slice(startI, endI);
      if (!insertedTransforms[identifier])
        return insertedTransforms[identifier] = value, !0;
    }
    function listenForSheetChanges() {
      import_constants2.isClient && new MutationObserver((entries) => {
        for (let entry of entries)
          if (entry instanceof HTMLStyleElement && entry.sheet || entry instanceof HTMLLinkElement && entry.href.endsWith(".css")) {
            break;
          }
      }).observe(document.head, {
        childList: !0
      });
    }
    var lastScannedSheets = null;
    function scanAllSheets(collectThemes = !1, tokens) {
    }
    function track(id, remove = !1) {
      let next = (totalSelectorsInserted.get(id) || 0) + (remove ? -1 : 1);
      return totalSelectorsInserted.set(id, next), next;
    }
    var bailAfterEnv = process.env.TAMAGUI_BAIL_AFTER_SCANNING_X_CSS_RULES, bailAfter = bailAfterEnv ? +bailAfterEnv : 250;
    function updateSheetStyles(sheet2, remove = !1, collectThemes = !1, tokens) {
      var _a, _b;
      let rules;
      try {
        if (rules = sheet2.cssRules, !rules)
          return;
      } catch {
        return;
      }
      let firstSelector = (_a = getTamaguiSelector(rules[0], collectThemes)) == null ? void 0 : _a[0], lastSelector = (_b = getTamaguiSelector(rules[rules.length - 1], collectThemes)) == null ? void 0 : _b[0], cacheKey = `${rules.length}${firstSelector}${lastSelector}`, lastScanned = scannedCache.get(sheet2);
      if (!remove && lastScanned === cacheKey)
        return;
      let len = rules.length, fails = 0, dedupedThemes;
      for (let i = 0; i < len; i++) {
        let rule = rules[i];
        if (!(rule instanceof CSSStyleRule))
          continue;
        let response = getTamaguiSelector(rule, collectThemes);
        if (response)
          fails = 0;
        else {
          if (fails++, fails > bailAfter)
            return;
          continue;
        }
        let [identifier, cssRule, isTheme] = response;
        if (isTheme) {
          let deduped = addThemesFromCSS(cssRule, tokens);
          deduped && (dedupedThemes ||= [], dedupedThemes.push(deduped));
          continue;
        }
        let total = track(identifier, remove);
        remove ? total === 0 && delete allSelectors[identifier] : identifier in allSelectors || (!identifier.startsWith("_transform") || addTransform(identifier, cssRule.cssText, cssRule)) && (allSelectors[identifier] = cssRule.cssText);
      }
      return scannedCache.set(sheet2, cacheKey), dedupedThemes;
    }
    var colorVarToVal, rootComputedStyle = null;
    function addThemesFromCSS(cssStyleRule, tokens) {
      let selectors = cssStyleRule.selectorText.split(",");
      if (!selectors.length)
        return;
      if (tokens && !colorVarToVal) {
        colorVarToVal = {};
        for (let key in tokens.color) {
          let token = tokens.color[key];
          colorVarToVal[token.name] = token.val;
        }
      }
      let rules = (cssStyleRule.cssText || "").slice(cssStyleRule.selectorText.length + 2, -1).trim().split(";"), values = {};
      for (let rule of rules) {
        let sepI = rule.indexOf(":");
        if (sepI === -1)
          continue;
        let key = rule.slice(rule.indexOf("--") + 2, sepI), val = rule.slice(sepI + 2), value;
        if (val[3] === "(") {
          let varName = val.slice(6, -1), tokenVal = colorVarToVal[varName];
          tokenVal ? value = tokenVal : (rootComputedStyle ||= getComputedStyle(document.body), value = rootComputedStyle.getPropertyValue("--" + varName));
        } else
          value = val;
        values[key] = (0, import_createVariable.createVariable)(
          {
            key,
            name: key,
            val: value
          },
          !0
        );
      }
      let dedupedEntry = {
        names: [],
        theme: values
      };
      for (let selector of selectors) {
        let scheme = selector.includes("t_dark") ? "dark" : selector.includes("t_light") ? "light" : "", name = selector.slice(selector.lastIndexOf(".t_") + 3);
        name.startsWith(scheme) && (name = name.slice(scheme.length + 1)), scheme === name && (scheme = "");
        let themeName = `${scheme}${scheme && name ? "_" : ""}${name}`;
        dedupedEntry.names.includes(themeName) || dedupedEntry.names.push(themeName);
      }
      return dedupedEntry;
    }
    function getTamaguiSelector(rule, collectThemes = !1) {
      if (rule instanceof CSSStyleRule) {
        let text = rule.selectorText;
        if (text[0] === ":" && text[1] === "r") {
          if (text.startsWith(":root ._"))
            return [getIdentifierFromTamaguiSelector(text), rule];
          if (collectThemes && (text.startsWith(":root.t_") || text.startsWith(":root .t_")))
            return [
              text.slice(0, 20),
              // just used as uid
              rule,
              !0
            ];
        }
      } else if (rule instanceof CSSMediaRule)
        return rule.cssRules.length > 1 ? void 0 : getTamaguiSelector(rule.cssRules[0]);
    }
    var getIdentifierFromTamaguiSelector = (selector) => {
      let res = selector.slice(7);
      return selector.includes(":") ? res.replace(/:[a-z]+$/, "") : res;
    }, sheet = import_constants2.isClient ? document.head.appendChild(document.createElement("style")).sheet : null;
    function updateRules(identifier, rules) {
      return identifier in allRules ? !1 : (allRules[identifier] = rules.join(" "), identifier.startsWith("_transform") ? addTransform(identifier, rules[0]) : !0);
    }
    function insertStyleRules(rulesToInsert) {
      if (!(!rulesToInsert.length || !sheet)) {
        for (let { identifier, rules } of rulesToInsert)
          if (shouldInsertStyleRules(identifier)) {
            allSelectors[identifier] = rules.join(`
`), track(identifier), updateRules(identifier, rules);
            for (let rule of rules)
              try {
                sheet.insertRule(rule, sheet.cssRules.length);
              } catch (err) {
                console.groupCollapsed(
                  `Error inserting rule into CSSStyleSheet: ${String(err)}`
                ), console.info({ rule, rulesToInsert }), console.trace(), console.groupEnd();
              }
          }
      }
    }
    function shouldInsertStyleRules(identifier) {
      if (process.env.IS_STATIC === "is_static")
        return !0;
      let total = totalSelectorsInserted.get(identifier);
      return total === void 0 || total < 2;
    }
  }
});

// ../web/dist/cjs/helpers/createProxy.native.js
var require_createProxy_native = __commonJS({
  "../web/dist/cjs/helpers/createProxy.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), createProxy_exports = {};
    __export2(createProxy_exports, {
      createProxy: () => createProxy
    });
    module2.exports = __toCommonJS2(createProxy_exports);
    function createProxy(target, handler) {
      return new Proxy(target || {}, handler);
    }
  }
});

// ../web/dist/cjs/helpers/matchMedia.native.js
var require_matchMedia_native = __commonJS({
  "../web/dist/cjs/helpers/matchMedia.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), matchMedia_native_exports = {};
    __export2(matchMedia_native_exports, {
      matchMedia: () => matchMedia,
      setupMatchMedia: () => setupMatchMedia
    });
    module2.exports = __toCommonJS2(matchMedia_native_exports);
    var matchMediaImpl = matchMediaFallback, matchMedia = (...args) => matchMediaImpl(...args);
    function matchMediaFallback(query) {
      return {
        match: (a, b) => !1,
        addListener: () => {
        },
        removeListener: () => {
        },
        matches: !1
      };
    }
    function setupMatchMedia(_) {
      matchMediaImpl = _, globalThis.matchMedia = _;
    }
  }
});

// ../web/dist/cjs/helpers/pseudoDescriptors.native.js
var require_pseudoDescriptors_native = __commonJS({
  "../web/dist/cjs/helpers/pseudoDescriptors.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), pseudoDescriptors_exports = {};
    __export2(pseudoDescriptors_exports, {
      pseudoDescriptors: () => pseudoDescriptors,
      pseudoDescriptorsBase: () => pseudoDescriptorsBase,
      pseudoPriorities: () => pseudoPriorities
    });
    module2.exports = __toCommonJS2(pseudoDescriptors_exports);
    var pseudoDescriptorsBase = {
      // order of keys here important! in priority order
      hoverStyle: {
        name: "hover",
        priority: 1
      },
      pressStyle: {
        name: "active",
        stateKey: "press",
        priority: 2
      },
      focusStyle: {
        name: "focus",
        priority: 3
      }
    }, pseudoPriorities = {
      hover: 1,
      press: 2,
      focus: 3
    }, pseudoDescriptors = {
      ...pseudoDescriptorsBase,
      enterStyle: {
        name: "enter",
        stateKey: "unmounted",
        priority: 4
      },
      exitStyle: {
        name: "exit",
        priority: 5
      }
    };
  }
});

// ../web/dist/cjs/helpers/objectIdentityKey.native.js
var require_objectIdentityKey_native = __commonJS({
  "../web/dist/cjs/helpers/objectIdentityKey.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), objectIdentityKey_exports = {};
    __export2(objectIdentityKey_exports, {
      objectIdentityKey: () => objectIdentityKey
    });
    module2.exports = __toCommonJS2(objectIdentityKey_exports);
    function objectIdentityKey(obj) {
      let k = "";
      for (let key in obj) {
        k += key;
        let arg = obj[key], type = typeof arg;
        if (!arg || type !== "object")
          k += type + arg;
        else if (cache.has(arg))
          k += cache.get(arg);
        else {
          let v = Math.random();
          cache.set(arg, v), k += v;
        }
      }
      return k;
    }
    var cache = /* @__PURE__ */ new WeakMap();
  }
});

// ../web/dist/cjs/helpers/createStyledContext.native.js
var require_createStyledContext_native = __commonJS({
  "../web/dist/cjs/helpers/createStyledContext.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), createStyledContext_exports = {};
    __export2(createStyledContext_exports, {
      createStyledContext: () => createStyledContext
    });
    module2.exports = __toCommonJS2(createStyledContext_exports);
    var import_react = require("react"), import_objectIdentityKey = require_objectIdentityKey_native(), import_jsx_runtime = require("react/jsx-runtime");
    function createStyledContext(defaultValues) {
      let OGContext = (0, import_react.createContext)(defaultValues), OGProvider = OGContext.Provider, Context = OGContext, scopedContexts = /* @__PURE__ */ new Map(), Provider = ({
        children,
        scope,
        ...values
      }) => {
        let value = (0, import_react.useMemo)(() => ({
          // this ! is a workaround for ts error
          ...defaultValues,
          ...values
        }), [(0, import_objectIdentityKey.objectIdentityKey)(values)]), Provider2 = OGProvider;
        if (scope) {
          let ScopedContext = scopedContexts.get(scope);
          ScopedContext || (ScopedContext = (0, import_react.createContext)(defaultValues), scopedContexts.set(scope, ScopedContext)), Provider2 = ScopedContext.Provider;
        }
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Provider2, { value, children });
      }, useStyledContext = (scope) => {
        let context = scope ? scopedContexts.get(scope) : OGContext;
        return (0, import_react.useContext)(context);
      };
      return Context.Provider = Provider, Context.props = defaultValues, Context.context = OGContext, Context.useStyledContext = useStyledContext, Context;
    }
  }
});

// ../web/dist/cjs/contexts/ComponentContext.native.js
var require_ComponentContext_native = __commonJS({
  "../web/dist/cjs/contexts/ComponentContext.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), ComponentContext_exports = {};
    __export2(ComponentContext_exports, {
      ComponentContext: () => ComponentContext
    });
    module2.exports = __toCommonJS2(ComponentContext_exports);
    var import_createStyledContext = require_createStyledContext_native(), listeners = /* @__PURE__ */ new Set(), ComponentContext = (0, import_createStyledContext.createStyledContext)({
      disableSSR: void 0,
      inText: !1,
      language: null,
      animationDriver: null,
      groups: {
        emit: (name, state) => {
          listeners.forEach((l) => l(name, state));
        },
        subscribe(cb) {
          return listeners.add(cb), () => {
            listeners.delete(cb);
          };
        },
        state: {}
      }
    });
  }
});

// ../web/dist/cjs/hooks/useDisableSSR.native.js
var require_useDisableSSR_native = __commonJS({
  "../web/dist/cjs/hooks/useDisableSSR.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), useDisableSSR_exports = {};
    __export2(useDisableSSR_exports, {
      getDisableSSR: () => getDisableSSR,
      useDisableSSR: () => useDisableSSR
    });
    module2.exports = __toCommonJS2(useDisableSSR_exports);
    var import_react = require("react"), import_config = require_config_native(), import_ComponentContext = require_ComponentContext_native();
    function useDisableSSR() {
      let componentContext = (0, import_react.useContext)(import_ComponentContext.ComponentContext);
      return getDisableSSR(componentContext);
    }
    function getDisableSSR(componentContext) {
      return componentContext.disableSSR ?? (0, import_config.getConfig)().disableSSR;
    }
  }
});

// ../web/dist/cjs/hooks/useMedia.native.js
var require_useMedia_native = __commonJS({
  "../web/dist/cjs/hooks/useMedia.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), useMedia_exports = {};
    __export2(useMedia_exports, {
      configureMedia: () => configureMedia2,
      getMedia: () => getMedia2,
      getMediaImportanceIfMoreImportant: () => getMediaImportanceIfMoreImportant,
      getMediaKeyImportance: () => getMediaKeyImportance,
      isMediaKey: () => isMediaKey,
      mediaKeyMatch: () => mediaKeyMatch,
      mediaKeyToQuery: () => mediaKeyToQuery,
      mediaKeys: () => mediaKeys,
      mediaObjectToString: () => mediaObjectToString2,
      mediaQueryConfig: () => mediaQueryConfig2,
      mediaState: () => mediaState2,
      mergeMediaByImportance: () => mergeMediaByImportance,
      setMediaShouldUpdate: () => setMediaShouldUpdate,
      setupMediaListeners: () => setupMediaListeners,
      useMedia: () => useMedia2,
      useMediaListeners: () => useMediaListeners
    });
    module2.exports = __toCommonJS2(useMedia_exports);
    var import_constants2 = require_index_native2(), import_react = require("react"), import_config = require_config_native(), import_createProxy = require_createProxy_native(), import_matchMedia = require_matchMedia_native(), import_pseudoDescriptors = require_pseudoDescriptors_native(), import_useDisableSSR = require_useDisableSSR_native(), mediaState2 = {}, mediaQueryConfig2 = {}, getMedia2 = () => mediaState2, mediaKeys = /* @__PURE__ */ new Set(), isMediaKey = (key) => {
      if (mediaKeys.has(key))
        return !0;
      if (key[0] === "$") {
        if (key.startsWith("$platform-"))
          return "platform";
        if (key.startsWith("$theme-"))
          return "theme";
        if (key.startsWith("$group-"))
          return "group";
      }
      return !1;
    }, initState, defaultMediaImportance = Object.keys(import_pseudoDescriptors.pseudoDescriptors).length, mediaKeysOrdered, getMediaKeyImportance = (key) => (0, import_config.getConfig)().settings.mediaPropOrder ? defaultMediaImportance : mediaKeysOrdered.indexOf(key) + 100, dispose = /* @__PURE__ */ new Set(), mediaVersion = 0, configureMedia2 = (config) => {
      let { media, mediaQueryDefaultActive } = config;
      if (media) {
        mediaVersion++;
        for (let key in media)
          mediaState2[key] = (mediaQueryDefaultActive == null ? void 0 : mediaQueryDefaultActive[key]) || !1, mediaKeys.add(`$${key}`);
        Object.assign(mediaQueryConfig2, media), initState = { ...mediaState2 }, mediaKeysOrdered = Object.keys(media), config.disableSSR ? setupMediaListeners() : updateCurrentState();
      }
    };
    function unlisten() {
      dispose.forEach((cb) => cb()), dispose.clear();
    }
    var setupVersion = -1;
    function setupMediaListeners() {
      if (setupVersion !== mediaVersion) {
        setupVersion = mediaVersion, unlisten();
        for (let key in mediaQueryConfig2) {
          let update2 = function() {
            let next = !!getMatch().matches;
            next !== mediaState2[key] && (mediaState2 = { ...mediaState2, [key]: next }, updateCurrentState());
          };
          var update = update2;
          let str = mediaObjectToString2(mediaQueryConfig2[key], key), getMatch = () => (0, import_matchMedia.matchMedia)(str), match = getMatch();
          if (!match)
            throw new Error("\u26A0\uFE0F No match");
          match.addListener(update2), dispose.add(() => {
            match.removeListener(update2);
          }), update2();
        }
      }
    }
    function useMediaListeners(config) {
      config.disableSSR || (0, import_constants2.useIsomorphicLayoutEffect)(() => {
        setupMediaListeners();
      }, []);
    }
    var listeners = /* @__PURE__ */ new Set(), flushing = !1, flushVersion = -1;
    function updateCurrentState() {
      flushing && flushVersion === mediaVersion || (flushVersion = mediaVersion, flushing = !0, Promise.resolve().then(() => {
        flushing = !1, listeners.forEach((cb) => cb(mediaState2));
      }));
    }
    var shouldUpdate = /* @__PURE__ */ new WeakMap();
    function setMediaShouldUpdate(ref, props) {
      return shouldUpdate.set(ref, props);
    }
    function subscribe(subscriber) {
      return listeners.add(subscriber), () => listeners.delete(subscriber);
    }
    function useMedia2(uid, componentContext) {
      let internal = (0, import_react.useRef)(), initialState = ((componentContext ? (0, import_useDisableSSR.getDisableSSR)(componentContext) : (0, import_useDisableSSR.useDisableSSR)()) ? mediaState2 : initState) || {}, state = (0, import_react.useSyncExternalStore)(
        subscribe,
        () => {
          if (!internal.current)
            return initialState;
          let { touched, prev } = internal.current, componentState = uid ? shouldUpdate.get(uid) : void 0;
          if (componentState && componentState.enabled === !1)
            return prev;
          let testKeys = (componentState == null ? void 0 : componentState.keys) ?? ((!componentState || componentState.enabled) && touched ? [...touched] : null);
          return !testKeys || testKeys != null && testKeys.every((key) => mediaState2[key] === prev[key]) ? prev : (internal.current.prev = mediaState2, mediaState2);
        },
        () => initialState
      );
      return new Proxy(state, {
        get(_, key) {
          return typeof key == "string" && (internal.current ||= { prev: initialState }, internal.current.touched ||= /* @__PURE__ */ new Set(), internal.current.touched.add(key)), Reflect.get(state, key);
        }
      });
    }
    var getMediaImportanceIfMoreImportant = (mediaKey, key, importancesUsed, isSizeMedia) => {
      let conf = (0, import_config.getConfig)(), importance = isSizeMedia && !conf.settings.mediaPropOrder ? getMediaKeyImportance(mediaKey) : defaultMediaImportance;
      return !importancesUsed[key] || importance > importancesUsed[key] ? importance : null;
    };
    function mergeMediaByImportance(onto, mediaKey, key, value, importancesUsed, isSizeMedia, importanceBump) {
      let importance = getMediaImportanceIfMoreImportant(
        mediaKey,
        key,
        importancesUsed,
        isSizeMedia
      );
      return importanceBump && (importance = (importance || 0) + importanceBump), importance === null ? !1 : (importancesUsed[key] = importance, onto[key] = value, !0);
    }
    function camelToHyphen(str) {
      return str.replace(/[A-Z]/g, (m) => `-${m.toLowerCase()}`).toLowerCase();
    }
    var cache = /* @__PURE__ */ new WeakMap(), cachedMediaKeyToQuery = {};
    function mediaObjectToString2(query, key) {
      if (typeof query == "string")
        return query;
      if (cache.has(query))
        return cache.get(query);
      let res = Object.entries(query).map(([feature, value]) => (feature = camelToHyphen(feature), typeof value == "string" ? `(${feature}: ${value})` : (typeof value == "number" && /[height|width]$/.test(feature) && (value = `${value}px`), `(${feature}: ${value})`))).join(" and ");
      return key && (cachedMediaKeyToQuery[key] = res), cache.set(query, res), res;
    }
    function mediaKeyToQuery(key) {
      return cachedMediaKeyToQuery[key] || mediaObjectToString2(mediaQueryConfig2[key], key);
    }
    function mediaKeyMatch(key, dimensions) {
      let mediaQueries = mediaQueryConfig2[key];
      return Object.keys(mediaQueries).every((query) => {
        let expectedVal = +mediaQueries[query], isMax = query.startsWith("max"), isWidth = query.endsWith("Width"), givenVal = dimensions[isWidth ? "width" : "height"];
        return isMax ? givenVal < expectedVal : givenVal > expectedVal;
      });
    }
  }
});

// ../web/dist/cjs/Tamagui.native.js
var require_Tamagui_native = __commonJS({
  "../web/dist/cjs/Tamagui.native.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create, __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __getProtoOf2 = Object.getPrototypeOf, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: !0 }) : target,
      mod
    )), __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), Tamagui_exports = {};
    __export2(Tamagui_exports, {
      Tamagui: () => Tamagui,
      getValueFromIdentifier: () => getValueFromIdentifier,
      setIdentifierValue: () => setIdentifierValue
    });
    module2.exports = __toCommonJS2(Tamagui_exports);
    var Helpers = __toESM2(require_index_native4()), import_config = require_config_native(), import_insertStyleRule = require_insertStyleRule_native(), import_useMedia = require_useMedia_native(), TamaguiManager = class {
      constructor() {
        this.Helpers = Helpers;
      }
      get mediaState() {
        return { ...import_useMedia.mediaState };
      }
      get config() {
        return (0, import_config.getConfig)();
      }
      get insertedRules() {
        return (0, import_insertStyleRule.getAllRules)();
      }
      get allSelectors() {
        return (0, import_insertStyleRule.getAllSelectors)();
      }
      get allTransforms() {
        return (0, import_insertStyleRule.getAllTransforms)();
      }
      get identifierToValue() {
        return identifierToValue;
      }
    }, Tamagui = new TamaguiManager(), identifierToValue = /* @__PURE__ */ new Map(), getValueFromIdentifier = (identifier) => identifierToValue.get(identifier), setIdentifierValue = (identifier, value) => {
      identifierToValue.set(identifier, value);
    };
  }
});

// ../compose-refs/dist/cjs/compose-refs.native.js
var require_compose_refs_native = __commonJS({
  "../compose-refs/dist/cjs/compose-refs.native.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create, __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __getProtoOf2 = Object.getPrototypeOf, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: !0 }) : target,
      mod
    )), __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), compose_refs_exports = {};
    __export2(compose_refs_exports, {
      composeRefs: () => composeRefs,
      useComposedRefs: () => useComposedRefs
    });
    module2.exports = __toCommonJS2(compose_refs_exports);
    var React = __toESM2(require("react"));
    function setRef(ref, value) {
      typeof ref == "function" ? ref(value) : ref && (ref.current = value);
    }
    function composeRefs(...refs) {
      return (node) => refs.forEach((ref) => setRef(ref, node));
    }
    function useComposedRefs(...refs) {
      return React.useCallback(composeRefs(...refs), refs);
    }
  }
});

// ../compose-refs/dist/cjs/index.native.js
var require_index_native5 = __commonJS({
  "../compose-refs/dist/cjs/index.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __reExport2 = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), src_exports2 = {};
    module2.exports = __toCommonJS2(src_exports2);
    __reExport2(src_exports2, require_compose_refs_native(), module2.exports);
  }
});

// ../use-did-finish-ssr/dist/cjs/index.native.js
var require_index_native6 = __commonJS({
  "../use-did-finish-ssr/dist/cjs/index.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), src_exports2 = {};
    __export2(src_exports2, {
      useClientValue: () => useClientValue,
      useDidFinishSSR: () => useDidFinishSSR
    });
    module2.exports = __toCommonJS2(src_exports2);
    var import_react = require("react");
    function useDidFinishSSR(value) {
      return value ?? !0;
    }
    function useClientValue(value) {
      return useDidFinishSSR() ? typeof value == "function" ? value() : value : void 0;
    }
  }
});

// ../web/dist/cjs/constants/constants.native.js
var require_constants_native2 = __commonJS({
  "../web/dist/cjs/constants/constants.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), constants_exports = {};
    __export2(constants_exports, {
      THEME_CLASSNAME_PREFIX: () => THEME_CLASSNAME_PREFIX,
      THEME_NAME_SEPARATOR: () => THEME_NAME_SEPARATOR,
      stackDefaultStyles: () => stackDefaultStyles
    });
    module2.exports = __toCommonJS2(constants_exports);
    var THEME_NAME_SEPARATOR = "_", THEME_CLASSNAME_PREFIX = "t_", stackDefaultStyles = {
      alignItems: "stretch"
    };
  }
});

// ../web/dist/cjs/defaultComponentState.native.js
var require_defaultComponentState_native = __commonJS({
  "../web/dist/cjs/defaultComponentState.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), defaultComponentState_exports = {};
    __export2(defaultComponentState_exports, {
      defaultComponentState: () => defaultComponentState,
      defaultComponentStateMounted: () => defaultComponentStateMounted,
      defaultComponentStateShouldEnter: () => defaultComponentStateShouldEnter
    });
    module2.exports = __toCommonJS2(defaultComponentState_exports);
    var defaultComponentState = {
      hover: !1,
      press: !1,
      pressIn: !1,
      focus: !1,
      unmounted: !0
    }, defaultComponentStateMounted = {
      ...defaultComponentState,
      unmounted: !1
    }, defaultComponentStateShouldEnter = {
      ...defaultComponentState,
      unmounted: "should-enter"
    };
  }
});

// ../web/dist/cjs/helpers/createShallowSetState.native.js
var require_createShallowSetState_native = __commonJS({
  "../web/dist/cjs/helpers/createShallowSetState.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), createShallowSetState_exports = {};
    __export2(createShallowSetState_exports, {
      createShallowSetState: () => createShallowSetState,
      isEqualShallow: () => isEqualShallow,
      mergeIfNotShallowEqual: () => mergeIfNotShallowEqual
    });
    module2.exports = __toCommonJS2(createShallowSetState_exports);
    function createShallowSetState(setter) {
      return (next) => setter((prev) => mergeIfNotShallowEqual(prev, next));
    }
    function mergeIfNotShallowEqual(prev, next) {
      return isEqualShallow(prev, next) ? prev : { ...prev, ...next };
    }
    function isEqualShallow(prev, next) {
      for (let key in next)
        if (prev[key] !== next[key])
          return !1;
      return !0;
    }
  }
});

// ../web/dist/cjs/constants/accessibilityDirectMap.native.js
var require_accessibilityDirectMap_native = __commonJS({
  "../web/dist/cjs/constants/accessibilityDirectMap.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), accessibilityDirectMap_native_exports = {};
    __export2(accessibilityDirectMap_native_exports, {
      accessibilityDirectMap: () => accessibilityDirectMap2,
      accessibilityWebRoleToNativeRole: () => accessibilityWebRoleToNativeRole,
      nativeAccessibilityState: () => nativeAccessibilityState,
      nativeAccessibilityValue: () => nativeAccessibilityValue,
      webToNativeAccessibilityDirectMap: () => webToNativeAccessibilityDirectMap
    });
    module2.exports = __toCommonJS2(accessibilityDirectMap_native_exports);
    var accessibilityDirectMap2 = {}, webToNativeAccessibilityDirectMap = {
      "aria-label": "accessibilityLabel",
      "aria-labelledby": "accessibilityLabelledBy",
      "aria-live": "accessibilityLiveRegion",
      "aria-modal": "accessibilityViewIsModal",
      "aria-hidden": "accessibilityElementsHidden"
    }, nativeAccessibilityValue = {
      "aria-valuemin": "min",
      "aria-valuemax": "max",
      "aria-valuenow": "now",
      "aria-valuetext": "text"
    }, nativeAccessibilityState = {
      "aria-disabled": "disabled",
      "aria-selected": "selected",
      "aria-checked": "checked",
      "aria-busy": "busy",
      "aria-expanded": "expanded"
    }, accessibilityWebRoleToNativeRole = {
      alert: "alert",
      button: "button",
      checkbox: "checkbox",
      combobox: "combobox",
      grid: "grid",
      group: "none",
      heading: "header",
      imagebutton: "imagebutton",
      img: "image",
      keyboardkey: "keyboardkey",
      link: "link",
      menu: "menu",
      menubar: "menubar",
      menuitem: "menuitem",
      none: "none",
      presentation: "none",
      progressbar: "progressbar",
      radio: "radio",
      radiogroup: "radiogroup",
      region: "summary",
      scrollbar: "scrollbar",
      searchbox: "search",
      slider: "adjustable",
      spinbutton: "spinbutton",
      summary: "summary",
      switch: "switch",
      tab: "tab",
      tablist: "tablist",
      text: "text",
      timer: "timer",
      togglebutton: "togglebutton",
      toolbar: "toolbar"
    };
  }
});

// ../web/dist/cjs/constants/isDevTools.native.js
var require_isDevTools_native = __commonJS({
  "../web/dist/cjs/constants/isDevTools.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), isDevTools_exports = {};
    __export2(isDevTools_exports, {
      isDevTools: () => isDevTools
    });
    module2.exports = __toCommonJS2(isDevTools_exports);
    var isDevTools = (() => {
      if (!1)
        try {
        } catch {
        }
      return !1;
    })();
  }
});

// ../web/dist/cjs/helpers/getGroupPropParts.native.js
var require_getGroupPropParts_native = __commonJS({
  "../web/dist/cjs/helpers/getGroupPropParts.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), getGroupPropParts_exports = {};
    __export2(getGroupPropParts_exports, {
      getGroupPropParts: () => getGroupPropParts
    });
    module2.exports = __toCommonJS2(getGroupPropParts_exports);
    var import_useMedia = require_useMedia_native();
    function getGroupPropParts(groupProp) {
      let mediaQueries = (0, import_useMedia.getMedia)(), [_, name, part3, part4] = groupProp.split("-"), pseudo, media = part3 in mediaQueries ? part3 : void 0;
      return media ? pseudo = part4 : pseudo = part3, { name, pseudo, media };
    }
  }
});

// ../web/dist/cjs/helpers/createMediaStyle.native.js
var require_createMediaStyle_native = __commonJS({
  "../web/dist/cjs/helpers/createMediaStyle.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), createMediaStyle_exports = {};
    __export2(createMediaStyle_exports, {
      MEDIA_SEP: () => MEDIA_SEP,
      createMediaStyle: () => createMediaStyle
    });
    module2.exports = __toCommonJS2(createMediaStyle_exports);
    var import_config = require_config_native(), import_useMedia = require_useMedia_native(), import_getGroupPropParts = require_getGroupPropParts_native(), MEDIA_SEP = "_", prefixes = null, selectors = null, groupPseudoToPseudoCSSMap = {
      press: "active"
    }, createMediaStyle = (styleObject, mediaKeyIn, mediaQueries, type, negate, priority) => {
      let { property, identifier, rules } = styleObject, conf = (0, import_config.getConfig)(), enableMediaPropOrder = conf.settings.mediaPropOrder, isTheme = type === "theme", isPlatform = type === "platform", isGroup = type === "group", isNonWindowMedia = isTheme || isPlatform || isGroup, negKey = negate ? "0" : "", ogPrefix = identifier.slice(0, identifier.indexOf("-") + 1), id = `${ogPrefix}${MEDIA_SEP}${mediaKeyIn.replace("-", "")}${negKey}${MEDIA_SEP}`, styleRule = "", groupMediaKey, containerName, nextIdentifier = identifier.replace(ogPrefix, id), styleInner = rules.map((rule) => rule.replace(identifier, nextIdentifier)).join(";");
      if (isNonWindowMedia) {
        let precedenceImportancePrefix = new Array((priority || 0) + (isGroup ? 1 : 0)).fill(":root").join("");
        if (isTheme || isGroup) {
          let groupInfo = (0, import_getGroupPropParts.getGroupPropParts)(mediaKeyIn), mediaName = groupInfo == null ? void 0 : groupInfo.name;
          groupMediaKey = groupInfo == null ? void 0 : groupInfo.media, isGroup && (containerName = mediaName);
          let name = (isGroup ? "group_" : "") + mediaName, selectorStart = styleInner.indexOf(":root"), selectorEnd = styleInner.lastIndexOf("{"), selector = styleInner.slice(selectorStart, selectorEnd), precedenceSpace = conf.themeClassNameOnRoot && isTheme ? "" : " ", pseudoSelectorName = groupInfo.pseudo ? groupPseudoToPseudoCSSMap[groupInfo.pseudo] || groupInfo.pseudo : void 0, pseudoSelector = pseudoSelectorName ? `:${pseudoSelectorName}` : "", presedencePrefix = `:root${precedenceImportancePrefix}${precedenceSpace}`, mediaSelector = `.t_${name}${pseudoSelector}`, nextSelector = `${presedencePrefix}${mediaSelector} ${selector.replace(
            ":root",
            ""
          )}`;
          styleRule = styleInner.replace(selector, nextSelector);
        } else
          styleRule = `${precedenceImportancePrefix}${styleInner}`;
      }
      if (!isNonWindowMedia || groupMediaKey) {
        if (!selectors) {
          let mediaKeys = Object.keys(mediaQueries);
          selectors = Object.fromEntries(
            mediaKeys.map((key) => [key, (0, import_useMedia.mediaObjectToString)(mediaQueries[key])])
          ), enableMediaPropOrder || (prefixes = Object.fromEntries(
            mediaKeys.map((k, index) => [k, new Array(index + 1).fill(":root").join("")])
          ));
        }
        let mediaKey = groupMediaKey || mediaKeyIn, mediaSelector = selectors[mediaKey], mediaQuery = `${negate ? "not all and" : ""} ${mediaSelector}`, precedenceImportancePrefix = groupMediaKey ? "" : enableMediaPropOrder ? (
          // this new array should be cached
          new Array(priority).fill(":root").join("")
        ) : (
          // @ts-ignore
          prefixes[mediaKey]
        ), prefix = groupMediaKey ? `@container ${containerName}` : "@media";
        groupMediaKey && (styleInner = styleRule), styleInner.includes(prefix) ? styleRule = styleInner.replace("{", ` and ${mediaQuery} {`) : styleRule = `${prefix} ${mediaQuery}{${precedenceImportancePrefix}${styleInner}}`;
      }
      return {
        property,
        rules: [styleRule],
        identifier: nextIdentifier
      };
    };
  }
});

// ../web/dist/cjs/helpers/expandStyle.native.js
var require_expandStyle_native = __commonJS({
  "../web/dist/cjs/helpers/expandStyle.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all2) => {
      for (var name in all2)
        __defProp2(target, name, { get: all2[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), expandStyle_exports = {};
    __export2(expandStyle_exports, {
      expandStyle: () => expandStyle
    });
    module2.exports = __toCommonJS2(expandStyle_exports);
    var import_constants2 = require_index_native2();
    function expandStyle(key, value) {
      if (!1)
        switch (key) {
          case "textAlignVertical":
          case "writingDirection":
        }
      if (import_constants2.isAndroid && key === "elevationAndroid")
        return [["elevation", value]];
      if (key in EXPANSIONS)
        return EXPANSIONS[key].map((key2) => [key2, value]);
    }
    var all = ["Top", "Right", "Bottom", "Left"], horiz = ["Right", "Left"], vert = ["Top", "Bottom"], xy = ["X", "Y"], EXPANSIONS = {
      borderColor: ["TopColor", "RightColor", "BottomColor", "LeftColor"],
      borderRadius: [
        "TopLeftRadius",
        "TopRightRadius",
        "BottomRightRadius",
        "BottomLeftRadius"
      ],
      borderWidth: ["TopWidth", "RightWidth", "BottomWidth", "LeftWidth"],
      margin: all,
      marginHorizontal: horiz,
      marginVertical: vert,
      overscrollBehavior: xy,
      padding: all,
      paddingHorizontal: horiz,
      paddingVertical: vert,
      ...import_constants2.isWeb && {
        // react-native only supports borderStyle
        borderStyle: ["TopStyle", "RightStyle", "BottomStyle", "LeftStyle"],
        // react-native doesn't support X / Y
        overflow: xy
      }
    }, _a;
    for (let parent in EXPANSIONS) {
      let prefix = parent.slice(0, ((_a = /[A-Z]/.exec(parent)) == null ? void 0 : _a.index) ?? parent.length);
      EXPANSIONS[parent] = EXPANSIONS[parent].map((k) => `${prefix}${k}`);
    }
  }
});

// ../../node_modules/@react-native/normalize-color/index.js
var require_normalize_color = __commonJS({
  "../../node_modules/@react-native/normalize-color/index.js"(exports, module2) {
    "use strict";
    function normalizeColor(color) {
      if (typeof color == "number")
        return color >>> 0 === color && color >= 0 && color <= 4294967295 ? color : null;
      if (typeof color != "string")
        return null;
      let matchers = getMatchers(), match;
      if (match = matchers.hex6.exec(color))
        return parseInt(match[1] + "ff", 16) >>> 0;
      let colorFromKeyword = normalizeKeyword(color);
      return colorFromKeyword ?? ((match = matchers.rgb.exec(color)) ? (parse255(match[1]) << 24 | // r
      parse255(match[2]) << 16 | // g
      parse255(match[3]) << 8 | // b
      255) >>> // a
      0 : (match = matchers.rgba.exec(color)) ? match[6] !== void 0 ? (parse255(match[6]) << 24 | // r
      parse255(match[7]) << 16 | // g
      parse255(match[8]) << 8 | // b
      parse1(match[9])) >>> // a
      0 : (parse255(match[2]) << 24 | // r
      parse255(match[3]) << 16 | // g
      parse255(match[4]) << 8 | // b
      parse1(match[5])) >>> // a
      0 : (match = matchers.hex3.exec(color)) ? parseInt(
        match[1] + match[1] + // r
        match[2] + match[2] + // g
        match[3] + match[3] + // b
        "ff",
        // a
        16
      ) >>> 0 : (match = matchers.hex8.exec(color)) ? parseInt(match[1], 16) >>> 0 : (match = matchers.hex4.exec(color)) ? parseInt(
        match[1] + match[1] + // r
        match[2] + match[2] + // g
        match[3] + match[3] + // b
        match[4] + match[4],
        // a
        16
      ) >>> 0 : (match = matchers.hsl.exec(color)) ? (hslToRgb(
        parse360(match[1]),
        // h
        parsePercentage(match[2]),
        // s
        parsePercentage(match[3])
        // l
      ) | 255) >>> // a
      0 : (match = matchers.hsla.exec(color)) ? match[6] !== void 0 ? (hslToRgb(
        parse360(match[6]),
        // h
        parsePercentage(match[7]),
        // s
        parsePercentage(match[8])
        // l
      ) | parse1(match[9])) >>> // a
      0 : (hslToRgb(
        parse360(match[2]),
        // h
        parsePercentage(match[3]),
        // s
        parsePercentage(match[4])
        // l
      ) | parse1(match[5])) >>> // a
      0 : (match = matchers.hwb.exec(color)) ? (hwbToRgb(
        parse360(match[1]),
        // h
        parsePercentage(match[2]),
        // w
        parsePercentage(match[3])
        // b
      ) | 255) >>> // a
      0 : null);
    }
    function hue2rgb(p, q, t) {
      return t < 0 && (t += 1), t > 1 && (t -= 1), t < 1 / 6 ? p + (q - p) * 6 * t : t < 1 / 2 ? q : t < 2 / 3 ? p + (q - p) * (2 / 3 - t) * 6 : p;
    }
    function hslToRgb(h, s, l) {
      let q = l < 0.5 ? l * (1 + s) : l + s - l * s, p = 2 * l - q, r = hue2rgb(p, q, h + 1 / 3), g = hue2rgb(p, q, h), b = hue2rgb(p, q, h - 1 / 3);
      return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
    }
    function hwbToRgb(h, w, b) {
      if (w + b >= 1) {
        let gray = Math.round(w * 255 / (w + b));
        return gray << 24 | gray << 16 | gray << 8;
      }
      let red = hue2rgb(0, 1, h + 1 / 3) * (1 - w - b) + w, green = hue2rgb(0, 1, h) * (1 - w - b) + w, blue = hue2rgb(0, 1, h - 1 / 3) * (1 - w - b) + w;
      return Math.round(red * 255) << 24 | Math.round(green * 255) << 16 | Math.round(blue * 255) << 8;
    }
    var NUMBER = "[-+]?\\d*\\.?\\d+", PERCENTAGE = NUMBER + "%";
    function call(...args) {
      return "\\(\\s*(" + args.join(")\\s*,?\\s*(") + ")\\s*\\)";
    }
    function callWithSlashSeparator(...args) {
      return "\\(\\s*(" + args.slice(0, args.length - 1).join(")\\s*,?\\s*(") + ")\\s*/\\s*(" + args[args.length - 1] + ")\\s*\\)";
    }
    function commaSeparatedCall(...args) {
      return "\\(\\s*(" + args.join(")\\s*,\\s*(") + ")\\s*\\)";
    }
    var cachedMatchers;
    function getMatchers() {
      return cachedMatchers === void 0 && (cachedMatchers = {
        rgb: new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER)),
        rgba: new RegExp(
          "rgba(" + commaSeparatedCall(NUMBER, NUMBER, NUMBER, NUMBER) + "|" + callWithSlashSeparator(NUMBER, NUMBER, NUMBER, NUMBER) + ")"
        ),
        hsl: new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE)),
        hsla: new RegExp(
          "hsla(" + commaSeparatedCall(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER) + "|" + callWithSlashSeparator(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER) + ")"
        ),
        hwb: new RegExp("hwb" + call(NUMBER, PERCENTAGE, PERCENTAGE)),
        hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#([0-9a-fA-F]{6})$/,
        hex8: /^#([0-9a-fA-F]{8})$/
      }), cachedMatchers;
    }
    function parse255(str) {
      let int = parseInt(str, 10);
      return int < 0 ? 0 : int > 255 ? 255 : int;
    }
    function parse360(str) {
      return (parseFloat(str) % 360 + 360) % 360 / 360;
    }
    function parse1(str) {
      let num = parseFloat(str);
      return num < 0 ? 0 : num > 1 ? 255 : Math.round(num * 255);
    }
    function parsePercentage(str) {
      let int = parseFloat(str);
      return int < 0 ? 0 : int > 100 ? 1 : int / 100;
    }
    function normalizeKeyword(name) {
      switch (name) {
        case "transparent":
          return 0;
        case "aliceblue":
          return 4042850303;
        case "antiquewhite":
          return 4209760255;
        case "aqua":
          return 16777215;
        case "aquamarine":
          return 2147472639;
        case "azure":
          return 4043309055;
        case "beige":
          return 4126530815;
        case "bisque":
          return 4293182719;
        case "black":
          return 255;
        case "blanchedalmond":
          return 4293643775;
        case "blue":
          return 65535;
        case "blueviolet":
          return 2318131967;
        case "brown":
          return 2771004159;
        case "burlywood":
          return 3736635391;
        case "burntsienna":
          return 3934150143;
        case "cadetblue":
          return 1604231423;
        case "chartreuse":
          return 2147418367;
        case "chocolate":
          return 3530104575;
        case "coral":
          return 4286533887;
        case "cornflowerblue":
          return 1687547391;
        case "cornsilk":
          return 4294499583;
        case "crimson":
          return 3692313855;
        case "cyan":
          return 16777215;
        case "darkblue":
          return 35839;
        case "darkcyan":
          return 9145343;
        case "darkgoldenrod":
          return 3095792639;
        case "darkgray":
          return 2846468607;
        case "darkgreen":
          return 6553855;
        case "darkgrey":
          return 2846468607;
        case "darkkhaki":
          return 3182914559;
        case "darkmagenta":
          return 2332068863;
        case "darkolivegreen":
          return 1433087999;
        case "darkorange":
          return 4287365375;
        case "darkorchid":
          return 2570243327;
        case "darkred":
          return 2332033279;
        case "darksalmon":
          return 3918953215;
        case "darkseagreen":
          return 2411499519;
        case "darkslateblue":
          return 1211993087;
        case "darkslategray":
          return 793726975;
        case "darkslategrey":
          return 793726975;
        case "darkturquoise":
          return 13554175;
        case "darkviolet":
          return 2483082239;
        case "deeppink":
          return 4279538687;
        case "deepskyblue":
          return 12582911;
        case "dimgray":
          return 1768516095;
        case "dimgrey":
          return 1768516095;
        case "dodgerblue":
          return 512819199;
        case "firebrick":
          return 2988581631;
        case "floralwhite":
          return 4294635775;
        case "forestgreen":
          return 579543807;
        case "fuchsia":
          return 4278255615;
        case "gainsboro":
          return 3705462015;
        case "ghostwhite":
          return 4177068031;
        case "gold":
          return 4292280575;
        case "goldenrod":
          return 3668254975;
        case "gray":
          return 2155905279;
        case "green":
          return 8388863;
        case "greenyellow":
          return 2919182335;
        case "grey":
          return 2155905279;
        case "honeydew":
          return 4043305215;
        case "hotpink":
          return 4285117695;
        case "indianred":
          return 3445382399;
        case "indigo":
          return 1258324735;
        case "ivory":
          return 4294963455;
        case "khaki":
          return 4041641215;
        case "lavender":
          return 3873897215;
        case "lavenderblush":
          return 4293981695;
        case "lawngreen":
          return 2096890111;
        case "lemonchiffon":
          return 4294626815;
        case "lightblue":
          return 2916673279;
        case "lightcoral":
          return 4034953471;
        case "lightcyan":
          return 3774873599;
        case "lightgoldenrodyellow":
          return 4210742015;
        case "lightgray":
          return 3553874943;
        case "lightgreen":
          return 2431553791;
        case "lightgrey":
          return 3553874943;
        case "lightpink":
          return 4290167295;
        case "lightsalmon":
          return 4288707327;
        case "lightseagreen":
          return 548580095;
        case "lightskyblue":
          return 2278488831;
        case "lightslategray":
          return 2005441023;
        case "lightslategrey":
          return 2005441023;
        case "lightsteelblue":
          return 2965692159;
        case "lightyellow":
          return 4294959359;
        case "lime":
          return 16711935;
        case "limegreen":
          return 852308735;
        case "linen":
          return 4210091775;
        case "magenta":
          return 4278255615;
        case "maroon":
          return 2147483903;
        case "mediumaquamarine":
          return 1724754687;
        case "mediumblue":
          return 52735;
        case "mediumorchid":
          return 3126187007;
        case "mediumpurple":
          return 2473647103;
        case "mediumseagreen":
          return 1018393087;
        case "mediumslateblue":
          return 2070474495;
        case "mediumspringgreen":
          return 16423679;
        case "mediumturquoise":
          return 1221709055;
        case "mediumvioletred":
          return 3340076543;
        case "midnightblue":
          return 421097727;
        case "mintcream":
          return 4127193855;
        case "mistyrose":
          return 4293190143;
        case "moccasin":
          return 4293178879;
        case "navajowhite":
          return 4292783615;
        case "navy":
          return 33023;
        case "oldlace":
          return 4260751103;
        case "olive":
          return 2155872511;
        case "olivedrab":
          return 1804477439;
        case "orange":
          return 4289003775;
        case "orangered":
          return 4282712319;
        case "orchid":
          return 3664828159;
        case "palegoldenrod":
          return 4008225535;
        case "palegreen":
          return 2566625535;
        case "paleturquoise":
          return 2951671551;
        case "palevioletred":
          return 3681588223;
        case "papayawhip":
          return 4293907967;
        case "peachpuff":
          return 4292524543;
        case "peru":
          return 3448061951;
        case "pink":
          return 4290825215;
        case "plum":
          return 3718307327;
        case "powderblue":
          return 2967529215;
        case "purple":
          return 2147516671;
        case "rebeccapurple":
          return 1714657791;
        case "red":
          return 4278190335;
        case "rosybrown":
          return 3163525119;
        case "royalblue":
          return 1097458175;
        case "saddlebrown":
          return 2336560127;
        case "salmon":
          return 4202722047;
        case "sandybrown":
          return 4104413439;
        case "seagreen":
          return 780883967;
        case "seashell":
          return 4294307583;
        case "sienna":
          return 2689740287;
        case "silver":
          return 3233857791;
        case "skyblue":
          return 2278484991;
        case "slateblue":
          return 1784335871;
        case "slategray":
          return 1887473919;
        case "slategrey":
          return 1887473919;
        case "snow":
          return 4294638335;
        case "springgreen":
          return 16744447;
        case "steelblue":
          return 1182971135;
        case "tan":
          return 3535047935;
        case "teal":
          return 8421631;
        case "thistle":
          return 3636451583;
        case "tomato":
          return 4284696575;
        case "turquoise":
          return 1088475391;
        case "violet":
          return 4001558271;
        case "wheat":
          return 4125012991;
        case "white":
          return 4294967295;
        case "whitesmoke":
          return 4126537215;
        case "yellow":
          return 4294902015;
        case "yellowgreen":
          return 2597139199;
      }
      return null;
    }
    module2.exports = normalizeColor;
  }
});

// ../normalize-css-color/dist/cjs/index.native.js
var require_index_native7 = __commonJS({
  "../normalize-css-color/dist/cjs/index.native.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create, __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __getProtoOf2 = Object.getPrototypeOf, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: !0 }) : target,
      mod
    )), __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), src_exports2 = {};
    __export2(src_exports2, {
      default: () => src_default,
      normalizeCSSColor: () => normalizeCSSColor,
      rgba: () => rgba2
    });
    module2.exports = __toCommonJS2(src_exports2);
    var normalizeColor = __toESM2(require_normalize_color()), norm = normalizeColor.default || normalizeColor, normalizeCSSColor = norm;
    function rgba2(colorInt) {
      var r = Math.round((colorInt & 4278190080) >>> 24), g = Math.round((colorInt & 16711680) >>> 16), b = Math.round((colorInt & 65280) >>> 8), a = ((colorInt & 255) >>> 0) / 255;
      return {
        r,
        g,
        b,
        a
      };
    }
    var src_default = normalizeCSSColor;
  }
});

// ../web/dist/cjs/helpers/defaultOffset.native.js
var require_defaultOffset_native = __commonJS({
  "../web/dist/cjs/helpers/defaultOffset.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), defaultOffset_exports = {};
    __export2(defaultOffset_exports, {
      defaultOffset: () => defaultOffset
    });
    module2.exports = __toCommonJS2(defaultOffset_exports);
    var defaultOffset = { height: 0, width: 0 };
  }
});

// ../web/dist/cjs/helpers/normalizeColor.native.js
var require_normalizeColor_native = __commonJS({
  "../web/dist/cjs/helpers/normalizeColor.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), normalizeColor_exports = {};
    __export2(normalizeColor_exports, {
      normalizeColor: () => normalizeColor,
      rgba: () => import_normalize_css_color2.rgba
    });
    module2.exports = __toCommonJS2(normalizeColor_exports);
    var import_constants2 = require_index_native2(), import_normalize_css_color = require_index_native7(), import_normalize_css_color2 = require_index_native7(), normalizeColor = (color, opacity) => {
      if (!color)
        return;
      if (color[0] === "$" || color[0] === "v" && color.startsWith("var(") || import_constants2.isWeb && opacity === 1)
        return color;
      let colorProcessed = (0, import_normalize_css_color.normalizeCSSColor)(color);
      if (colorProcessed != null) {
        let { r, g, b, a } = (0, import_normalize_css_color.rgba)(colorProcessed), alpha = (opacity ?? a ?? 1).toFixed(2);
        return `rgba(${r},${g},${b},${alpha})`;
      }
    };
  }
});

// ../web/dist/cjs/helpers/normalizeValueWithProperty.native.js
var require_normalizeValueWithProperty_native = __commonJS({
  "../web/dist/cjs/helpers/normalizeValueWithProperty.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), normalizeValueWithProperty_exports = {};
    __export2(normalizeValueWithProperty_exports, {
      normalizeValueWithProperty: () => normalizeValueWithProperty,
      reverseMapClassNameToValue: () => reverseMapClassNameToValue
    });
    module2.exports = __toCommonJS2(normalizeValueWithProperty_exports);
    var import_constants2 = require_index_native2(), import_helpers = require_index_native4(), import_insertStyleRule = require_insertStyleRule_native(), stylePropsAllPlusTransforms = {
      ...import_helpers.stylePropsAll,
      translateX: !0,
      translateY: !0
    };
    function normalizeValueWithProperty(value, property) {
      if (!import_constants2.isWeb || typeof value == "boolean" || property && property in import_helpers.stylePropsUnitless || property && !(property in stylePropsAllPlusTransforms))
        return value;
      let res = value;
      return value && typeof value == "object" ? value : (typeof value == "number" ? res = `${value}px` : property && (res = `${res}`), res);
    }
    var rcache = {};
    function reverseMapClassNameToValue(key, className) {
      let cssRule = (0, import_insertStyleRule.getAllSelectors)()[className];
      if (rcache[cssRule])
        return rcache[cssRule];
      if (!cssRule)
        return;
      let cssVal = cssRule.replace(/.*:/, "").replace(/;.*/, "").trim(), res;
      return cssVal.startsWith("var(") ? res = cssVal : import_helpers.stylePropsUnitless[key] ? res = +cssVal : cssVal.endsWith("px") ? res = +cssVal.replace("px", "") : res = cssVal, rcache[cssRule] = res, res;
    }
  }
});

// ../web/dist/cjs/helpers/normalizeShadow.native.js
var require_normalizeShadow_native = __commonJS({
  "../web/dist/cjs/helpers/normalizeShadow.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), normalizeShadow_native_exports = {};
    __export2(normalizeShadow_native_exports, {
      normalizeShadow: () => normalizeShadow
    });
    module2.exports = __toCommonJS2(normalizeShadow_native_exports);
    var import_normalize_css_color = require_index_native7(), import_defaultOffset = require_defaultOffset_native(), import_normalizeColor = require_normalizeColor_native(), import_normalizeValueWithProperty = require_normalizeValueWithProperty_native();
    function normalizeShadow({
      shadowColor,
      shadowOffset,
      shadowOpacity,
      shadowRadius
    }) {
      let { height, width } = shadowOffset || import_defaultOffset.defaultOffset, colorStr = String(shadowColor || "black"), val = (0, import_normalize_css_color.normalizeCSSColor)(colorStr);
      if (typeof val != "number")
        throw new Error(`invalid shadow color ${colorStr}`);
      let { r, g, b, a } = (0, import_normalizeColor.rgba)(val);
      return {
        shadowOffset: {
          width: (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(width || 0),
          height: (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(height || 0)
        },
        shadowRadius: (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(shadowRadius || 0),
        shadowColor: `rgb(${r},${g},${b})`,
        shadowOpacity: shadowOpacity ?? a
      };
    }
  }
});

// ../web/dist/cjs/helpers/expandStyles.native.js
var require_expandStyles_native = __commonJS({
  "../web/dist/cjs/helpers/expandStyles.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), expandStyles_exports = {};
    __export2(expandStyles_exports, {
      expandStylesAndRemoveNullishValues: () => expandStylesAndRemoveNullishValues,
      fixStyles: () => fixStyles
    });
    module2.exports = __toCommonJS2(expandStyles_exports);
    var import_constants2 = require_index_native2(), import_expandStyle = require_expandStyle_native(), import_normalizeShadow = require_normalizeShadow_native(), import_normalizeValueWithProperty = require_normalizeValueWithProperty_native(), import_pseudoDescriptors = require_pseudoDescriptors_native();
    function expandStylesAndRemoveNullishValues(style) {
      let res = {};
      for (let key in style) {
        let valIn = style[key];
        if (valIn == null)
          continue;
        if (key in import_pseudoDescriptors.pseudoDescriptors) {
          res[key] = expandStylesAndRemoveNullishValues(valIn);
          continue;
        }
        let val = (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(valIn, key), out = (0, import_expandStyle.expandStyle)(key, val);
        out ? Object.assign(res, Object.fromEntries(out)) : res[key] = val;
      }
      return fixStyles(res), res;
    }
    function fixStyles(style) {
      "elevationAndroid" in style && (style.elevation = style.elevationAndroid, delete style.elevationAndroid), (style.shadowRadius || style.shadowColor || style.shadowOpacity || style.shadowOffset) && Object.assign(style, (0, import_normalizeShadow.normalizeShadow)(style));
      for (let key in borderDefaults)
        key in style && !style[borderDefaults[key]] && (style[borderDefaults[key]] = "solid");
    }
    var nativeStyle = import_constants2.isWeb ? null : "borderStyle", borderDefaults = {
      borderWidth: "borderStyle",
      borderBottomWidth: nativeStyle || "borderBottomStyle",
      borderTopWidth: nativeStyle || "borderTopStyle",
      borderLeftWidth: nativeStyle || "borderLeftStyle",
      borderRightWidth: nativeStyle || "borderRightStyle"
    };
  }
});

// ../web/dist/cjs/helpers/getStylesAtomic.native.js
var require_getStylesAtomic_native = __commonJS({
  "../web/dist/cjs/helpers/getStylesAtomic.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), getStylesAtomic_native_exports = {};
    __export2(getStylesAtomic_native_exports, {
      generateAtomicStyles: () => generateAtomicStyles,
      getAtomicStyle: () => getAtomicStyle,
      getStylesAtomic: () => getStylesAtomic,
      styleToCSS: () => styleToCSS
    });
    module2.exports = __toCommonJS2(getStylesAtomic_native_exports);
    var empty = () => {
      console.warn("no-op native");
    }, getStylesAtomic = empty, generateAtomicStyles = empty, getAtomicStyle = empty, styleToCSS = empty;
  }
});

// ../web/dist/cjs/helpers/getVariantExtras.native.js
var require_getVariantExtras_native = __commonJS({
  "../web/dist/cjs/helpers/getVariantExtras.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), getVariantExtras_exports = {};
    __export2(getVariantExtras_exports, {
      getFontsForLanguage: () => getFontsForLanguage,
      getVariantExtras: () => getVariantExtras
    });
    module2.exports = __toCommonJS2(getVariantExtras_exports);
    var import_createVariable = require_createVariable_native(), import_createProxy = require_createProxy_native();
    function getVariantExtras(styleState) {
      let { curProps, conf, context, theme } = styleState, fonts = conf.fontsParsed;
      context != null && context.language && (fonts = getFontsForLanguage(conf.fontsParsed, context.language));
      let fontFamily = (0, import_createVariable.getVariableValue)(
        styleState.fontFamily || styleState.curProps.fontFamily || styleState.conf.defaultFont
      );
      return {
        fonts,
        tokens: conf.tokensParsed,
        theme,
        fontFamily,
        font: fonts[fontFamily] || fonts[styleState.conf.defaultFont],
        // TODO do this in splitstlye
        // we avoid passing in default props for media queries because that would confuse things like SizableText.size:
        props: (0, import_createProxy.createProxy)(curProps, {
          // handles shorthands
          get(target, key) {
            let shorthand = conf.inverseShorthands[key];
            if (shorthand && Reflect.has(target, shorthand))
              return Reflect.get(target, shorthand);
            if (Reflect.has(target, key))
              return Reflect.get(target, key);
          }
        })
      };
    }
    var fontLanguageCache = /* @__PURE__ */ new WeakMap();
    function getFontsForLanguage(fonts, language) {
      if (fontLanguageCache.has(language))
        return fontLanguageCache.get(language);
      let next = {
        ...fonts,
        ...Object.fromEntries(
          Object.entries(language).map(([name, lang]) => {
            if (lang === "default")
              return [];
            let langKey = `$${name}_${lang}`;
            return [`$${name}`, fonts[langKey]];
          })
        )
      };
      return fontLanguageCache.set(language, next), next;
    }
  }
});

// ../web/dist/cjs/helpers/isObj.native.js
var require_isObj_native = __commonJS({
  "../web/dist/cjs/helpers/isObj.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), isObj_exports = {};
    __export2(isObj_exports, {
      isObj: () => isObj
    });
    module2.exports = __toCommonJS2(isObj_exports);
    var isObj = (x) => x && !Array.isArray(x) && typeof x == "object";
  }
});

// ../web/dist/cjs/helpers/propMapper.native.js
var require_propMapper_native = __commonJS({
  "../web/dist/cjs/helpers/propMapper.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), propMapper_exports = {};
    __export2(propMapper_exports, {
      getFontFamilyFromNameOrVariable: () => getFontFamilyFromNameOrVariable,
      getPropMappedFontFamily: () => getPropMappedFontFamily,
      getTokenForKey: () => getTokenForKey,
      propMapper: () => propMapper
    });
    module2.exports = __toCommonJS2(propMapper_exports);
    var import_constants2 = require_index_native2(), import_helpers = require_index_native4(), import_config = require_config_native(), import_isDevTools = require_isDevTools_native(), import_createVariable = require_createVariable_native(), import_expandStyle = require_expandStyle_native(), import_expandStyles = require_expandStyles_native(), import_getVariantExtras = require_getVariantExtras_native(), import_isObj = require_isObj_native(), import_pseudoDescriptors = require_pseudoDescriptors_native(), propMapper = (key, value, styleStateIn, subPropsIn) => {
      if (!import_constants2.isAndroid && key === "elevationAndroid")
        return;
      let subProps = styleStateIn.styleProps.fallbackProps || subPropsIn, styleState = subProps ? new Proxy(styleStateIn, {
        get(_, k) {
          return k === "curProps" ? subProps : Reflect.get(_, k);
        }
      }) : styleStateIn, { conf, styleProps, fontFamily, staticConfig } = styleState, { variants } = staticConfig;
      if (!styleProps.noExpand && variants && key in variants) {
        styleState.curProps[key] = value;
        let variantValue = resolveVariants(key, value, styleProps, styleState, "");
        if (variantValue)
          return variantValue;
      }
      let shouldReturn = !1;
      if (styleProps.disableExpandShorthands || key in conf.shorthands && (shouldReturn = !0, key = conf.shorthands[key]), value && (value[0] === "$" ? value = getTokenForKey(key, value, styleProps.resolveValues, styleState) : (0, import_createVariable.isVariable)(value) && (value = resolveVariableValue(key, value, styleProps.resolveValues))), shouldReturn || value != null)
        return (styleProps.noExpand ? null : (0, import_expandStyle.expandStyle)(key, value)) || [[key, value]];
    }, resolveVariants = (key, value, styleProps, styleState, parentVariantKey) => {
      let { staticConfig, conf, debug } = styleState, { variants } = staticConfig;
      if (!variants)
        return;
      let variantValue = getVariantDefinition(variants[key], value, conf);
      if (!variantValue) {
        if (process.env.TAMAGUI_WARN_ON_MISSING_VARIANT === "1" && typeof value != "boolean") {
          let name = staticConfig.componentName || "[UnnamedComponent]";
          console.warn(
            `No variant found: ${name} has variant "${key}", but no matching value "${value}"`
          );
        }
        return;
      }
      if (typeof variantValue == "function") {
        let fn = variantValue, extras = (0, import_getVariantExtras.getVariantExtras)(styleState);
        variantValue = fn(value, extras);
      }
      let fontFamilyResult;
      if ((0, import_isObj.isObj)(variantValue)) {
        let fontFamilyUpdate = variantValue.fontFamily || variantValue[conf.inverseShorthands.fontFamily];
        fontFamilyUpdate && (fontFamilyResult = getFontFamilyFromNameOrVariable(fontFamilyUpdate, conf), styleState.fontFamily = fontFamilyResult), variantValue = resolveTokensAndVariants(
          key,
          variantValue,
          styleProps,
          styleState,
          parentVariantKey
        );
      }
      if (variantValue) {
        let expanded = (0, import_expandStyles.expandStylesAndRemoveNullishValues)(variantValue), next = Object.entries(expanded);
        return fontFamilyResult && fontFamilyResult[0] === "$" && fontFamilyCache.set(next, (0, import_createVariable.getVariableValue)(fontFamilyResult)), next;
      }
    };
    function getFontFamilyFromNameOrVariable(input, conf) {
      if ((0, import_createVariable.isVariable)(input)) {
        let val = variableToFontNameCache.get(input);
        if (val)
          return val;
        for (let key in conf.fontsParsed) {
          let familyVariable = conf.fontsParsed[key].family;
          if ((0, import_createVariable.isVariable)(familyVariable) && (variableToFontNameCache.set(familyVariable, key), familyVariable === input))
            return key;
        }
      } else if (typeof input == "string" && input[0] === "$")
        return input;
    }
    var variableToFontNameCache = /* @__PURE__ */ new WeakMap(), fontFamilyCache = /* @__PURE__ */ new WeakMap(), getPropMappedFontFamily = (expanded) => expanded && fontFamilyCache.get(expanded), resolveTokensAndVariants = (key, value, styleProps, styleState, parentVariantKey) => {
      var _a;
      let { conf, staticConfig, debug, theme } = styleState, { variants } = staticConfig, res = {};
      for (let _key in value) {
        let subKey = conf.shorthands[_key] || _key, val = value[_key];
        if (styleProps.noExpand)
          res[subKey] = val;
        else if (variants && subKey in variants) {
          if (styleState.curProps[subKey] = val, parentVariantKey && parentVariantKey === key)
            res[subKey] = // SYNC WITH *1
            val[0] === "$" ? getTokenForKey(subKey, val, styleProps.resolveValues, styleState) : val;
          else {
            let variantOut = resolveVariants(subKey, val, styleProps, styleState, key);
            if (variantOut)
              for (let [key2, val2] of variantOut)
                val2 != null && (key2 in import_pseudoDescriptors.pseudoDescriptors ? (res[key2] ??= {}, Object.assign(res[key2], val2)) : res[key2] = val2);
          }
          continue;
        }
        if ((0, import_createVariable.isVariable)(val)) {
          res[subKey] = resolveVariableValue(subKey, val, styleProps.resolveValues);
          continue;
        }
        if (typeof val == "string") {
          let fVal = (
            // SYNC WITH *1
            val[0] === "$" ? getTokenForKey(subKey, val, styleProps.resolveValues, styleState) : val
          );
          res[subKey] = fVal;
          continue;
        }
        if ((0, import_isObj.isObj)(val)) {
          let subObject = resolveTokensAndVariants(subKey, val, styleProps, styleState, key);
          res[subKey] ??= {}, Object.assign(res[subKey], subObject);
        } else
          res[subKey] = val;
      }
      return res;
    }, tokenCats = ["size", "color", "radius", "space", "zIndex"].map((name) => ({
      name,
      spreadName: `...${name}`
    }));
    function getVariantDefinition(variant, value, conf) {
      if (typeof variant == "function")
        return variant;
      let exact = variant[value];
      if (exact)
        return exact;
      if (value != null) {
        let { tokensParsed } = conf;
        for (let { name, spreadName } of tokenCats)
          if (spreadName in variant && value in tokensParsed[name])
            return variant[spreadName];
        let fontSizeVariant = variant["...fontSize"];
        if (fontSizeVariant && conf.fontSizeTokens.has(value))
          return fontSizeVariant;
      }
      return variant[`:${typeof value}`] || variant["..."];
    }
    var fontShorthand = {
      fontSize: "size",
      fontWeight: "weight"
    }, getTokenForKey = (key, value, resolveAs = "none", styleState) => {
      var _a, _b;
      if (resolveAs === "none")
        return value;
      let { theme, conf = (0, import_config.getConfig)(), context, fontFamily } = styleState, tokensParsed = conf.tokensParsed, valOrVar, hasSet = !1;
      if (theme && value in theme)
        valOrVar = theme[value], hasSet = !0;
      else if (value in conf.specificTokens)
        hasSet = !0, valOrVar = conf.specificTokens[value];
      else {
        switch (key) {
          case "fontFamily": {
            valOrVar = ((_a = (context != null && context.language ? (0, import_getVariantExtras.getFontsForLanguage)(conf.fontsParsed, context.language) : conf.fontsParsed)[value]) == null ? void 0 : _a.family) || value, hasSet = !0;
            break;
          }
          case "fontSize":
          case "lineHeight":
          case "letterSpacing":
          case "fontWeight": {
            let defaultFont = conf.defaultFont || "$body", fam = fontFamily || defaultFont;
            if (fam) {
              let fontsParsed = context != null && context.language ? (0, import_getVariantExtras.getFontsForLanguage)(conf.fontsParsed, context.language) : conf.fontsParsed, font = fontsParsed[fam] || fontsParsed[defaultFont];
              valOrVar = ((_b = font == null ? void 0 : font[fontShorthand[key] || key]) == null ? void 0 : _b[value]) || value, hasSet = !0;
            }
            break;
          }
        }
        for (let cat in import_helpers.tokenCategories)
          if (key in import_helpers.tokenCategories[cat]) {
            let res = tokensParsed[cat][value];
            res != null && (valOrVar = res, hasSet = !0);
          }
        if (!hasSet) {
          let spaceVar = tokensParsed.space[value];
          spaceVar != null && (valOrVar = spaceVar, hasSet = !0);
        }
      }
      return hasSet ? resolveVariableValue(key, valOrVar, resolveAs) : value;
    };
    function resolveVariableValue(key, valOrVar, resolveValues) {
      if (resolveValues === "none")
        return valOrVar;
      if ((0, import_createVariable.isVariable)(valOrVar)) {
        if (resolveValues === "value")
          return valOrVar.val;
        let get = valOrVar.get;
        return key !== "shadowColor" && typeof get == "function" ? get(resolveValues === "web" ? "web" : void 0) : valOrVar.val;
      }
      return valOrVar;
    }
  }
});

// ../web/dist/cjs/helpers/getSplitStyles.native.js
var require_getSplitStyles_native = __commonJS({
  "../web/dist/cjs/helpers/getSplitStyles.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), getSplitStyles_exports = {};
    __export2(getSplitStyles_exports, {
      PROP_SPLIT: () => PROP_SPLIT,
      getSplitStyles: () => getSplitStyles,
      getSubStyle: () => getSubStyle,
      useSplitStyles: () => useSplitStyles
    });
    module2.exports = __toCommonJS2(getSplitStyles_exports);
    var import_constants2 = require_index_native2(), import_helpers = require_index_native4(), import_react = require("react"), import_config = require_config_native(), import_accessibilityDirectMap = require_accessibilityDirectMap_native(), import_isDevTools = require_isDevTools_native(), import_useMedia = require_useMedia_native(), import_createMediaStyle = require_createMediaStyle_native(), import_expandStyles = require_expandStyles_native(), import_getGroupPropParts = require_getGroupPropParts_native(), import_getStylesAtomic = require_getStylesAtomic_native(), import_insertStyleRule = require_insertStyleRule_native(), import_normalizeValueWithProperty = require_normalizeValueWithProperty_native(), import_propMapper = require_propMapper_native(), import_pseudoDescriptors = require_pseudoDescriptors_native(), fontFamilyKey = "fontFamily", IS_STATIC = process.env.IS_STATIC === "is_static", conf, PROP_SPLIT = "-", getSplitStyles = (props, staticConfig, theme, themeName, componentState, styleProps, parentSplitStyles, context, elementType, debug) => {
      var _a, _b, _c, _e, _f, _g;
      conf = conf || (0, import_config.getConfig)();
      let { shorthands } = conf, {
        isHOC,
        isText,
        variants,
        isReactNative,
        inlineProps,
        inlineWhenUnflattened,
        parentStaticConfig,
        acceptsClassName
      } = staticConfig, validStyleProps = isText ? import_helpers.stylePropsText : import_helpers.validStyles, viewProps = {}, mediaState2 = styleProps.mediaState || import_useMedia.mediaState, usedKeys = {}, shouldDoClasses = acceptsClassName && import_constants2.isWeb && !styleProps.noClassNames, rulesToInsert = [], classNames = {}, transforms = {}, pseudos = null, space = props.space, hasMedia = !1, dynamicThemeAccess, pseudoGroups, mediaGroups, style = {}, className = "", mediaStylesSeen = 0, styleState = {
        curProps: Object.assign({}, props),
        classNames,
        conf,
        props,
        styleProps,
        componentState,
        staticConfig,
        style,
        theme,
        usedKeys,
        viewProps,
        context,
        debug
      };
      for (let keyOg in props) {
        let keyInit = keyOg, valInit = props[keyOg];
        if (styleProps.disableExpandShorthands || keyInit in shorthands && (keyInit = shorthands[keyInit]), keyInit === "className" || keyInit in usedKeys || keyInit in skipProps && !isHOC)
          continue;
        let valInitType = typeof valInit;
        if (styleState.curProps[keyInit] = valInit, !import_constants2.isAndroid && keyInit === "elevationAndroid")
          continue;
        if (keyInit === "userSelect")
          keyInit = "selectable", valInit = valInit !== "none";
        else if (keyInit === "role") {
          viewProps.accessibilityRole = import_accessibilityDirectMap.accessibilityWebRoleToNativeRole[valInit];
          continue;
        } else if (keyInit.startsWith("aria-")) {
          if (import_accessibilityDirectMap.webToNativeAccessibilityDirectMap[keyInit]) {
            let nativeA11yProp = import_accessibilityDirectMap.webToNativeAccessibilityDirectMap[keyInit];
            keyInit === "aria-hidden" && (viewProps["aria-hidden"] = valInit), viewProps[nativeA11yProp] = valInit;
            continue;
          } else if (import_accessibilityDirectMap.nativeAccessibilityValue[keyInit]) {
            let field = import_accessibilityDirectMap.nativeAccessibilityValue[keyInit];
            viewProps.accessibilityValue ? viewProps.accessibilityValue[field] = valInit : viewProps.accessibilityValue = {
              [field]: valInit
            };
          } else if (import_accessibilityDirectMap.nativeAccessibilityState[keyInit]) {
            let field = import_accessibilityDirectMap.nativeAccessibilityState[keyInit];
            viewProps.accessibilityState ? viewProps.accessibilityState[field] = valInit : viewProps.accessibilityState = {
              [field]: valInit
            };
          }
          continue;
        } else if (keyInit.startsWith("data-"))
          continue;
        if (keyInit === "dataSet") {
          for (let keyInit2 in valInit)
            viewProps[`data-${hyphenate(keyInit2)}`] = valInit[keyInit2];
          continue;
        }
        if (keyInit[0] === "_" && keyInit.startsWith("_style")) {
          mergeStyleProp(styleState, valInit);
          continue;
        }
        if (!1 && !(keyInit in accessibilityDirectMap))
          switch (keyInit) {
            case "accessibilityRole":
            case "accessibilityLabelledBy":
            case "accessibilityFlowTo":
            case "accessibilityControls":
            case "accessibilityDescribedBy":
            case "accessibilityKeyShortcuts":
            case "accessibilityLiveRegion":
            case "accessibilityReadOnly":
            case "accessibilityRequired":
            default:
          }
        let isValidStyleKeyInit = keyInit in validStyleProps, isShorthand = keyInit in shorthands, isVariant = !isValidStyleKeyInit && variants && keyInit in variants, isStyleLikeKey = isShorthand || isValidStyleKeyInit || isVariant, isPseudo = keyInit in import_helpers.validPseudoKeys, isMedia = !isStyleLikeKey && !isPseudo && (0, import_useMedia.isMediaKey)(keyInit), isMediaOrPseudo = !!(isMedia || isPseudo), isStyleProp = isMediaOrPseudo || isVariant && !styleProps.noExpand || isValidStyleKeyInit || isShorthand;
        if (isStyleProp && (props.asChild === "except-style" || props.asChild === "except-style-web"))
          continue;
        let shouldPassProp = !isStyleProp || // is in parent variants
        isHOC && (parentStaticConfig == null ? void 0 : parentStaticConfig.variants) && keyInit in parentStaticConfig.variants || (inlineProps == null ? void 0 : inlineProps.has(keyInit)), parentVariant = (_a = parentStaticConfig == null ? void 0 : parentStaticConfig.variants) == null ? void 0 : _a[keyInit], isHOCShouldPassThrough = !!(isHOC && (isShorthand || isValidStyleKeyInit || isMediaOrPseudo || parentVariant || keyInit in skipProps));
        if ((shouldPassProp || isHOCShouldPassThrough) && (passDownProp(viewProps, keyInit, valInit, isMediaOrPseudo), !isVariant) || !styleProps.noSkip && keyInit in skipProps)
          continue;
        if (isText && valInit && (keyInit === fontFamilyKey || keyInit === shorthands[fontFamilyKey]) && valInit in conf.fontsParsed && (styleState.fontFamily = valInit), isValidStyleKeyInit && !variants && (valInitType === "number" || valInitType === "string" && valInit[0] !== "$")) {
          style[keyInit] = valInit;
          continue;
        }
        let expanded = isMediaOrPseudo || !isVariant && !isValidStyleKeyInit ? [[keyInit, valInit]] : (0, import_propMapper.propMapper)(keyInit, valInit, styleState), next = (0, import_propMapper.getPropMappedFontFamily)(expanded);
        if (next && (styleState.fontFamily = next), !1)
          try {
          } catch {
          }
        if (expanded) {
          for (let [key, val] of expanded)
            if (!(val == null || key in usedKeys)) {
              if (isPseudo = key in import_helpers.validPseudoKeys, isMedia = !isPseudo && !isValidStyleKeyInit && (0, import_useMedia.isMediaKey)(key), isMediaOrPseudo = !!(isMedia || isPseudo), isVariant = variants && key in variants, (inlineProps != null && inlineProps.has(key) || IS_STATIC && inlineWhenUnflattened != null && inlineWhenUnflattened.has(key)) && (viewProps[key] = props[key] ?? val), styleProps.noExpand && isPseudo || isHOC && (isMediaOrPseudo || ((_b = parentStaticConfig == null ? void 0 : parentStaticConfig.variants) == null ? void 0 : _b[keyInit]))) {
                passDownProp(viewProps, key, val, isMediaOrPseudo);
                continue;
              }
              if (isPseudo) {
                if (!val)
                  continue;
                let pseudoStyleObject = getSubStyle(
                  styleState,
                  key,
                  val,
                  styleProps.noClassNames
                ), descriptor = import_pseudoDescriptors.pseudoDescriptors[key], isEnter = key === "enterStyle", isExit = key === "exitStyle";
                if (!descriptor || isExit && !styleProps.isExiting)
                  continue;
                if ((!shouldDoClasses || IS_STATIC) && (pseudos ||= {}, pseudos[key] ||= {}, IS_STATIC)) {
                  Object.assign(pseudos[key], pseudoStyleObject);
                  continue;
                }
                if (shouldDoClasses && !isEnter && !isExit) {
                  let pseudoStyles = (0, import_getStylesAtomic.generateAtomicStyles)(pseudoStyleObject, descriptor);
                  for (let psuedoStyle of pseudoStyles)
                    `${psuedoStyle.property}${PROP_SPLIT}${descriptor.name}` in usedKeys || psuedoStyle.identifier;
                } else {
                  let descriptorKey = descriptor.stateKey || descriptor.name, pseudoState = componentState[descriptorKey], isDisabled = isExit ? !styleProps.isExiting : !pseudoState;
                  import_constants2.isWeb && !import_constants2.isClient && isEnter && (isDisabled = !1);
                  let importance = descriptor.priority;
                  for (let pkey in pseudoStyleObject) {
                    let val2 = pseudoStyleObject[pkey];
                    if (isDisabled) {
                      if (pkey in animatableDefaults && !(pkey in usedKeys)) {
                        let defaultVal = animatableDefaults[pkey];
                        mergeStyle(styleState, pkey, defaultVal);
                      }
                    } else {
                      let curImportance = usedKeys[pkey] || 0;
                      importance >= curImportance && (pseudos ||= {}, pseudos[key] ||= {}, pseudos[key][pkey] = val2, mergeStyle(styleState, pkey, val2));
                    }
                  }
                  if (!isDisabled)
                    for (let key2 in val) {
                      let k = shorthands[key2] || key2;
                      usedKeys[k] = Math.max(importance, usedKeys[k] || 0);
                    }
                }
                continue;
              } else if (isMedia) {
                if (!val)
                  continue;
                if (isMedia === "platform") {
                  let platform = key.slice(10);
                  if (
                    // supports web, ios, android
                    platform !== import_constants2.currentPlatform && // supports web, native
                    platform !== "native"
                  )
                    continue;
                }
                hasMedia ||= !0;
                let mediaStyle = getSubStyle(
                  styleState,
                  key,
                  val,
                  // TODO try true like pseudo
                  !1
                ), mediaKeyShort = key.slice(1), hasSpace = val.space;
                if ((hasSpace || !shouldDoClasses) && (Array.isArray(hasMedia) || (hasMedia = []), hasMedia.push(mediaKeyShort)), shouldDoClasses) {
                  if (hasSpace && (delete mediaStyle.space, mediaState2[mediaKeyShort])) {
                    let importance = (0, import_useMedia.getMediaImportanceIfMoreImportant)(
                      mediaKeyShort,
                      "space",
                      usedKeys,
                      !0
                    );
                    importance && (space = val.space, usedKeys.space = importance);
                  }
                  let mediaStyles = (0, import_getStylesAtomic.getStylesAtomic)(mediaStyle, debug), priority = mediaStylesSeen;
                  mediaStylesSeen += 1;
                  for (let style2 of mediaStyles) {
                    let out = (0, import_createMediaStyle.createMediaStyle)(
                      style2,
                      mediaKeyShort,
                      import_useMedia.mediaQueryConfig,
                      isMedia,
                      !1,
                      priority
                    );
                    `${style2.property}${PROP_SPLIT}${mediaKeyShort}` in usedKeys || out.identifier;
                  }
                } else {
                  let isThemeMedia = isMedia === "theme", isGroupMedia = isMedia === "group";
                  if (!isThemeMedia && isMedia !== "platform" && !isGroupMedia && !mediaState2[mediaKeyShort])
                    continue;
                  let importanceBump = 0;
                  if (isThemeMedia) {
                    dynamicThemeAccess = !0;
                    let mediaThemeName = mediaKeyShort.slice(6);
                    if (!(themeName === mediaThemeName || themeName.startsWith(mediaThemeName)))
                      continue;
                  } else if (isGroupMedia) {
                    let groupInfo = (0, import_getGroupPropParts.getGroupPropParts)(mediaKeyShort), groupName = groupInfo.name, groupContext = context == null ? void 0 : context.groups.state[groupName];
                    if (!groupContext)
                      continue;
                    let groupPseudoKey = groupInfo.pseudo, groupMediaKey = groupInfo.media, componentGroupState = (_c = componentState.group) == null ? void 0 : _c[groupName];
                    if (groupMediaKey) {
                      mediaGroups ||= /* @__PURE__ */ new Set(), mediaGroups.add(groupMediaKey);
                      let mediaState22 = componentGroupState == null ? void 0 : componentGroupState.media, isActive = mediaState22 == null ? void 0 : mediaState22[groupMediaKey];
                      if (!mediaState22 && groupContext.layout && (isActive = (0, import_useMedia.mediaKeyMatch)(groupMediaKey, groupContext.layout)), !isActive)
                        continue;
                      importanceBump = 2;
                    }
                    if (groupPseudoKey) {
                      pseudoGroups ||= /* @__PURE__ */ new Set(), pseudoGroups.add(groupName);
                      let componentGroupPseudoState = (componentGroupState || // fallback to context initially
                      context.groups.state[groupName]).pseudo;
                      if (!(componentGroupPseudoState != null && componentGroupPseudoState[groupPseudoKey]))
                        continue;
                      importanceBump = import_pseudoDescriptors.pseudoPriorities[groupPseudoKey];
                    }
                  }
                  for (let subKey in mediaStyle) {
                    if (subKey === "space") {
                      space = valInit.space;
                      continue;
                    }
                    (0, import_useMedia.mergeMediaByImportance)(
                      style,
                      mediaKeyShort,
                      subKey,
                      mediaStyle[subKey],
                      usedKeys,
                      mediaState2[mediaKeyShort],
                      importanceBump
                    ), key === fontFamilyKey && (styleState.fontFamily = mediaStyle.fontFamily);
                  }
                }
                continue;
              }
              if (key === "pointerEvents") {
                viewProps[key] = val;
                continue;
              }
              if (
                // is HOC we can just pass through the styles as props
                // this fixes issues where style prop got merged with wrong priority
                !isHOC && (key in validStyleProps || import_constants2.isAndroid && key === "elevation")
              ) {
                mergeStyle(styleState, key, val);
                continue;
              }
              isVariant || (viewProps[key] = val);
            }
          if (!1)
            try {
            } catch {
            }
        }
      }
      if (props.style && mergeStyleProp(styleState, props.style), !styleProps.noNormalize && ((0, import_expandStyles.fixStyles)(style), import_constants2.isWeb && !staticConfig.isReactNative && (0, import_getStylesAtomic.styleToCSS)(style), styleState.transforms && Object.entries(styleState.transforms).sort(([a], [b]) => a.localeCompare(b)).forEach(([key, val]) => {
        mergeTransform(style, key, val, !0);
      }), parentSplitStyles && !shouldDoClasses))
        for (let key in parentSplitStyles.style)
          key in classNames || key in style || (style[key] = parentSplitStyles.style[key]);
      let result = {
        space,
        hasMedia,
        fontFamily: styleState.fontFamily,
        viewProps,
        // @ts-expect-error
        style,
        pseudos,
        classNames,
        rulesToInsert,
        dynamicThemeAccess,
        pseudoGroups,
        mediaGroups
      };
      if (style.fontFamily) {
        let faceInfo = (_e = (0, import_config.getFont)(style.fontFamily)) == null ? void 0 : _e.face;
        if (faceInfo) {
          let overrideFace = (_g = (_f = faceInfo[style.fontWeight]) == null ? void 0 : _f[style.fontStyle || "normal"]) == null ? void 0 : _g.val;
          overrideFace && (style.fontFamily = overrideFace, styleState.fontFamily = overrideFace, delete style.fontWeight, delete style.fontStyle);
        }
      }
      if (className && (classNames.className = className), !1)
        try {
        } catch {
        }
      return result;
    };
    function mergeStyle(styleState, key, val) {
      let { classNames, viewProps, style, usedKeys, styleProps } = styleState;
      if (import_constants2.isWeb && (val == null ? void 0 : val[0]) === "_")
        classNames[key] = val, usedKeys[key] ||= 1;
      else if (key in import_helpers.stylePropsTransform)
        styleState.transforms ||= {}, styleState.transforms[key] = val;
      else {
        let out = import_constants2.isWeb && !styleProps.noNormalize ? (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(val, key) : val;
        key in import_helpers.validStylesOnBaseProps ? viewProps[key] = out : style[key] = out;
      }
    }
    var getSubStyle = (styleState, subKey, styleIn, avoidMergeTransform) => {
      let { staticConfig, props, conf: conf2, styleProps } = styleState, styleOut = {};
      for (let key in styleIn) {
        let val = styleIn[key];
        key = conf2.shorthands[key] || key;
        let expanded = (0, import_propMapper.propMapper)(key, val, styleState, { ...props, ...props[subKey] });
        if (!(!expanded || !staticConfig.isHOC && key in skipProps && !styleProps.noSkip))
          for (let [skey, sval] of expanded)
            !avoidMergeTransform && skey in import_helpers.stylePropsTransform ? mergeTransform(styleOut, skey, sval) : styleOut[skey] = styleProps.noNormalize ? sval : (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(sval, key);
      }
      return styleProps.noNormalize || (0, import_expandStyles.fixStyles)(styleOut), styleOut;
    };
    function mergeStyleProp(styleState, val) {
      if (!val)
        return;
      let styles = [].concat(val).flat();
      for (let cur of styles)
        if (cur)
          if (cur.$$css)
            Object.assign(styleState.classNames, cur);
          else
            for (let key in cur)
              key in styleState.usedKeys || mergeStyle(styleState, key, cur[key]);
    }
    var useInsertEffectCompat = import_constants2.isWeb ? import_react.useInsertionEffect || import_constants2.useIsomorphicLayoutEffect : () => {
    }, useSplitStyles = (...args) => {
      let res = getSplitStyles(...args);
      return useInsertEffectCompat(() => {
        (0, import_insertStyleRule.insertStyleRules)(res.rulesToInsert);
      }, [res.rulesToInsert]), res;
    }, animatableDefaults = {
      opacity: 1,
      scale: 1,
      rotate: "0deg",
      rotateY: "0deg",
      rotateX: "0deg",
      x: 0,
      y: 0
    }, lowercaseHyphenate = (match) => `-${match.toLowerCase()}`, hyphenate = (str) => str.replace(/[A-Z]/g, lowercaseHyphenate), mergeTransform = (obj, key, val, backwards = !1) => {
      typeof obj.transform != "string" && (obj.transform ||= [], obj.transform[backwards ? "unshift" : "push"]({
        [mapTransformKeys[key] || key]: val
      }));
    }, mapTransformKeys = {
      x: "translateX",
      y: "translateY"
    }, skipProps = {
      untilMeasured: 1,
      animation: 1,
      space: 1,
      animateOnly: 1,
      disableClassName: 1,
      debug: 1,
      componentName: 1,
      disableOptimization: 1,
      tag: 1,
      style: 1,
      // handled after loop so pseudos set usedKeys and override it if necessary
      group: 1
    };
    skipProps["data-test-renders"] = 1;
    Object.assign(skipProps, {
      whiteSpace: 1,
      wordWrap: 1,
      textOverflow: 1,
      textDecorationDistance: 1,
      cursor: 1,
      contain: 1,
      boxSizing: 1,
      boxShadow: 1,
      outlineStyle: 1,
      outlineOffset: 1,
      outlineWidth: 1,
      outlineColor: 1
    });
    function passDownProp(viewProps, key, val, shouldMergeObject = !1) {
      if (shouldMergeObject) {
        let next = {
          ...viewProps[key],
          ...val
        };
        delete viewProps[key], viewProps[key] = next;
      } else
        viewProps[key] = val;
    }
  }
});

// ../web/dist/cjs/helpers/mergeProps.native.js
var require_mergeProps_native = __commonJS({
  "../web/dist/cjs/helpers/mergeProps.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), mergeProps_exports = {};
    __export2(mergeProps_exports, {
      mergeProps: () => mergeProps
    });
    module2.exports = __toCommonJS2(mergeProps_exports);
    var import_pseudoDescriptors = require_pseudoDescriptors_native(), mergeProps = (a, b, inverseShorthands) => {
      let out = {};
      for (let key in a)
        mergeProp(out, a, b, key, inverseShorthands);
      if (b)
        for (let key in b)
          mergeProp(out, b, void 0, key, inverseShorthands);
      return out;
    };
    function mergeProp(out, a, b, key, inverseShorthands) {
      let shorthand = (inverseShorthands == null ? void 0 : inverseShorthands[key]) || null;
      if (b && (key in b || shorthand && shorthand in b))
        return;
      let val = a[key];
      if (key in import_pseudoDescriptors.pseudoDescriptors) {
        out[key] = {
          ...out[key],
          ...val
        };
        return;
      }
      out[shorthand || key] = val;
    }
  }
});

// ../web/dist/cjs/helpers/proxyThemeVariables.native.js
var require_proxyThemeVariables_native = __commonJS({
  "../web/dist/cjs/helpers/proxyThemeVariables.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), proxyThemeVariables_exports = {};
    __export2(proxyThemeVariables_exports, {
      proxyThemeVariables: () => proxyThemeVariables
    });
    module2.exports = __toCommonJS2(proxyThemeVariables_exports);
    var import_createProxy = require_createProxy_native();
    function proxyThemeVariables(obj) {
      return (0, import_createProxy.createProxy)(obj || {}, {
        has(target, key) {
          return Reflect.has(target, removeStarting$(key));
        },
        get(target, key) {
          return Reflect.get(target, removeStarting$(key));
        }
      });
    }
    var removeStarting$ = (str) => typeof str == "string" && str[0] === "$" ? str.slice(1) : str;
  }
});

// ../web/dist/cjs/helpers/ThemeManagerContext.native.js
var require_ThemeManagerContext_native = __commonJS({
  "../web/dist/cjs/helpers/ThemeManagerContext.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), ThemeManagerContext_exports = {};
    __export2(ThemeManagerContext_exports, {
      ThemeManagerContext: () => ThemeManagerContext
    });
    module2.exports = __toCommonJS2(ThemeManagerContext_exports);
    var import_react = require("react"), ThemeManagerContext = (0, import_react.createContext)(null);
  }
});

// ../web/dist/cjs/helpers/ThemeManager.native.js
var require_ThemeManager_native = __commonJS({
  "../web/dist/cjs/helpers/ThemeManager.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), ThemeManager_exports = {};
    __export2(ThemeManager_exports, {
      ThemeManager: () => ThemeManager,
      getHasThemeUpdatingProps: () => getHasThemeUpdatingProps,
      getManagers: () => getManagers
    });
    module2.exports = __toCommonJS2(ThemeManager_exports);
    var import_constants2 = require_index_native2(), import_config = require_config_native(), import_constants22 = require_constants_native2(), emptyState = { name: "" };
    function getHasThemeUpdatingProps(props) {
      return props.name || props.componentName || props.inverse || props.reset;
    }
    var uid = 0, ThemeManager = class {
      constructor(props = {}, parentManager) {
        if (this.props = props, this.id = uid++, this.themeListeners = /* @__PURE__ */ new Set(), this.parentManager = null, this.state = emptyState, this._allKeys = null, parentManager === "root") {
          this.updateStateFromProps(props, !1);
          return;
        }
        if (!parentManager)
          throw new Error(
            "No parent manager given, this is likely due to duplicated Tamagui dependencies. Check your lockfile for mis-matched versions. It could also be from an error somewhere else in your stack causing Tamagui to recieve undefined context, you can try putting some ErrorBoundary components around other areas of your app, or a Suspense boundary."
          );
        if (this.parentManager = parentManager, !this.updateStateFromProps(props, !1))
          return parentManager;
      }
      updateStateFromProps(props = this.props || {}, shouldNotify = !0) {
        if (this.props = props, props.forceTheme)
          return this.state.theme = props.forceTheme, this.state.name = props.name || "", !0;
        let nextState = this.getStateIfChanged(props);
        if (nextState)
          return this.updateState(nextState, shouldNotify), nextState;
      }
      updateState(nextState, shouldNotify = !0) {
        this.state = nextState, this._allKeys = null, this._numChangeEventsSent ??= 0, this._numChangeEventsSent++, shouldNotify && queueMicrotask(() => {
          this.notify();
        });
      }
      getStateIfChanged(props = this.props, state = this.state, parentManager = this.parentManager) {
        let _ = this.getState(props, parentManager);
        if (state && state !== emptyState && !_)
          return parentManager == null ? void 0 : parentManager.state;
        if (this.getStateShouldChange(_, state))
          return _;
      }
      getStateShouldChange(nextState, state = this.state) {
        return !(!(nextState != null && nextState.theme) || nextState.theme === (state == null ? void 0 : state.theme));
      }
      getState(props = this.props, parentManager = this.parentManager) {
        return getState(props, parentManager) || (parentManager == null ? void 0 : parentManager.state) || null;
      }
      get allKeys() {
        var _a;
        return this._allKeys ||= /* @__PURE__ */ new Set([
          ...((_a = this.parentManager) == null ? void 0 : _a.allKeys) || [],
          ...Object.keys(this.state.theme || {})
        ]), this._allKeys;
      }
      notify(forced = !1) {
        this.themeListeners.forEach((cb) => cb(this.state.name, this, forced));
      }
      onChangeTheme(cb, debugId) {
        return debugId && (this._listeningIds ??= /* @__PURE__ */ new Set(), this._listeningIds.add(debugId)), this.themeListeners.add(cb), () => {
          this.themeListeners.delete(cb);
        };
      }
    };
    function getState(props, manager) {
      var _a;
      if (props.name && props.reset)
        throw new Error(
          "Cannot reset and set a new name at the same time."
        );
      if (!getHasThemeUpdatingProps(props))
        return null;
      let themes = (0, import_config.getThemes)(), [allManagers, componentManagers] = getManagers(manager), isDirectParentAComponentTheme = !!(manager != null && manager.state.isComponent), startIndex = props.reset && !isDirectParentAComponentTheme ? 1 : 0, baseManager = allManagers[startIndex], parentManager = allManagers[startIndex + 1];
      if (!baseManager && props.reset)
        return console.warn("Cannot reset, no parent theme exists"), null;
      let { componentName } = props, result = null, baseName = (baseManager == null ? void 0 : baseManager.state.name) || "";
      baseManager != null && baseManager.state.isComponent && (baseName = baseName.replace(/_[A-Z][a-z]+/, ""));
      let nextName = props.reset ? baseName : props.name || "", allComponentThemes = componentManagers.map((x) => (x == null ? void 0 : x.state.name) || "");
      isDirectParentAComponentTheme && allComponentThemes.shift();
      let base = baseName.split(import_constants22.THEME_NAME_SEPARATOR), max = base.length, min = props.componentName && !nextName ? max : 0;
      typeof props.debug == "string" && (console.groupCollapsed("ThemeManager.getState()"), console.info({ props, baseName, base, min, max }));
      for (let i = max; i >= min; i--) {
        let prefix = base.slice(0, i).join(import_constants22.THEME_NAME_SEPARATOR);
        props.inverse && (prefix = inverseThemeName(prefix));
        let potentials = [];
        if (prefix && prefix !== baseName && potentials.push(prefix), nextName && potentials.unshift(prefix ? `${prefix}_${nextName}` : nextName), i === 1) {
          let lastSegment = potentials.findIndex((x) => !x.includes("_"));
          lastSegment > 0 && potentials.splice(lastSegment, 0, nextName);
        }
        if (componentName && !props.reset) {
          let componentPotentials = [];
          if (nextName) {
            let beforeSeparator = prefix.slice(0, prefix.indexOf(import_constants22.THEME_NAME_SEPARATOR));
            componentPotentials.push(`${beforeSeparator}_${nextName}_${componentName}`);
          }
          if (componentPotentials.push(`${prefix}_${componentName}`), nextName) {
            let prefixLessOne = base.slice(0, i - 1).join(import_constants22.THEME_NAME_SEPARATOR);
            if (prefixLessOne) {
              let lessSpecific = `${prefixLessOne}_${nextName}_${componentName}`;
              componentPotentials.unshift(lessSpecific);
            }
            let moreSpecific = `${prefix}_${nextName}_${componentName}`;
            componentPotentials.unshift(moreSpecific);
          }
          potentials = [...componentPotentials, ...potentials, ...allComponentThemes];
        }
        let found = potentials.find((t) => t in themes);
        if (typeof props.debug == "string" && console.info(" - ", { found, potentials, baseManager, nextName, baseName, prefix }), found) {
          let names = found.split("_"), [firstName, ...restNames] = names, lastName = names[names.length - 1], isComponent = lastName[0] === lastName[0].toUpperCase(), scheme = firstName === "light" ? "light" : firstName === "dark" ? "dark" : void 0, pre = import_constants22.THEME_CLASSNAME_PREFIX, className = import_constants2.isWeb ? `${pre}sub_theme ${pre}${!scheme || !restNames.length ? firstName : restNames.join("_")}` : "", parentState = (_a = baseManager || parentManager) == null ? void 0 : _a.state, parentName = parentState == null ? void 0 : parentState.name;
          result = {
            name: found,
            parentName,
            theme: themes[found],
            className,
            isComponent,
            scheme
          };
          break;
        }
      }
      return typeof props.debug == "string" && typeof window < "u" && (console.warn("ThemeManager.getState():", { result }), console.trace(), console.groupEnd()), result;
    }
    var inverseThemeName = (themeName) => themeName.startsWith("light") ? themeName.replace(/^light/, "dark") : themeName.replace(/^dark/, "light");
    function getManagers(themeManager) {
      let comp = [], all = [], cur = themeManager;
      for (; cur; )
        all.push(cur), cur.state.isComponent && comp.push(cur), cur = cur.parentManager;
      return [all, comp];
    }
  }
});

// ../web/dist/cjs/hooks/getThemeUnwrapped.native.js
var require_getThemeUnwrapped_native = __commonJS({
  "../web/dist/cjs/hooks/getThemeUnwrapped.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), getThemeUnwrapped_exports = {};
    __export2(getThemeUnwrapped_exports, {
      GetThemeUnwrapped: () => GetThemeUnwrapped,
      getThemeUnwrapped: () => getThemeUnwrapped
    });
    module2.exports = __toCommonJS2(getThemeUnwrapped_exports);
    var getThemeUnwrapped = (theme) => (theme == null ? void 0 : theme[GetThemeUnwrapped]) || theme, GetThemeUnwrapped = Symbol();
  }
});

// ../web/dist/cjs/hooks/useTheme.native.js
var require_useTheme_native = __commonJS({
  "../web/dist/cjs/hooks/useTheme.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), useTheme_exports = {};
    __export2(useTheme_exports, {
      activeThemeManagers: () => activeThemeManagers,
      getThemeProxied: () => getThemeProxied,
      useChangeThemeEffect: () => useChangeThemeEffect,
      useTheme: () => useTheme,
      useThemeWithState: () => useThemeWithState
    });
    module2.exports = __toCommonJS2(useTheme_exports);
    var import_constants2 = require_index_native2(), import_react = require("react"), import_config = require_config_native(), import_createVariable = require_createVariable_native(), import_createProxy = require_createProxy_native(), import_createShallowSetState = require_createShallowSetState_native(), import_ThemeManager = require_ThemeManager_native(), import_ThemeManagerContext = require_ThemeManagerContext_native(), import_getThemeUnwrapped = require_getThemeUnwrapped_native(), emptyProps = { name: null }, cached;
    function getDefaultThemeProxied() {
      if (cached)
        return cached;
      let config = (0, import_config.getConfig)(), name = config.themes.light ? "light" : Object.keys(config.themes)[0], defaultTheme = config.themes[name];
      return cached = getThemeProxied({ theme: defaultTheme, name }), cached;
    }
    var useTheme = (props = emptyProps) => {
      let [_, theme] = useThemeWithState(props);
      return theme || getDefaultThemeProxied();
    }, useThemeWithState = (props) => {
      let keys = (0, import_react.useRef)([]), changedThemeState = useChangeThemeEffect(
        props,
        !1,
        keys.current,
        import_constants2.isServer ? void 0 : () => {
          var _a, _b;
          return ((_a = props.shouldUpdate) == null ? void 0 : _a.call(props)) ?? (keys.current.length > 0 ? !0 : void 0);
        }
      ), { themeManager, state } = changedThemeState;
      state != null && state.theme;
      let themeProxied = (0, import_react.useMemo)(() => !themeManager || !(state != null && state.theme) ? {} : getThemeProxied(state, props.deopt, themeManager, keys.current, props.debug), [state, themeManager, props.deopt, props.debug]);
      return [changedThemeState, themeProxied];
    };
    function getThemeProxied({ theme, name, scheme }, deopt = !1, themeManager, keys, debug) {
      if (!theme)
        return {};
      let config = (0, import_config.getConfig)();
      function track(key) {
        keys && !keys.includes(key) && keys.push(key);
      }
      return (0, import_createProxy.createProxy)(theme, {
        has(_, key) {
          if (Reflect.has(theme, key))
            return !0;
          if (typeof key == "string")
            return key[0] === "$" && (key = key.slice(1)), themeManager == null ? void 0 : themeManager.allKeys.has(key);
        },
        get(_, key) {
          if (key === import_getThemeUnwrapped.GetThemeUnwrapped)
            return theme;
          if (
            // dont ask me, idk why but on hermes you can see that useTheme()[undefined] passes in STRING undefined to proxy
            // if someone is crazy enough to use "undefined" as a theme key then this not working is on them
            key !== "undefined" && typeof key == "string"
          ) {
            let keyString = key[0] === "$" ? key.slice(1) : key, val = theme[keyString];
            if (val && typeof val == "object")
              return new Proxy(val, {
                // when they touch the actual value we only track it
                // if its a variable (web), its ignored!
                get(_2, subkey) {
                  if (subkey === "val")
                    track(keyString);
                  else if (subkey === "get")
                    return (platform) => {
                      let outVal = (0, import_createVariable.getVariable)(val);
                      if (platform !== "web" && import_constants2.isIos && !deopt && config.settings.fastSchemeChange && !someParentIsInversed(themeManager) && scheme) {
                        let oppositeThemeName = name.replace(
                          scheme === "dark" ? "dark" : "light",
                          scheme === "dark" ? "light" : "dark"
                        ), oppositeTheme = config.themes[oppositeThemeName], oppositeVal = (0, import_createVariable.getVariable)(oppositeTheme == null ? void 0 : oppositeTheme[keyString]);
                        if (oppositeVal)
                          return {
                            dynamic: {
                              dark: scheme === "dark" ? outVal : oppositeVal,
                              light: scheme === "light" ? outVal : oppositeVal
                            }
                          };
                      }
                      return track(keyString), outVal;
                    };
                  return Reflect.get(val, subkey);
                }
              });
          }
          return Reflect.get(_, key);
        }
      });
    }
    function someParentIsInversed(manager) {
      {
        let cur = manager;
        for (; cur; ) {
          if (!cur.parentManager)
            return !0;
          if (cur.parentManager.state.scheme !== cur.state.scheme)
            return !1;
          cur = cur.parentManager;
        }
      }
      return !1;
    }
    var activeThemeManagers = /* @__PURE__ */ new Set(), useChangeThemeEffect = (props, isRoot = !1, keys, shouldUpdate) => {
      let { disable } = props, parentManager = (0, import_react.useContext)(import_ThemeManagerContext.ThemeManagerContext);
      if (!isRoot && !parentManager || disable)
        return {
          isNewTheme: !1,
          state: parentManager == null ? void 0 : parentManager.state,
          themeManager: parentManager
        };
      let [themeState, setThemeState] = (0, import_react.useState)(createState), { state, mounted, isNewTheme, themeManager, inversed } = themeState, isInversingOnMount = !!(!themeState.mounted && props.inverse);
      function getShouldUpdateTheme(manager = themeManager, nextState, prevState = state, forceShouldChange = !1) {
        let forceUpdate = shouldUpdate == null ? void 0 : shouldUpdate();
        if (!manager || !forceShouldChange && forceUpdate === !1)
          return;
        let next = nextState || manager.getState(props, parentManager);
        if (forceShouldChange || next && !(forceUpdate !== !0 && !manager.getStateShouldChange(next, prevState)))
          return next;
      }
      if (import_constants2.isServer || (0, import_react.useLayoutEffect)(() => {
        if (!themeManager)
          return;
        if (props.inverse && !mounted) {
          setThemeState((prev) => createState({
            ...prev,
            mounted: !0
          }));
          return;
        }
        isNewTheme && themeManager && activeThemeManagers.add(themeManager), (isNewTheme || getShouldUpdateTheme(themeManager)) && setThemeState(createState);
        let selfListenerDispose = themeManager.onChangeTheme((_a, _b, forced) => {
          forced && setThemeState((prev) => createState(prev, !0));
        }), disposeChangeListener = parentManager == null ? void 0 : parentManager.onChangeTheme((name, manager) => {
          (((shouldUpdate == null ? void 0 : shouldUpdate()) || props.deopt || props["disable-child-theme"]) ?? !!(keys != null && keys.length || isNewTheme)) && setThemeState(createState);
        }, themeManager.id);
        return () => {
          selfListenerDispose(), disposeChangeListener == null || disposeChangeListener(), activeThemeManagers.delete(themeManager);
        };
      }, [
        themeManager,
        parentManager,
        isNewTheme,
        props.componentName,
        props.inverse,
        props.name,
        props.reset,
        mounted
      ]), isInversingOnMount)
        return {
          isNewTheme: !1,
          inversed: !1,
          themeManager: parentManager,
          state: {
            name: "",
            ...parentManager == null ? void 0 : parentManager.state,
            className: ""
          }
        };
      return {
        state,
        isNewTheme,
        inversed,
        themeManager
      };
      function createState(prev, force = !1) {
        if (prev && (shouldUpdate == null ? void 0 : shouldUpdate()) === !1)
          return prev;
        let themeManager2 = parentManager, state2;
        if ((0, import_ThemeManager.getHasThemeUpdatingProps)(props)) {
          let getNewThemeManager = () => new import_ThemeManager.ThemeManager(props, isRoot ? "root" : parentManager);
          if (prev != null && prev.themeManager) {
            themeManager2 = prev.themeManager;
            let forceChange = !!(keys != null && keys.length), next = themeManager2.getState(props, parentManager), nextState = getShouldUpdateTheme(
              themeManager2,
              next,
              prev.state,
              forceChange
            );
            nextState ? (state2 = nextState, prev.isNewTheme ? themeManager2.updateState(nextState) : themeManager2 = getNewThemeManager()) : prev.isNewTheme && parentManager && !next && (themeManager2 = parentManager);
          } else
            themeManager2 = getNewThemeManager(), state2 = { ...themeManager2.state };
        }
        let isNewTheme2 = !!(themeManager2 !== parentManager || props.inverse), mounted2 = props.inverse ? isRoot || (prev == null ? void 0 : prev.mounted) : !0;
        state2 || (isNewTheme2 ? state2 = themeManager2.state : (state2 = parentManager.state, themeManager2 = parentManager));
        let wasInversed = prev == null ? void 0 : prev.inversed, inversed2 = isNewTheme2 && state2.scheme !== (parentManager == null ? void 0 : parentManager.state.scheme) ? !0 : wasInversed ? !1 : null, response = {
          themeManager: themeManager2,
          isNewTheme: isNewTheme2,
          mounted: mounted2,
          inversed: inversed2
        }, shouldReturnPrev = !force && prev && // isEqualShallow uses the second arg as the keys so this should compare without state first...
        (0, import_createShallowSetState.isEqualShallow)(prev, response) && // ... and then compare just the state, because we make a new state obj but is likely the same
        (0, import_createShallowSetState.isEqualShallow)(prev.state, state2);
        return prev && shouldReturnPrev ? prev : (response.state = state2, response);
      }
    };
  }
});

// ../web/dist/cjs/views/ThemeDebug.native.js
var require_ThemeDebug_native = __commonJS({
  "../web/dist/cjs/views/ThemeDebug.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), ThemeDebug_native_exports = {};
    __export2(ThemeDebug_native_exports, {
      ThemeDebug: () => ThemeDebug
    });
    module2.exports = __toCommonJS2(ThemeDebug_native_exports);
    function ThemeDebug({
      themeState,
      themeProps,
      children
    }) {
      return children;
    }
  }
});

// ../web/dist/cjs/views/Theme.native.js
var require_Theme_native = __commonJS({
  "../web/dist/cjs/views/Theme.native.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create, __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __getProtoOf2 = Object.getPrototypeOf, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: !0 }) : target,
      mod
    )), __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), Theme_exports = {};
    __export2(Theme_exports, {
      Theme: () => Theme,
      useThemedChildren: () => useThemedChildren
    });
    module2.exports = __toCommonJS2(Theme_exports);
    var import_constants2 = require_index_native2(), import_react = __toESM2(require("react")), import_createVariable = require_createVariable_native(), import_ThemeManagerContext = require_ThemeManagerContext_native(), import_useTheme = require_useTheme_native(), import_ThemeDebug = require_ThemeDebug_native(), import_jsx_runtime = require("react/jsx-runtime"), Theme = (0, import_react.forwardRef)(function(props, ref) {
      if (props.disable)
        return props.children;
      let isRoot = !!props._isRoot, disableDirectChildTheme = props["disable-child-theme"], themeState = (0, import_useTheme.useChangeThemeEffect)(props, isRoot), children = (0, import_react.useMemo)(() => {
        let children2 = disableDirectChildTheme ? import_react.Children.map(
          props.children,
          (child) => (0, import_react.cloneElement)(child, { "data-disable-theme": !0 })
        ) : props.children;
        if (ref)
          try {
            import_react.default.Children.only(children2), children2 = (0, import_react.cloneElement)(children2, { ref });
          } catch {
          }
        return children2;
      }, [props.children, disableDirectChildTheme]);
      return useThemedChildren(themeState, children, props, isRoot);
    });
    Theme.avoidForwardRef = !0;
    function useThemedChildren(themeState, children, props, isRoot = !1, avoidWrap = !1) {
      let { themeManager, isNewTheme } = themeState, { shallow, forceClassName } = props, hasEverThemed = (0, import_react.useRef)(!1);
      if (isNewTheme && (hasEverThemed.current = !0), !(isNewTheme || props.inverse || hasEverThemed.current || forceClassName || isRoot))
        return children;
      let next = children;
      shallow && themeManager && (next = import_react.Children.toArray(children).map((child) => (0, import_react.isValidElement)(child) ? (0, import_react.cloneElement)(
        child,
        void 0,
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Theme, { name: themeManager.state.parentName, children: child.props.children })
      ) : child));
      let elementsWithContext = themeManager ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ThemeManagerContext.ThemeManagerContext.Provider, { value: themeManager, children: next }) : next;
      return forceClassName === !1 ? elementsWithContext : import_constants2.isWeb && !avoidWrap ? wrapThemeElements({
        children: elementsWithContext,
        themeState,
        forceClassName,
        isRoot
      }) : elementsWithContext;
    }
    function wrapThemeElements({
      children,
      themeState,
      forceClassName,
      isRoot
    }) {
      var _a;
      if (isRoot && forceClassName === !1)
        return children;
      let inverse = themeState.inversed, requiresExtraWrapper = inverse != null || forceClassName;
      if (!themeState.isNewTheme && !requiresExtraWrapper)
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: "_dsp_contents is_Theme", children });
      let { className, style } = getThemeClassNameAndStyle(themeState, isRoot), themedChildren = /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: `${className} _dsp_contents is_Theme`, style, children });
      if (requiresExtraWrapper) {
        let name = ((_a = themeState.state) == null ? void 0 : _a.name) || "", inverseClassName = name.startsWith("light") ? "t_light is_inversed" : name.startsWith("dark") ? "t_dark is_inversed" : "";
        themedChildren = /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: `${inverse ? inverseClassName : ""} _dsp_contents`, children: themedChildren });
      }
      return themedChildren;
    }
    function getThemeClassNameAndStyle(themeState, isRoot = !1) {
      var _a, _b;
      let themeColor = (_a = themeState.state) != null && _a.theme && themeState.isNewTheme ? (0, import_createVariable.variableToString)(themeState.state.theme.color) : "", style = themeColor ? {
        color: themeColor
      } : void 0, className = ((_b = themeState.state) == null ? void 0 : _b.className) || "";
      return isRoot && (className = className.replace("t_sub_theme", "")), { style, className };
    }
  }
});

// ../web/dist/cjs/helpers/themeable.native.js
var require_themeable_native = __commonJS({
  "../web/dist/cjs/helpers/themeable.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), themeable_exports = {};
    __export2(themeable_exports, {
      themeable: () => themeable
    });
    module2.exports = __toCommonJS2(themeable_exports);
    var import_react = require("react"), import_Theme = require_Theme_native(), import_jsx_runtime = require("react/jsx-runtime");
    function themeable(Component, staticConfig) {
      let withTheme = (0, import_react.forwardRef)(function(props, ref) {
        let { themeInverse, theme, componentName, themeReset, ...rest } = props, element = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, { ref, ...rest, "data-disable-theme": !0 });
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_Theme.Theme,
          {
            componentName: componentName || (staticConfig == null ? void 0 : staticConfig.componentName),
            name: theme,
            "disable-child-theme": !0,
            debug: props.debug,
            inverse: themeInverse,
            reset: themeReset,
            children: element
          }
        );
      });
      return withTheme.displayName = `Themed(${(Component == null ? void 0 : Component.displayName) || (Component == null ? void 0 : Component.name) || "Anonymous"})`, withTheme;
    }
  }
});

// ../web/dist/cjs/setupHooks.native.js
var require_setupHooks_native = __commonJS({
  "../web/dist/cjs/setupHooks.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), setupHooks_exports = {};
    __export2(setupHooks_exports, {
      hooks: () => hooks,
      setupHooks: () => setupHooks2
    });
    module2.exports = __toCommonJS2(setupHooks_exports);
    var hooks = {};
    function setupHooks2(next) {
      Object.assign(hooks, next);
    }
  }
});

// ../web/dist/cjs/views/Slot.native.js
var require_Slot_native = __commonJS({
  "../web/dist/cjs/views/Slot.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), Slot_exports = {};
    __export2(Slot_exports, {
      Slot: () => Slot,
      Slottable: () => Slottable
    });
    module2.exports = __toCommonJS2(Slot_exports);
    var import_compose_refs = require_index_native5(), import_constants2 = require_index_native2(), import_helpers = require_index_native4(), import_react = require("react"), import_jsx_runtime = require("react/jsx-runtime"), Slot = (0, import_react.forwardRef)(function(props, forwardedRef) {
      let { children, ...slotProps } = props;
      if ((0, import_react.isValidElement)(children)) {
        let mergedProps = mergeSlotProps(children, slotProps);
        return (0, import_react.cloneElement)(
          children,
          children.type.avoidForwardRef ? mergedProps : {
            ...mergedProps,
            ref: (0, import_compose_refs.composeRefs)(forwardedRef, children.ref)
          }
        );
      }
      return import_react.Children.count(children) > 1 ? import_react.Children.only(null) : null;
    }), Slottable = ({ children }) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children }), pressMap = import_constants2.isWeb ? {
      onPress: "onClick",
      onPressOut: "onMouseUp",
      onPressIn: "onMouseDown"
    } : {};
    function mergeSlotProps(child, slotProps) {
      let childProps = child.props, overrideProps = { ...childProps }, isHTMLChild = typeof child.type == "string";
      if (isHTMLChild)
        for (let key in pressMap)
          key in slotProps && (slotProps[pressMap[key]] = slotProps[key], delete slotProps[key]);
      for (let propName in childProps) {
        let slotPropValue = slotProps[propName], childPropValue = childProps[propName];
        isHTMLChild && propName in pressMap && (propName = pressMap[propName], delete overrideProps[propName]), handleRegex.test(propName) ? overrideProps[propName] = (0, import_helpers.composeEventHandlers)(childPropValue, slotPropValue) : propName === "style" ? overrideProps[propName] = { ...slotPropValue, ...childPropValue } : propName === "className" && (overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(" "));
      }
      return { ...slotProps, ...overrideProps };
    }
    var handleRegex = /^on[A-Z]/;
  }
});

// ../web/dist/cjs/createComponent.native.js
var require_createComponent_native = __commonJS({
  "../web/dist/cjs/createComponent.native.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create, __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __getProtoOf2 = Object.getPrototypeOf, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: !0 }) : target,
      mod
    )), __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), createComponent_exports = {};
    __export2(createComponent_exports, {
      Spacer: () => Spacer,
      Unspaced: () => Unspaced,
      createComponent: () => createComponent,
      mouseUps: () => mouseUps,
      spacedChildren: () => spacedChildren
    });
    module2.exports = __toCommonJS2(createComponent_exports);
    var import_compose_refs = require_index_native5(), import_constants2 = require_index_native2(), import_helpers = require_index_native4(), import_use_did_finish_ssr = require_index_native6(), import_react = __toESM2(require("react")), import_config = require_config_native(), import_constants22 = require_constants_native2(), import_ComponentContext = require_ComponentContext_native(), import_createVariable = require_createVariable_native(), import_defaultComponentState = require_defaultComponentState_native(), import_createShallowSetState = require_createShallowSetState_native(), import_getSplitStyles = require_getSplitStyles_native(), import_mergeProps = require_mergeProps_native(), import_proxyThemeVariables = require_proxyThemeVariables_native(), import_themeable = require_themeable_native(), import_useMedia = require_useMedia_native(), import_useTheme = require_useTheme_native(), import_setupHooks = require_setupHooks_native(), import_Slot = require_Slot_native(), import_Theme = require_Theme_native(), import_ThemeDebug = require_ThemeDebug_native(), import_jsx_runtime = require("react/jsx-runtime"), tamaguiConfig, AnimatedText, AnimatedView, initialTheme, mouseUps = /* @__PURE__ */ new Set();
    if (typeof document < "u") {
      let cancelTouches = () => {
        mouseUps.forEach((x) => x()), mouseUps.clear();
      };
      addEventListener("mouseup", cancelTouches), addEventListener("touchend", cancelTouches), addEventListener("touchcancel", cancelTouches);
    }
    var BaseText, BaseView, hasSetupBaseViews = !1;
    function createComponent(staticConfig) {
      var _a;
      let config = null;
      (0, import_config.onConfiguredOnce)((conf) => {
        if (config = conf, !tamaguiConfig && (tamaguiConfig = conf, !initialTheme)) {
          let next = conf.themes[Object.keys(conf.themes)[0]];
          initialTheme = (0, import_proxyThemeVariables.proxyThemeVariables)(next);
        }
      });
      let {
        Component,
        isText,
        isZStack,
        isHOC,
        validStyles: validStyles2 = {},
        variants = {}
      } = staticConfig, defaultComponentClassName = `is_${staticConfig.componentName}`, defaultProps = staticConfig.defaultProps, component = (0, import_react.forwardRef)((propsIn, forwardedRef) => {
        var _a2, _b, _c, _d, _e, _f, _i, _j, _k, _l, _m, _n, _o;
        if (!hasSetupBaseViews) {
          hasSetupBaseViews = !0;
          let baseViews = (_b = (_a2 = import_setupHooks.hooks).getBaseViews) == null ? void 0 : _b.call(_a2);
          baseViews && (BaseText = baseViews.Text, BaseView = baseViews.View);
        }
        propsIn["data-test-renders"] && (propsIn["data-test-renders"].current ??= 0, propsIn["data-test-renders"].current += 1);
        let componentContext = (0, import_react.useContext)(import_ComponentContext.ComponentContext), styledContextProps, overriddenContextProps, contextValue, { context } = staticConfig;
        if (context) {
          contextValue = (0, import_react.useContext)(context);
          let { inverseShorthands } = (0, import_config.getConfig)();
          for (let key in context.props) {
            let propVal = (
              // because its after default props but before props this annoying amount of checks
              propsIn[key] ?? propsIn[inverseShorthands[key]] ?? (defaultProps == null ? void 0 : defaultProps[key]) ?? (defaultProps == null ? void 0 : defaultProps[inverseShorthands[key]])
            );
            propVal === void 0 ? contextValue && (key in validStyles2 || key in variants) && (styledContextProps ||= {}, styledContextProps[key] = contextValue[key]) : (overriddenContextProps ||= {}, overriddenContextProps[key] = propVal);
          }
        }
        let curDefaultProps = styledContextProps ? { ...defaultProps, ...styledContextProps } : defaultProps, props = propsIn;
        curDefaultProps && (props = (0, import_mergeProps.mergeProps)(curDefaultProps, propsIn));
        let debugProp = props.debug, componentName = props.componentName || staticConfig.componentName, isHydrated = config != null && config.disableSSR ? !0 : (0, import_use_did_finish_ssr.useDidFinishSSR)(), stateRef = (0, import_react.useRef)(
          void 0
        );
        stateRef.current ||= {};
        let hostRef = (0, import_react.useRef)(null), animationsConfig = componentContext.animationDriver, useAnimations = animationsConfig == null ? void 0 : animationsConfig.useAnimations, hasAnimationProp = !!(props.animation || props.style && hasAnimatedStyleValue(props.style)), supportsCSSVars = animationsConfig == null ? void 0 : animationsConfig.supportsCSSVars, willBeAnimated = (() => {
          if (import_constants2.isServer && !supportsCSSVars)
            return !1;
          let curState = stateRef.current;
          return !!(hasAnimationProp && !isHOC && useAnimations || curState.hasAnimated);
        })(), usePresence = animationsConfig == null ? void 0 : animationsConfig.usePresence, presence = willBeAnimated && (usePresence == null ? void 0 : usePresence()) || null, hasEnterStyle = !!props.enterStyle, needsMount = !!((!import_constants2.isWeb || import_constants2.isClient) && willBeAnimated), initialState = willBeAnimated ? supportsCSSVars ? import_defaultComponentState.defaultComponentStateShouldEnter : import_defaultComponentState.defaultComponentState : import_defaultComponentState.defaultComponentStateMounted, states = (0, import_react.useState)(initialState), state = propsIn.forceStyle ? { ...states[0], [propsIn.forceStyle]: !0 } : states[0], setState = states[1], setStateShallow = (0, import_createShallowSetState.createShallowSetState)(setState), groupName = props.group, groupClassName = groupName ? `t_group_${props.group}` : "";
        if (groupName) {
          let groupContextState = componentContext.groups.state, og = setStateShallow;
          setStateShallow = (state2) => {
            og(state2), componentContext.groups.emit(groupName, {
              pseudo: state2
            });
            let next = {
              ...groupContextState[groupName],
              ...state2
            };
            groupContextState[groupName] = next;
          };
        }
        let isAnimated = willBeAnimated;
        willBeAnimated && !supportsCSSVars && !presence && isHydrated && (import_constants2.isServer || state.unmounted === !0) && (isAnimated = !1), willBeAnimated && !stateRef.current.hasAnimated && (stateRef.current.hasAnimated = !0);
        let componentClassName = props.asChild ? "" : props.componentName ? `is_${props.componentName}` : defaultComponentClassName, hasTextAncestor = !!(import_constants2.isWeb && isText && componentContext.inText), isDisabled = props.disabled ?? ((_c = props.accessibilityState) == null ? void 0 : _c.disabled), element = import_constants2.isWeb && (!Component || typeof Component == "string") && props.tag || Component, BaseTextComponent = BaseText || element || "span", BaseViewComponent = BaseView || element || (hasTextAncestor ? "span" : "div");
        AnimatedText = animationsConfig ? animationsConfig.Text : BaseTextComponent, AnimatedView = animationsConfig ? animationsConfig.View : BaseViewComponent;
        let elementType = isText ? (isAnimated ? AnimatedText : null) || BaseTextComponent : (isAnimated ? AnimatedView : null) || BaseViewComponent;
        if (isAnimated && presence) {
          let presenceState = presence[2];
          if (presenceState) {
            let isEntering = state.unmounted, isExiting2 = !presenceState.isPresent, enterExitVariant = presenceState.enterExitVariant, enterVariant = enterExitVariant ?? presenceState.enterVariant, exitVariant = enterExitVariant ?? presenceState.exitVariant;
            isEntering && enterVariant ? props[enterVariant] = !0 : isExiting2 && exitVariant && (props[exitVariant] = !enterExitVariant);
          }
        }
        let isAnimatedReactNative = hasAnimationProp && (animationsConfig == null ? void 0 : animationsConfig.isReactNative), isReactNative = !!(staticConfig.isReactNative || isAnimatedReactNative), shouldAvoidClasses = !!(!import_constants2.isWeb || isAnimated || !staticConfig.acceptsClassName || propsIn.disableClassName), shouldForcePseudo = !!propsIn.forceStyle, noClassNames = shouldAvoidClasses || shouldForcePseudo, disableThemeProp = !1, disableTheme = disableThemeProp && !willBeAnimated || isHOC;
        props.themeShallow && (stateRef.current.themeShallow = !0);
        let themeStateProps = {
          name: props.theme,
          componentName,
          disable: disableTheme,
          shallow: stateRef.current.themeShallow,
          // if this returns undefined it defers to the keys tracking, so its only used to force either updates or no updates
          shouldUpdate: () => (
            // when we use $theme- styles we need to force it to re-render on theme changes (this can be optimized likely)
            stateRef.current.isListeningToTheme
          ),
          debug: debugProp
        };
        themeStateProps.deopt = willBeAnimated;
        let isExiting = !state.unmounted && (presence == null ? void 0 : presence[0]) === !1, [themeState, theme] = (0, import_useTheme.useThemeWithState)(themeStateProps);
        elementType = Component || elementType;
        let isStringElement = typeof elementType == "string", mediaState2 = (0, import_useMedia.useMedia)(stateRef, componentContext);
        (0, import_createVariable.setDidGetVariableValue)(!1);
        let resolveValues = (
          // if HOC + mounted + has animation prop, resolve as value so it passes non-variable to child
          isAnimated && !supportsCSSVars || isHOC && state.unmounted == !1 && hasAnimationProp ? "value" : "auto"
        ), keepStyleSSR = willBeAnimated && (animationsConfig == null ? void 0 : animationsConfig.keepStyleSSR), styleProps = {
          mediaState: mediaState2,
          noClassNames,
          resolveValues,
          isExiting,
          isAnimated,
          keepStyleSSR
        }, splitStyles = (0, import_getSplitStyles.useSplitStyles)(
          props,
          staticConfig,
          theme,
          ((_d = themeState == null ? void 0 : themeState.state) == null ? void 0 : _d.name) || "",
          state,
          styleProps,
          null,
          componentContext,
          elementType,
          debugProp
        );
        props.group && props.untilMeasured === "hide" && !stateRef.current.hasMeasured && (splitStyles.style.opacity = 0), stateRef.current.isListeningToTheme = splitStyles.dynamicThemeAccess;
        let isMediaArray = splitStyles.hasMedia && Array.isArray(splitStyles.hasMedia), shouldListenForMedia = (0, import_createVariable.didGetVariableValue)() || isMediaArray || noClassNames && splitStyles.hasMedia === !0, mediaListeningKeys = isMediaArray ? splitStyles.hasMedia : null;
        (0, import_useMedia.setMediaShouldUpdate)(stateRef, {
          enabled: shouldListenForMedia,
          keys: mediaListeningKeys
        });
        let isAnimatedReactNativeWeb = hasAnimationProp && isReactNative, {
          viewProps: viewPropsIn,
          pseudos,
          style: splitStylesStyle,
          classNames,
          space
        } = splitStyles, propsWithAnimation = props, animationStyles;
        if (willBeAnimated && useAnimations && !isHOC) {
          let animations = useAnimations({
            props: propsWithAnimation,
            // if hydrating, send empty style
            style: splitStylesStyle,
            // style: splitStylesStyle,
            presence,
            componentState: state,
            styleProps,
            theme: (_e = themeState.state) == null ? void 0 : _e.theme,
            pseudos: pseudos || null,
            hostRef,
            staticConfig
          });
          isAnimated && animations && (animationStyles = animations.style);
        }
        let {
          asChild,
          children,
          themeShallow,
          spaceDirection: _spaceDirection,
          disabled: disabledProp,
          onPress,
          onLongPress,
          onPressIn,
          onPressOut,
          onHoverIn,
          onHoverOut,
          onMouseUp,
          onMouseDown,
          onMouseEnter,
          onMouseLeave,
          onFocus,
          onBlur,
          separator,
          // ignore from here on out
          forceStyle: _forceStyle,
          // @ts-ignore  for next/link compat etc
          onClick,
          theme: _themeProp,
          // @ts-ignore
          defaultVariants,
          ...nonTamaguiProps
        } = viewPropsIn, disabled = ((_f = props.accessibilityState) == null ? void 0 : _f.disabled) || // @ts-expect-error (comes from core)
        props.accessibilityDisabled, viewProps = nonTamaguiProps;
        isHOC && _themeProp && (viewProps.theme = _themeProp), groupName && (nonTamaguiProps.onLayout = (0, import_helpers.composeEventHandlers)(
          nonTamaguiProps.onLayout,
          (e) => {
            componentContext.groups.emit(groupName, {
              layout: e.nativeEvent.layout
            }), !stateRef.current.hasMeasured && props.untilMeasured === "hide" && setState((prev) => ({ ...prev })), stateRef.current.hasMeasured = !0;
          }
        )), viewProps = nonTamaguiProps;
        let composedRef = (0, import_compose_refs.useComposedRefs)(hostRef, forwardedRef);
        viewProps.ref = composedRef;
        let unPress = () => setStateShallow({
          press: !1,
          pressIn: !1
        }), shouldSetMounted = needsMount && state.unmounted, { pseudoGroups, mediaGroups } = splitStyles;
        (0, import_react.useEffect)(() => {
          if (shouldSetMounted) {
            let unmounted = state.unmounted === !0 && hasEnterStyle ? "should-enter" : !1;
            setStateShallow({
              unmounted
            });
            return;
          }
          let disposeGroupsListener;
          if (pseudoGroups || mediaGroups) {
            let current = {
              pseudo: {},
              media: {}
            };
            disposeGroupsListener = componentContext.groups.subscribe(
              (name, { layout, pseudo }) => {
                if (pseudo && pseudoGroups != null && pseudoGroups.has(name))
                  Object.assign(current.pseudo, pseudo), persist();
                else if (layout && mediaGroups) {
                  let mediaState22 = getMediaState(mediaGroups, layout), next = (0, import_createShallowSetState.mergeIfNotShallowEqual)(current.media, mediaState22);
                  next !== current.media && (Object.assign(current.media, next), persist());
                }
                function persist() {
                  setStateShallow({
                    // force it to be referentially different so it always updates
                    group: {
                      ...state.group,
                      [name]: current
                    }
                  });
                }
              }
            );
          }
          return () => {
            disposeGroupsListener == null || disposeGroupsListener(), mouseUps.delete(unPress);
          };
        }, [
          shouldSetMounted,
          state.unmounted,
          pseudoGroups ? Object.keys([...pseudoGroups]).join("") : 0,
          mediaGroups ? Object.keys([...mediaGroups]).join("") : 0
        ]);
        let avoidAnimationStyle = keepStyleSSR && state.unmounted === !0, fontFamily = isText ? splitStyles.fontFamily || ((_i = staticConfig.defaultProps) == null ? void 0 : _i.fontFamily) : null;
        fontFamily && fontFamily[0] === "$" && (fontFamily = fontFamily.slice(1));
        let fontFamilyClassName = fontFamily ? `font_${fontFamily}` : "", style = avoidAnimationStyle ? splitStyles.style : animationStyles || splitStyles.style, className;
        viewProps.style = style;
        let runtimePressStyle = !disabled && noClassNames && (pseudos == null ? void 0 : pseudos.pressStyle), runtimeFocusStyle = !disabled && noClassNames && (pseudos == null ? void 0 : pseudos.focusStyle), attachFocus = !!(runtimePressStyle || onFocus || onBlur), attachPress = !!(groupName || runtimePressStyle || onPress || onPressOut || onPressIn || onLongPress || onClick), runtimeHoverStyle = !disabled && noClassNames && (pseudos == null ? void 0 : pseudos.hoverStyle), needsHoverState = runtimeHoverStyle || onHoverIn || onHoverOut, isHoverable = import_constants2.isWeb && !!(groupName || needsHoverState || onMouseEnter || onMouseLeave), handlesPressEvents = !(import_constants2.isWeb || asChild), events = !!(attachFocus || attachPress || isHoverable || runtimePressStyle || runtimeHoverStyle || runtimeFocusStyle) && !isDisabled && !props.asChild ? {
          onPressOut: attachPress ? (e) => {
            unPress(), onPressOut == null || onPressOut(e), onMouseUp == null || onMouseUp(e);
          } : void 0,
          ...(isHoverable || attachPress) && {
            onMouseEnter: (e) => {
              let next = {};
              needsHoverState && (next.hover = !0), runtimePressStyle && state.pressIn && (next.press = !0), setStateShallow(next), onHoverIn == null || onHoverIn(e), onMouseEnter == null || onMouseEnter(e);
            },
            onMouseLeave: (e) => {
              let next = {};
              mouseUps.add(unPress), needsHoverState && (next.hover = !1), runtimePressStyle && state.pressIn && (next.press = !1, next.pressIn = !1), setStateShallow(next), onHoverOut == null || onHoverOut(e), onMouseLeave == null || onMouseLeave(e);
            }
          },
          onPressIn: attachPress ? (e) => {
            runtimePressStyle && setStateShallow({
              press: !0,
              pressIn: !0
            }), onPressIn == null || onPressIn(e), onMouseDown == null || onMouseDown(e), import_constants2.isWeb && mouseUps.add(unPress);
          } : void 0,
          onPress: attachPress ? (e) => {
            unPress(), import_constants2.isWeb && (onClick == null || onClick(e)), onPress == null || onPress(e);
          } : void 0,
          ...attachPress && onLongPress && {
            onLongPress: (e) => {
              unPress(), onLongPress == null || onLongPress(e);
            }
          },
          ...attachFocus && {
            onFocus: (e) => {
              setStateShallow({
                focus: !0
              }), onFocus == null || onFocus(e);
            },
            onBlur: (e) => {
              setStateShallow({
                focus: !1
              }), onBlur == null || onBlur(e);
            }
          }
        } : null;
        events && !asChild && Object.assign(events, {
          cancelable: !viewProps.rejectResponderTermination,
          disabled: isDisabled,
          hitSlop: viewProps.hitSlop,
          delayLongPress: viewProps.delayLongPress,
          delayPressIn: viewProps.delayPressIn,
          delayPressOut: viewProps.delayPressOut,
          focusable: viewProps.focusable ?? !0,
          minPressDuration: 0
        }), (_k = (_j = import_setupHooks.hooks).useEvents) == null || _k.call(_j, viewProps, events, splitStyles, setStateShallow, staticConfig);
        let direction = props.spaceDirection || "both", content = !children || asChild ? children : spacedChildren({
          separator,
          children,
          space,
          direction,
          isZStack,
          debug: debugProp
        });
        asChild && (elementType = import_Slot.Slot, Object.assign(viewProps, { onPress, onLongPress })), content = (0, import_react.createElement)(elementType, viewProps, content), import_setupHooks.hooks.useChildren && (content = (_m = (_l = import_setupHooks.hooks).useChildren) == null ? void 0 : _m.call(_l, content, viewProps, events, staticConfig));
        let subGroupContext = (0, import_react.useMemo)(() => {
          if (groupName)
            return {
              ...componentContext.groups,
              // change reference so as we mutate it doesn't affect siblings etc
              state: {
                ...componentContext.groups.state,
                [groupName]: {
                  pseudo: initialState,
                  // capture just initial width and height if they exist
                  // will have top, left, width, height (not x, y)
                  layout: {
                    width: fromPx(splitStyles.style.width),
                    height: fromPx(splitStyles.style.height)
                  }
                }
              }
            };
        }, [groupName]);
        if (groupName && subGroupContext && (content = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ComponentContext.ComponentContext.Provider, { groups: subGroupContext, children: content })), content = disableThemeProp ? content : (0, import_Theme.useThemedChildren)(themeState, content, themeStateProps, !1), staticConfig.context) {
          let contextProps = staticConfig.context.props;
          for (let key in contextProps)
            (key in style || key in viewProps) && (overriddenContextProps ||= {}, overriddenContextProps[key] = style[key] ?? viewProps[key]);
        }
        if (overriddenContextProps) {
          let Provider = staticConfig.context.Provider;
          content = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Provider, { ...contextValue, ...overriddenContextProps, children: content });
        }
        if (!1)
          try {
          } catch {
          }
        return content;
      });
      staticConfig.componentName && (component.displayName = staticConfig.componentName);
      let res = component;
      (process.env.TAMAGUI_FORCE_MEMO || staticConfig.memo) && (res = (0, import_react.memo)(res)), res.staticConfig = staticConfig;
      function extendStyledConfig(extended) {
        return {
          ...staticConfig,
          ...extended,
          neverFlatten: !0,
          isHOC: !0,
          isStyledHOC: !1
        };
      }
      function extractable(Component2, extended) {
        return Component2.staticConfig = extendStyledConfig(extended), Component2.styleable = styleable, Component2;
      }
      function styleable(Component2, options) {
        var _a2;
        let ComponentForwardedRef = ((_a2 = Component2.render) == null ? void 0 : _a2.length) === 2 ? Component2 : (
          // memo because theme changes otherwise would always re-render
          (0, import_react.memo)((0, import_react.forwardRef)(Component2))
        ), extendedConfig = extendStyledConfig(options == null ? void 0 : options.staticConfig), out = options != null && options.disableTheme ? ComponentForwardedRef : (0, import_themeable.themeable)(ComponentForwardedRef, extendedConfig);
        return out.staticConfig = extendedConfig, out.styleable = styleable, out;
      }
      return res.extractable = extractable, res.styleable = styleable, res;
    }
    function Unspaced(props) {
      return props.children;
    }
    Unspaced.isUnspaced = !0;
    var getSpacerSize = (size, { tokens }) => {
      size = size === !0 ? "$true" : size;
      let sizePx = tokens.space[size] ?? size;
      return {
        width: sizePx,
        height: sizePx,
        minWidth: sizePx,
        minHeight: sizePx
      };
    }, Spacer = createComponent({
      acceptsClassName: !0,
      memo: !0,
      componentName: "Spacer",
      validStyles: import_helpers.validStyles,
      defaultProps: {
        ...import_constants22.stackDefaultStyles,
        // avoid nesting issues
        tag: "span",
        size: !0,
        pointerEvents: "none"
      },
      variants: {
        size: {
          "...": getSpacerSize
        },
        flex: {
          true: {
            flexGrow: 1
          }
        },
        direction: {
          horizontal: {
            height: 0,
            minHeight: 0
          },
          vertical: {
            width: 0,
            minWidth: 0
          },
          both: {}
        }
      }
    });
    function spacedChildren(props) {
      var _a, _b, _c;
      let { isZStack, children, space, direction, spaceFlex, separator } = props, hasSpace = !!(space || spaceFlex), hasSeparator = separator != null;
      if (!(hasSpace || hasSeparator || isZStack))
        return children;
      let childrenList = import_react.Children.toArray(children);
      if (childrenList.length <= 1 && !isZStack && !((_b = (_a = childrenList[0]) == null ? void 0 : _a.type) != null && _b.shouldForwardSpace))
        return childrenList;
      let final = [];
      for (let [index, child] of childrenList.entries()) {
        let isEmpty = child == null || Array.isArray(child) && child.length === 0;
        if (!isEmpty && import_react.default.isValidElement(child) && (_c = child.type) != null && _c.shouldForwardSpace && (child = import_react.default.cloneElement(child, {
          space,
          spaceFlex,
          separator,
          key: child.key
        })), isEmpty || !child || child.key && !isZStack ? final.push(child) : final.push(
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react.Fragment, { children: isZStack ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AbsoluteFill, { children: child }) : child }, index)
        ), isUnspaced(child) && index === 0 || isZStack)
          continue;
        let next = childrenList[index + 1];
        next && !isUnspaced(next) && (separator ? (hasSpace && final.push(
          createSpacer({
            key: `_${index}_00tmgui`,
            direction,
            space,
            spaceFlex
          })
        ), final.push(
          import_react.default.isValidElement(separator) ? import_react.default.cloneElement(separator, { key: `sep_${index}` }) : separator
        ), hasSpace && final.push(
          createSpacer({
            key: `_${index}01tmgui`,
            direction,
            space,
            spaceFlex
          })
        )) : final.push(
          createSpacer({
            key: `_${index}02tmgui`,
            direction,
            space,
            spaceFlex
          })
        ));
      }
      return final;
    }
    function createSpacer({ key, direction, space, spaceFlex }) {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        Spacer,
        {
          size: space,
          direction,
          ...typeof spaceFlex < "u" && {
            flex: spaceFlex === !0 ? 1 : spaceFlex === !1 ? 0 : spaceFlex
          }
        },
        key
      );
    }
    function isUnspaced(child) {
      let t = child == null ? void 0 : child.type;
      return (t == null ? void 0 : t.isVisuallyHidden) || (t == null ? void 0 : t.isUnspaced);
    }
    var AbsoluteFill = createComponent({
      defaultProps: {
        ...import_constants22.stackDefaultStyles,
        flexDirection: "column",
        position: "absolute",
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        pointerEvents: "box-none"
      }
    });
    function hasAnimatedStyleValue(style) {
      return Object.keys(style).some((k) => {
        let val = style[k];
        return val && typeof val == "object" && "_animation" in val;
      });
    }
    function getMediaState(mediaGroups, layout) {
      return Object.fromEntries(
        [...mediaGroups].map((mediaKey) => [mediaKey, (0, import_useMedia.mediaKeyMatch)(mediaKey, layout)])
      );
    }
    var fromPx = (val) => typeof val != "string" ? val : +val.replace("px", "");
  }
});

// ../web/dist/cjs/createShorthands.native.js
var require_createShorthands_native = __commonJS({
  "../web/dist/cjs/createShorthands.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), createShorthands_exports = {};
    __export2(createShorthands_exports, {
      createShorthands: () => createShorthands
    });
    module2.exports = __toCommonJS2(createShorthands_exports);
    function createShorthands(shorthands) {
      return Object.freeze(shorthands);
    }
  }
});

// ../web/dist/cjs/createTheme.native.js
var require_createTheme_native = __commonJS({
  "../web/dist/cjs/createTheme.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), createTheme_exports = {};
    __export2(createTheme_exports, {
      createTheme: () => createTheme
    });
    module2.exports = __toCommonJS2(createTheme_exports);
    var createTheme = (theme) => theme;
  }
});

// ../web/dist/cjs/createVariables.native.js
var require_createVariables_native = __commonJS({
  "../web/dist/cjs/createVariables.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), createVariables_exports = {};
    __export2(createVariables_exports, {
      createVariables: () => createVariables
    });
    module2.exports = __toCommonJS2(createVariables_exports);
    var import_helpers = require_index_native4(), import_createVariable = require_createVariable_native(), cache = /* @__PURE__ */ new WeakMap(), createVariables = (tokens, parentPath = "", isFont = !1) => {
      if (cache.has(tokens))
        return tokens;
      let res = {}, i = 0;
      for (let keyIn in tokens) {
        i++;
        let val = tokens[keyIn], isPrefixed = keyIn[0] === "$", keyWithPrefix = isPrefixed ? keyIn : `$${keyIn}`, key = isPrefixed ? keyWithPrefix.slice(1) : keyIn;
        if ((0, import_createVariable.isVariable)(val)) {
          res[key] = val;
          continue;
        }
        let niceKey = (0, import_helpers.simpleHash)(key), name = isFont ? niceKey.slice(0, 2) : i;
        if (name = parentPath ? `${parentPath}-${name}` : niceKey, val && typeof val == "object") {
          res[key] = createVariables(
            tokens[key],
            name,
            !1
            /* note: don't pass isFont down, we want to avoid it past the first level */
          );
          continue;
        }
        let finalValue = (0, import_createVariable.isVariable)(val) ? val : (0, import_createVariable.createVariable)({ val, name, key: keyWithPrefix });
        res[key] = finalValue;
      }
      return cache.set(res, !0), res;
    };
  }
});

// ../web/dist/cjs/helpers/getThemeCSSRules.native.js
var require_getThemeCSSRules_native = __commonJS({
  "../web/dist/cjs/helpers/getThemeCSSRules.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), getThemeCSSRules_native_exports = {};
    __export2(getThemeCSSRules_native_exports, {
      getThemeCSSRules: () => getThemeCSSRules
    });
    module2.exports = __toCommonJS2(getThemeCSSRules_native_exports);
    function getThemeCSSRules() {
      return [];
    }
  }
});

// ../web/dist/cjs/helpers/proxyThemeToParents.native.js
var require_proxyThemeToParents_native = __commonJS({
  "../web/dist/cjs/helpers/proxyThemeToParents.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), proxyThemeToParents_exports = {};
    __export2(proxyThemeToParents_exports, {
      proxyThemeToParents: () => proxyThemeToParents,
      proxyThemesToParents: () => proxyThemesToParents,
      themesRaw: () => themesRaw
    });
    module2.exports = __toCommonJS2(proxyThemeToParents_exports);
    var import_config = require_config_native(), import_getThemeUnwrapped = require_getThemeUnwrapped_native(), themesRaw = {};
    function proxyThemesToParents(dedupedThemes) {
      for (let { names, theme } of dedupedThemes)
        for (let name of names)
          themesRaw[name] = theme;
      let themes = {};
      for (let { names, theme } of dedupedThemes)
        for (let themeName of names) {
          let proxiedTheme = proxyThemeToParents(themeName, theme);
          themes[themeName] = proxiedTheme;
        }
      return themes;
    }
    function proxyThemeToParents(themeName, theme) {
      let cur = [], parents = themeName.split("_").slice(0, -1).map((part) => (cur.push(part), cur.join("_"))), numParents = parents.length;
      return new Proxy(theme, {
        get(target, key) {
          if (key === import_getThemeUnwrapped.GetThemeUnwrapped)
            return theme;
          if (key == null || // dont ask me, idk why but on hermes you can see that useTheme()[undefined] passes in STRING undefined to proxy
          // if someone is crazy enough to use "undefined" as a theme key then this not working is on them
          key == "undefined" || Reflect.has(target, key))
            return Reflect.get(target, key);
          for (let i = numParents - 1; i >= 0; i--) {
            let parent = themesRaw[parents[i]];
            if (parent && Reflect.has(parent, key))
              return Reflect.get(parent, key);
          }
          return (0, import_config.getTokenObject)(key) ?? Reflect.get(target, key);
        }
      });
    }
  }
});

// ../web/dist/cjs/helpers/registerCSSVariable.native.js
var require_registerCSSVariable_native = __commonJS({
  "../web/dist/cjs/helpers/registerCSSVariable.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), registerCSSVariable_exports = {};
    __export2(registerCSSVariable_exports, {
      registerCSSVariable: () => registerCSSVariable,
      tokensValueToVariable: () => tokensValueToVariable,
      variableToCSS: () => variableToCSS
    });
    module2.exports = __toCommonJS2(registerCSSVariable_exports);
    var import_createVariable = require_createVariable_native(), registerCSSVariable = (v) => {
      tokensValueToVariable.set((0, import_createVariable.getVariableValue)(v), v);
    }, variableToCSS = (v, unitless = !1) => `--${(0, import_createVariable.createCSSVariable)(v.name, !1)}:${!unitless && typeof v.val == "number" ? `${v.val}px` : v.val}`, tokensValueToVariable = /* @__PURE__ */ new Map();
  }
});

// ../web/dist/cjs/helpers/themes.native.js
var require_themes_native = __commonJS({
  "../web/dist/cjs/helpers/themes.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), themes_exports = {};
    __export2(themes_exports, {
      ensureThemeVariable: () => ensureThemeVariable
    });
    module2.exports = __toCommonJS2(themes_exports);
    var import_createVariable = require_createVariable_native();
    function ensureThemeVariable(theme, key) {
      let val = theme[key], themeKey = key;
      (0, import_createVariable.isVariable)(val) ? val.name !== themeKey && (theme[key] = (0, import_createVariable.createVariable)({
        key: val.name,
        name: themeKey,
        val: val.val
      })) : theme[key] = (0, import_createVariable.createVariable)({
        key: themeKey,
        name: themeKey,
        val
      });
    }
  }
});

// ../web/dist/cjs/createFont.native.js
var require_createFont_native = __commonJS({
  "../web/dist/cjs/createFont.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), createFont_exports = {};
    __export2(createFont_exports, {
      createFont: () => createFont
    });
    module2.exports = __toCommonJS2(createFont_exports);
    var fontWeights = [
      "100",
      "200",
      "300",
      "400",
      "500",
      "600",
      "700",
      "800",
      "900"
    ], processSection = (section, keys, defaultValue) => {
      if (typeof section == "string")
        return section;
      let sectionKeys = Object.keys(section), fillValue = section[sectionKeys[0]];
      return Object.fromEntries(
        [.../* @__PURE__ */ new Set([...keys, ...sectionKeys])].map((key) => {
          let value = section[key] ?? defaultValue ?? fillValue;
          return fillValue = value, defaultValue = value, [key, value];
        })
      );
    }, createFont = (font) => {
      let sizeKeys = Object.keys(font.size), processedFont = Object.fromEntries(
        Object.entries(font).map(([key, section]) => [
          key,
          processSection(
            section,
            key === "face" ? fontWeights : sizeKeys,
            key === "face" ? { normal: font.family } : void 0
          )
        ])
      );
      return Object.freeze(processedFont);
    };
  }
});

// ../web/dist/cjs/insertFont.native.js
var require_insertFont_native = __commonJS({
  "../web/dist/cjs/insertFont.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), insertFont_exports = {};
    __export2(insertFont_exports, {
      insertFont: () => insertFont,
      parseFont: () => parseFont,
      registerFontVariables: () => registerFontVariables,
      updateFont: () => updateFont
    });
    module2.exports = __toCommonJS2(insertFont_exports);
    var import_config = require_config_native(), import_createFont = require_createFont_native(), import_createVariables = require_createVariables_native(), import_registerCSSVariable = require_registerCSSVariable_native();
    function insertFont(name, fontIn) {
      let font = (0, import_createFont.createFont)(fontIn), tokened = (0, import_createVariables.createVariables)(font, name), parsed = parseFont(tokened);
      return (0, import_config.setConfigFont)(name, tokened, parsed), parsed;
    }
    var updateFont = insertFont;
    function parseFont(definition) {
      var _a;
      let parsed = {};
      for (let attrKey in definition) {
        let attr = definition[attrKey];
        if (attrKey === "family" || attrKey === "face")
          parsed[attrKey] = attr;
        else {
          parsed[attrKey] = {};
          for (let key in attr) {
            let val = attr[key];
            ((_a = val.val) == null ? void 0 : _a[0]) === "$" && (val = val.val), parsed[attrKey][`$${key}`] = val;
          }
        }
      }
      return parsed;
    }
    function registerFontVariables(parsedFont) {
      let response = [];
      for (let fkey in parsedFont)
        if (fkey !== "face") {
          if (fkey === "family") {
            let val = parsedFont[fkey];
            (0, import_registerCSSVariable.registerCSSVariable)(val), response.push((0, import_registerCSSVariable.variableToCSS)(val));
          } else
            for (let fskey in parsedFont[fkey])
              if (typeof parsedFont[fkey][fskey] != "string") {
                let val = parsedFont[fkey][fskey];
                (0, import_registerCSSVariable.registerCSSVariable)(val), response.push((0, import_registerCSSVariable.variableToCSS)(val));
              }
        }
      return response;
    }
  }
});

// ../web/dist/cjs/createTamagui.native.js
var require_createTamagui_native = __commonJS({
  "../web/dist/cjs/createTamagui.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), createTamagui_exports = {};
    __export2(createTamagui_exports, {
      createTamagui: () => createTamagui
    });
    module2.exports = __toCommonJS2(createTamagui_exports);
    var import_constants2 = require_index_native2(), import_config = require_config_native(), import_createVariables = require_createVariables_native(), import_getThemeCSSRules = require_getThemeCSSRules_native(), import_insertStyleRule = require_insertStyleRule_native(), import_proxyThemeToParents = require_proxyThemeToParents_native(), import_registerCSSVariable = require_registerCSSVariable_native(), import_themes = require_themes_native(), import_useMedia = require_useMedia_native(), import_insertFont = require_insertFont_native(), import_Tamagui = require_Tamagui_native(), createdConfigs = /* @__PURE__ */ new WeakMap();
    function createTamagui(configIn) {
      var _a;
      if (createdConfigs.has(configIn))
        return configIn;
      let tokensParsed = {}, tokens = (0, import_createVariables.createVariables)(configIn.tokens || {});
      if (configIn.tokens) {
        let tokensMerged = {};
        for (let cat in tokens) {
          tokensParsed[cat] = {}, tokensMerged[cat] = {};
          let tokenCat = tokens[cat];
          for (let key in tokenCat) {
            let val = tokenCat[key], prefixedKey = `$${key}`;
            tokensParsed[cat][prefixedKey] = val, tokensMerged[cat][prefixedKey] = val, tokensMerged[cat][key] = val;
          }
        }
        (0, import_config.setTokens)(tokensMerged);
      }
      let foundThemes;
      if (configIn.themes) {
        let noThemes = Object.keys(configIn.themes).length === 0;
        foundThemes = (0, import_insertStyleRule.scanAllSheets)(noThemes, tokensParsed);
      }
      (0, import_insertStyleRule.listenForSheetChanges)();
      let fontSizeTokens = null, fontsParsed;
      if (configIn.fonts) {
        let fontTokens = Object.fromEntries(
          Object.entries(configIn.fonts).map(([k, v]) => [k, (0, import_createVariables.createVariables)(v, "f", !0)])
        );
        fontsParsed = (() => {
          let res = {};
          for (let familyName in fontTokens) {
            let font = fontTokens[familyName], fontParsed = (0, import_insertFont.parseFont)(font);
            res[`$${familyName}`] = fontParsed, !fontSizeTokens && fontParsed.size && (fontSizeTokens = new Set(Object.keys(fontParsed.size)));
          }
          return res;
        })();
      }
      let specificTokens = {}, themeConfig = (() => {
        let cssRuleSets = [];
        if (process.env.TAMAGUI_DOES_SSR_CSS !== "true" && // we can leave this out if mutating, only need the js for getThemeCSSRules
        process.env.TAMAGUI_DOES_SSR_CSS !== "mutates-themes") {
          let declarations = [], fontDeclarations = {};
          for (let key in tokens)
            for (let skey in tokens[key]) {
              let variable = tokens[key][skey];
              specificTokens[`$${key}.${skey}`] = variable, import_constants2.isWeb && ((0, import_registerCSSVariable.registerCSSVariable)(variable), declarations.push((0, import_registerCSSVariable.variableToCSS)(variable, key === "zIndex")));
            }
          if (import_constants2.isWeb) {
            let declarationsToRuleSet2 = function(decs, selector = "") {
              return `:root${selector} {${sep}${[...decs].join(`;${sep}`)}${sep}}`;
            };
            var declarationsToRuleSet = declarationsToRuleSet2;
            for (let key in fontsParsed) {
              let fontParsed = fontsParsed[key], [name, language] = key.includes("_") ? key.split("_") : [key], fontVars = (0, import_insertFont.registerFontVariables)(fontParsed);
              fontDeclarations[key] = {
                name: name.slice(1),
                declarations: fontVars,
                language
              };
            }
            let sep = "";
            if (cssRuleSets.push(declarationsToRuleSet2(declarations)), fontDeclarations)
              for (let key in fontDeclarations) {
                let { name, declarations: declarations2, language = "default" } = fontDeclarations[key], fontSelector = `.font_${name}`, langSelector = `:root .t_lang-${name}-${language} ${fontSelector}`, selectors = language === "default" ? ` ${fontSelector}, ${langSelector}` : langSelector, specificRuleSet = declarationsToRuleSet2(declarations2, selectors);
                cssRuleSets.push(specificRuleSet);
              }
          }
        }
        let themesIn = { ...configIn.themes }, dedupedThemes = foundThemes ?? getThemesDeduped(themesIn);
        return {
          themes: (0, import_proxyThemeToParents.proxyThemesToParents)(dedupedThemes),
          cssRuleSets,
          getThemeRulesSets() {
            let themeRuleSets = [];
            if (import_constants2.isWeb)
              for (let { names, theme } of dedupedThemes) {
                let nextRules = (0, import_getThemeCSSRules.getThemeCSSRules)({
                  config: configIn,
                  themeName: names[0],
                  names,
                  theme
                });
                themeRuleSets = [...themeRuleSets, ...nextRules];
              }
            return themeRuleSets;
          }
        };
      })(), shorthands = configIn.shorthands || {}, lastCSSInsertedRulesIndex = -1, getCSS = ({ separator = `
`, sinceLastCall, exclude } = {}) => {
        if (sinceLastCall && lastCSSInsertedRulesIndex >= 0) {
          let rules = (0, import_insertStyleRule.getAllRules)();
          return lastCSSInsertedRulesIndex = rules.length, rules.slice(lastCSSInsertedRulesIndex).join(separator);
        }
        lastCSSInsertedRulesIndex = 0;
        let runtimeStyles = (0, import_insertStyleRule.getAllRules)().join(separator);
        return exclude === "design-system" ? runtimeStyles : `${`._ovs-contain {overscroll-behavior:contain;}
.is_Text .is_Text {display:inline-flex;}
._dsp_contents {display:contents;}
${themeConfig.cssRuleSets.join(separator)}`}
${exclude ? "" : themeConfig.getThemeRulesSets().join(separator)}
${runtimeStyles}`;
      }, getNewCSS = (opts) => getCSS({ ...opts, sinceLastCall: !0 }), defaultFontName = configIn.defaultFont || // uses font named "body" if present for compat
      configIn.fonts && ("body" in configIn.fonts ? "body" : "");
      !defaultFontName && configIn.fonts && (defaultFontName = Object.keys(configIn.fonts)[0]), (defaultFontName == null ? void 0 : defaultFontName[0]) === "$" && (defaultFontName = defaultFontName.slice(1));
      let defaultFont = `$${defaultFontName}`, config = {
        fonts: {},
        settings: {},
        onlyAllowShorthands: !1,
        fontLanguages: [],
        animations: {},
        media: {},
        ...configIn,
        tokens,
        // vite made this into a function if it wasn't set
        shorthands,
        inverseShorthands: shorthands ? Object.fromEntries(Object.entries(shorthands).map(([k, v]) => [v, k])) : {},
        themes: themeConfig.themes,
        fontsParsed: fontsParsed || {},
        themeConfig,
        tokensParsed,
        parsed: !0,
        getNewCSS,
        getCSS,
        defaultFont,
        fontSizeTokens: fontSizeTokens || /* @__PURE__ */ new Set(),
        specificTokens
        // const tokens = [...getToken(tokens.size[0])]
        // .spacer-sm + ._dsp_contents._dsp-sm-hidden { margin-left: -var(--${}) }
      };
      return (0, import_useMedia.configureMedia)(config), (0, import_config.setConfig)(config), import_config.configListeners.size && (import_config.configListeners.forEach((cb) => cb(config)), import_config.configListeners.clear()), createdConfigs.set(config, !0), config;
    }
    function getThemesDeduped(themes) {
      let dedupedThemes = [], existing = /* @__PURE__ */ new Map();
      for (let themeName in themes) {
        let darkOrLightSpecificPrefix = themeName.startsWith("dark") ? "dark" : themeName.startsWith("light") ? "light" : "", rawTheme = themes[themeName], key = darkOrLightSpecificPrefix + JSON.stringify(rawTheme);
        if (existing.has(key)) {
          existing.get(key).names.push(themeName);
          continue;
        }
        let theme = { ...rawTheme };
        for (let key2 in theme)
          (0, import_themes.ensureThemeVariable)(theme, key2);
        let deduped = {
          names: [themeName],
          theme
        };
        dedupedThemes.push(deduped), existing.set(key, deduped);
      }
      return dedupedThemes;
    }
  }
});

// ../web/dist/cjs/createTokens.native.js
var require_createTokens_native = __commonJS({
  "../web/dist/cjs/createTokens.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), createTokens_exports = {};
    __export2(createTokens_exports, {
      createTokens: () => createTokens
    });
    module2.exports = __toCommonJS2(createTokens_exports);
    var import_createVariables = require_createVariables_native();
    function createTokens(tokens) {
      return (0, import_createVariables.createVariables)(tokens);
    }
  }
});

// ../web/dist/cjs/helpers/mergeVariants.native.js
var require_mergeVariants_native = __commonJS({
  "../web/dist/cjs/helpers/mergeVariants.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), mergeVariants_exports = {};
    __export2(mergeVariants_exports, {
      mergeVariants: () => mergeVariants
    });
    module2.exports = __toCommonJS2(mergeVariants_exports);
    var mergeVariants = (parentVariants, ourVariants) => {
      let variants = {};
      for (let key in ourVariants) {
        let parentVariant = parentVariants == null ? void 0 : parentVariants[key], ourVariant = ourVariants[key];
        if (!parentVariant || typeof ourVariant == "function") {
          variants[key] = ourVariant;
          continue;
        }
        if (parentVariant && !ourVariant) {
          variants[key] = parentVariant[key];
          continue;
        }
        variants[key] = {};
        for (let subKey in ourVariant) {
          let val = ourVariant[subKey], parentVal = parentVariant == null ? void 0 : parentVariant[subKey];
          typeof val == "function" || !parentVal || typeof parentVal == "function" ? variants[key][subKey] = val : variants[key][subKey] = {
            // keep order
            ...parentVal,
            ...val
          };
        }
        parentVariant && (variants[key] = {
          ...parentVariant,
          ...variants[key]
        });
      }
      return {
        ...parentVariants,
        ...variants
      };
    };
  }
});

// ../web/dist/cjs/setupReactNative.native.js
var require_setupReactNative_native = __commonJS({
  "../web/dist/cjs/setupReactNative.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), setupReactNative_exports = {};
    __export2(setupReactNative_exports, {
      getReactNativeConfig: () => getReactNativeConfig,
      setupReactNative: () => setupReactNative
    });
    module2.exports = __toCommonJS2(setupReactNative_exports);
    function getReactNativeConfig(Component) {
      var _a, _b, _c;
      if (Component)
        return (_a = Component.propTypes) != null && _a.onTextInput || (_b = Component.propTypes) != null && _b.onChangeText ? RNConfigs.TextInput : Component.getSizeWithHeaders ? RNConfigs.Image : (_c = Component.propTypes) != null && _c.textBreakStrategy ? RNConfigs.Text : RNConfigs.default;
    }
    var RNConfigs = {
      Image: {
        isReactNative: !0,
        inlineProps: /* @__PURE__ */ new Set(["src", "width", "height"])
      },
      Text: {
        isReactNative: !0,
        isText: !0
      },
      TextInput: {
        isReactNative: !0,
        isInput: !0,
        isText: !0
      },
      default: {
        isReactNative: !0
      }
    };
    function setupReactNative(rnExports) {
    }
  }
});

// ../web/dist/cjs/styled.native.js
var require_styled_native = __commonJS({
  "../web/dist/cjs/styled.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), styled_exports = {};
    __export2(styled_exports, {
      styled: () => styled
    });
    module2.exports = __toCommonJS2(styled_exports);
    var import_createComponent = require_createComponent_native(), import_mergeVariants = require_mergeVariants_native(), import_setupReactNative = require_setupReactNative_native();
    function styled(ComponentIn, options, staticExtractionOptions) {
      if (!ComponentIn)
        throw new Error("No component given to styled()");
      let parentStaticConfig = ComponentIn.staticConfig, isPlainStyledComponent = !!parentStaticConfig && !(parentStaticConfig.isReactNative || parentStaticConfig.isHOC), Component = parentStaticConfig != null && parentStaticConfig.isHOC && !(parentStaticConfig != null && parentStaticConfig.isStyledHOC) || isPlainStyledComponent ? ComponentIn : (parentStaticConfig == null ? void 0 : parentStaticConfig.Component) || ComponentIn, reactNativeConfig = parentStaticConfig ? void 0 : (0, import_setupReactNative.getReactNativeConfig)(Component), isReactNative = !!(reactNativeConfig || staticExtractionOptions != null && staticExtractionOptions.isReactNative || parentStaticConfig != null && parentStaticConfig.isReactNative), staticConfigProps = (() => {
        if (options) {
          let {
            variants,
            name,
            defaultVariants,
            acceptsClassName: acceptsClassNameProp,
            context,
            ...defaultProps
          } = options;
          defaultVariants && (defaultProps = {
            ...defaultVariants,
            ...defaultProps
          }), parentStaticConfig && (parentStaticConfig.isHOC && !parentStaticConfig.isStyledHOC || (defaultProps = {
            ...parentStaticConfig.defaultProps,
            ...defaultProps
          }, parentStaticConfig.variants && (variants = (0, import_mergeVariants.mergeVariants)(parentStaticConfig.variants, variants)))), parentStaticConfig != null && parentStaticConfig.isHOC && name && (defaultProps.componentName = name);
          let isText = !!(staticExtractionOptions != null && staticExtractionOptions.isText || parentStaticConfig != null && parentStaticConfig.isText), acceptsClassName = acceptsClassNameProp ?? (isPlainStyledComponent || isReactNative || (parentStaticConfig == null ? void 0 : parentStaticConfig.isHOC) && (parentStaticConfig == null ? void 0 : parentStaticConfig.acceptsClassName)), conf = {
            ...parentStaticConfig,
            ...staticExtractionOptions,
            ...!isPlainStyledComponent && {
              Component
            },
            // this type gets messed up by options?: Partial<GetProps<ParentComponent>> above
            // take away the Partial<> and it's fine
            variants,
            defaultProps,
            defaultVariants,
            componentName: name || (parentStaticConfig == null ? void 0 : parentStaticConfig.componentName),
            isReactNative,
            isText,
            acceptsClassName,
            context,
            ...reactNativeConfig,
            isStyledHOC: !!(parentStaticConfig != null && parentStaticConfig.isHOC),
            parentStaticConfig
          };
          return (defaultProps.children || !acceptsClassName || context) && (conf.neverFlatten = !0), conf;
        }
      })(), component = (0, import_createComponent.createComponent)(staticConfigProps || {});
      for (let key in ComponentIn)
        key in component || (component[key] = ComponentIn[key]);
      return component;
    }
  }
});

// ../web/dist/cjs/types.native.js
var require_types_native3 = __commonJS({
  "../web/dist/cjs/types.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), types_exports = {};
    module2.exports = __toCommonJS2(types_exports);
  }
});

// ../web/dist/cjs/interfaces/GetRef.native.js
var require_GetRef_native = __commonJS({
  "../web/dist/cjs/interfaces/GetRef.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), GetRef_exports = {};
    module2.exports = __toCommonJS2(GetRef_exports);
  }
});

// ../web/dist/cjs/helpers/getExpandedShorthands.native.js
var require_getExpandedShorthands_native = __commonJS({
  "../web/dist/cjs/helpers/getExpandedShorthands.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), getExpandedShorthands_exports = {};
    __export2(getExpandedShorthands_exports, {
      getExpandedShorthands: () => getExpandedShorthands
    });
    module2.exports = __toCommonJS2(getExpandedShorthands_exports);
    var import_config = require_config_native();
    function getExpandedShorthands(props) {
      let shorthands = (0, import_config.getConfig)().shorthands;
      if (!shorthands)
        return props;
      let res = {};
      for (let key in props)
        res[shorthands[key] || key] = props[key];
      return res;
    }
  }
});

// ../web/dist/cjs/helpers/isTamaguiComponent.native.js
var require_isTamaguiComponent_native = __commonJS({
  "../web/dist/cjs/helpers/isTamaguiComponent.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), isTamaguiComponent_exports = {};
    __export2(isTamaguiComponent_exports, {
      isTamaguiComponent: () => isTamaguiComponent
    });
    module2.exports = __toCommonJS2(isTamaguiComponent_exports);
    function isTamaguiComponent(comp, name) {
      let config = comp == null ? void 0 : comp.staticConfig;
      return !!(config && (!name || name === config.componentName));
    }
  }
});

// ../web/dist/cjs/helpers/isTamaguiElement.native.js
var require_isTamaguiElement_native = __commonJS({
  "../web/dist/cjs/helpers/isTamaguiElement.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), isTamaguiElement_exports = {};
    __export2(isTamaguiElement_exports, {
      isTamaguiElement: () => isTamaguiElement
    });
    module2.exports = __toCommonJS2(isTamaguiElement_exports);
    var import_react = require("react"), import_isTamaguiComponent = require_isTamaguiComponent_native(), isTamaguiElement = (child, name) => (0, import_react.isValidElement)(child) && (0, import_isTamaguiComponent.isTamaguiComponent)(child.type, name);
  }
});

// ../web/dist/cjs/helpers/withStaticProperties.native.js
var require_withStaticProperties_native = __commonJS({
  "../web/dist/cjs/helpers/withStaticProperties.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), withStaticProperties_exports = {};
    __export2(withStaticProperties_exports, {
      withStaticProperties: () => withStaticProperties
    });
    module2.exports = __toCommonJS2(withStaticProperties_exports);
    var import_react = require("react"), Decorated = Symbol(), withStaticProperties = function(component, staticProps) {
      let next = (() => {
        if (component[Decorated]) {
          let _ = (0, import_react.forwardRef)(
            (props, ref) => (0, import_react.createElement)(component, { ...props, ref })
          );
          for (let key in component) {
            let v = component[key];
            _[key] = v && typeof v == "object" ? { ...v } : v;
          }
        }
        return component;
      })();
      return Object.assign(next, staticProps), next[Decorated] = !0, next;
    };
  }
});

// ../web/dist/cjs/hooks/useThemeName.native.js
var require_useThemeName_native = __commonJS({
  "../web/dist/cjs/hooks/useThemeName.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), useThemeName_exports = {};
    __export2(useThemeName_exports, {
      useThemeName: () => useThemeName
    });
    module2.exports = __toCommonJS2(useThemeName_exports);
    var import_constants2 = require_index_native2(), import_react = require("react"), import_ThemeManagerContext = require_ThemeManagerContext_native();
    function useThemeName(opts) {
      let manager = (0, import_react.useContext)(import_ThemeManagerContext.ThemeManagerContext), [name, setName] = (0, import_react.useState)((manager == null ? void 0 : manager.state.name) || "");
      return (0, import_constants2.useIsomorphicLayoutEffect)(() => {
        if (manager)
          return setName(manager.state.name), manager.onChangeTheme((next, manager2) => {
            let name2 = opts != null && opts.parent && manager2.state.parentName || next;
            name2 && setName(name2);
          });
      }, [manager == null ? void 0 : manager.state.name]), name;
    }
  }
});

// ../web/dist/cjs/hooks/useConfiguration.native.js
var require_useConfiguration_native = __commonJS({
  "../web/dist/cjs/hooks/useConfiguration.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), useConfiguration_exports = {};
    __export2(useConfiguration_exports, {
      useConfiguration: () => useConfiguration
    });
    module2.exports = __toCommonJS2(useConfiguration_exports);
    var import_react = require("react"), import_config = require_config_native(), import_ComponentContext = require_ComponentContext_native(), useConfiguration = () => {
      let { groups, animationDriver, ...restComponentConfig } = (0, import_react.useContext)(import_ComponentContext.ComponentContext), { animations, ...restConfig } = (0, import_config.getConfig)();
      return {
        ...restConfig,
        ...restComponentConfig,
        animationDriver: animationDriver ?? (0, import_config.getConfig)().animations
      };
    };
  }
});

// ../web/dist/cjs/hooks/useIsTouchDevice.native.js
var require_useIsTouchDevice_native = __commonJS({
  "../web/dist/cjs/hooks/useIsTouchDevice.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), useIsTouchDevice_exports = {};
    __export2(useIsTouchDevice_exports, {
      useIsTouchDevice: () => useIsTouchDevice
    });
    module2.exports = __toCommonJS2(useIsTouchDevice_exports);
    var import_constants2 = require_index_native2(), import_use_did_finish_ssr = require_index_native6(), useIsTouchDevice = () => import_constants2.isWeb ? (0, import_use_did_finish_ssr.useDidFinishSSR)() ? import_constants2.isTouchable : !1 : !0;
  }
});

// ../web/dist/cjs/views/Stack.native.js
var require_Stack_native = __commonJS({
  "../web/dist/cjs/views/Stack.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), Stack_exports = {};
    __export2(Stack_exports, {
      Stack: () => Stack2
    });
    module2.exports = __toCommonJS2(Stack_exports);
    var import_helpers = require_index_native4(), import_constants2 = require_constants_native2(), import_createComponent = require_createComponent_native(), Stack2 = (0, import_createComponent.createComponent)({
      acceptsClassName: !0,
      defaultProps: import_constants2.stackDefaultStyles,
      validStyles: import_helpers.validStyles
    });
  }
});

// ../web/dist/cjs/hooks/useProps.native.js
var require_useProps_native = __commonJS({
  "../web/dist/cjs/hooks/useProps.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), useProps_exports = {};
    __export2(useProps_exports, {
      useProps: () => useProps,
      usePropsAndStyle: () => usePropsAndStyle,
      useStyle: () => useStyle
    });
    module2.exports = __toCommonJS2(useProps_exports);
    var import_react = require("react"), import_ComponentContext = require_ComponentContext_native(), import_defaultComponentState = require_defaultComponentState_native(), import_getSplitStyles = require_getSplitStyles_native(), import_Stack = require_Stack_native(), import_useMedia = require_useMedia_native(), import_useTheme = require_useTheme_native();
    function useProps(props, opts) {
      let [propsOut, styleOut] = usePropsAndStyle(props, {
        ...opts,
        noExpand: !0,
        noNormalize: !0,
        resolveValues: "none"
      });
      return {
        ...propsOut,
        ...styleOut
      };
    }
    function useStyle(props, opts) {
      return usePropsAndStyle(props, opts)[1];
    }
    function usePropsAndStyle(props, opts) {
      var _a, _b;
      let staticConfig = ((_a = opts == null ? void 0 : opts.forComponent) == null ? void 0 : _a.staticConfig) ?? import_Stack.Stack.staticConfig, [themeState, theme] = (0, import_useTheme.useThemeWithState)({
        componentName: staticConfig.componentName
      }), componentContext = (0, import_react.useContext)(import_ComponentContext.ComponentContext), media = (0, import_useMedia.useMedia)(), splitStyles = (0, import_getSplitStyles.useSplitStyles)(
        props,
        staticConfig,
        theme,
        ((_b = themeState.state) == null ? void 0 : _b.name) || "",
        import_defaultComponentState.defaultComponentStateMounted,
        {
          isAnimated: !1,
          mediaState: media,
          noSkip: !0,
          noClassNames: !0,
          resolveValues: "auto",
          ...opts
        },
        null,
        componentContext
      );
      return [splitStyles.viewProps, splitStyles.style, theme, media];
    }
  }
});

// ../web/dist/cjs/views/View.native.js
var require_View_native = __commonJS({
  "../web/dist/cjs/views/View.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), View_exports = {};
    __export2(View_exports, {
      View: () => View
    });
    module2.exports = __toCommonJS2(View_exports);
    var import_helpers = require_index_native4(), import_createComponent = require_createComponent_native(), View = (0, import_createComponent.createComponent)({
      acceptsClassName: !0,
      defaultProps: {
        display: "flex"
      },
      validStyles: import_helpers.validStyles
    });
  }
});

// ../web/dist/cjs/views/Text.native.js
var require_Text_native = __commonJS({
  "../web/dist/cjs/views/Text.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), Text_exports = {};
    __export2(Text_exports, {
      Text: () => Text2
    });
    module2.exports = __toCommonJS2(Text_exports);
    var import_helpers = require_index_native4(), import_createComponent = require_createComponent_native(), Text2 = (0, import_createComponent.createComponent)({
      acceptsClassName: !0,
      isText: !0,
      defaultProps: {
        suppressHighlighting: !0
      },
      inlineWhenUnflattened: /* @__PURE__ */ new Set(["fontFamily"]),
      variants: {
        // ??
        ellipsizeMode: {
          "...": () => null
        },
        ellipse: {
          true: {
            numberOfLines: 1,
            lineBreakMode: "clip"
          }
        }
      },
      deoptProps: /* @__PURE__ */ new Set(["ellipse"]),
      validStyles: {
        ...import_helpers.validStyles,
        ...import_helpers.stylePropsTextOnly
      }
    });
  }
});

// ../web/dist/cjs/views/ThemeProvider.native.js
var require_ThemeProvider_native = __commonJS({
  "../web/dist/cjs/views/ThemeProvider.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), ThemeProvider_exports = {};
    __export2(ThemeProvider_exports, {
      ThemeProvider: () => ThemeProvider
    });
    module2.exports = __toCommonJS2(ThemeProvider_exports);
    var import_constants2 = require_index_native2(), import_react = require("react"), import_constants22 = require_constants_native2(), import_Theme = require_Theme_native(), import_jsx_runtime = require("react/jsx-runtime"), ThemeProvider = (props) => (import_constants2.isClient && (0, import_react.useLayoutEffect)(() => {
      if (props.disableRootThemeClass)
        return;
      let cn = `${import_constants22.THEME_CLASSNAME_PREFIX}${props.defaultTheme}`, target = props.themeClassNameOnRoot ? document.documentElement : document.body;
      return target.classList.add(cn), () => {
        target.classList.remove(cn);
      };
    }, [props.defaultTheme, props.disableRootThemeClass, props.themeClassNameOnRoot]), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_Theme.Theme,
      {
        className: props.className,
        name: props.defaultTheme,
        forceClassName: !props.disableRootThemeClass,
        _isRoot: !0,
        children: props.children
      }
    ));
  }
});

// ../web/dist/cjs/views/FontLanguage.native.js
var require_FontLanguage_native = __commonJS({
  "../web/dist/cjs/views/FontLanguage.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), FontLanguage_native_exports = {};
    __export2(FontLanguage_native_exports, {
      FontLanguage: () => FontLanguage
    });
    module2.exports = __toCommonJS2(FontLanguage_native_exports);
    var import_react = require("react"), import_ComponentContext = require_ComponentContext_native(), import_jsx_runtime = require("react/jsx-runtime"), FontLanguage = ({ children, ...props }) => {
      let language = (0, import_react.useMemo)(() => props, [JSON.stringify(props)]);
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ComponentContext.ComponentContext.Provider, { language, children });
    };
  }
});

// ../web/dist/cjs/views/TamaguiProvider.native.js
var require_TamaguiProvider_native = __commonJS({
  "../web/dist/cjs/views/TamaguiProvider.native.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create, __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __getProtoOf2 = Object.getPrototypeOf, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: !0 }) : target,
      mod
    )), __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), TamaguiProvider_exports = {};
    __export2(TamaguiProvider_exports, {
      TamaguiProvider: () => TamaguiProvider
    });
    module2.exports = __toCommonJS2(TamaguiProvider_exports);
    var import_constants2 = require_index_native2(), React = __toESM2(require("react")), import_ComponentContext = require_ComponentContext_native(), import_useMedia = require_useMedia_native(), import_ThemeProvider = require_ThemeProvider_native(), import_jsx_runtime = require("react/jsx-runtime");
    function TamaguiProvider({
      children,
      disableInjectCSS,
      config,
      ...themePropsProvider
    }) {
      return import_constants2.isWeb && import_constants2.isServer || (0, import_useMedia.useMediaListeners)(config), import_constants2.isClient && React.useLayoutEffect(() => {
        if (document.documentElement.classList.contains("t_unmounted") && document.documentElement.classList.remove("t_unmounted"), disableInjectCSS)
          return;
        let style = document.createElement("style");
        return style.appendChild(document.createTextNode(config.getCSS())), document.head.appendChild(style), () => {
          document.head.removeChild(style);
        };
      }, [config, disableInjectCSS]), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ComponentContext.ComponentContext.Provider, { animationDriver: config.animations, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_ThemeProvider.ThemeProvider,
        {
          themeClassNameOnRoot: config.themeClassNameOnRoot,
          disableRootThemeClass: config.disableRootThemeClass,
          ...themePropsProvider,
          defaultTheme: themePropsProvider.defaultTheme ?? Object.keys(config.themes)[0],
          children
        }
      ) });
    }
  }
});

// ../web/dist/cjs/views/Configuration.native.js
var require_Configuration_native = __commonJS({
  "../web/dist/cjs/views/Configuration.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), Configuration_exports = {};
    __export2(Configuration_exports, {
      Configuration: () => Configuration
    });
    module2.exports = __toCommonJS2(Configuration_exports);
    var import_ComponentContext = require_ComponentContext_native(), import_jsx_runtime = require("react/jsx-runtime"), Configuration = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ComponentContext.ComponentContext.Provider, { ...props });
  }
});

// ../use-event/dist/cjs/useGet.native.js
var require_useGet_native = __commonJS({
  "../use-event/dist/cjs/useGet.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), useGet_exports = {};
    __export2(useGet_exports, {
      useGet: () => useGet
    });
    module2.exports = __toCommonJS2(useGet_exports);
    var import_react = require("react"), isWeb = !1, isClient = typeof window < "u", useIsomorphicLayoutEffect3 = !isWeb || isClient ? import_react.useLayoutEffect : import_react.useEffect;
    function useGet(currentValue, initialValue, forwardToFunction) {
      let curRef = (0, import_react.useRef)(initialValue ?? currentValue);
      return useIsomorphicLayoutEffect3(() => {
        curRef.current = currentValue;
      }), (0, import_react.useCallback)(
        forwardToFunction ? (...args) => {
          var _a;
          return (_a = curRef.current) == null ? void 0 : _a.apply(null, args);
        } : () => curRef.current,
        []
      );
    }
  }
});

// ../use-event/dist/cjs/useEvent.native.js
var require_useEvent_native = __commonJS({
  "../use-event/dist/cjs/useEvent.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), useEvent_exports = {};
    __export2(useEvent_exports, {
      useEvent: () => useEvent
    });
    module2.exports = __toCommonJS2(useEvent_exports);
    var import_useGet = require_useGet_native();
    function useEvent(callback) {
      return (0, import_useGet.useGet)(callback, defaultValue, !0);
    }
    var defaultValue = () => {
      throw new Error("Cannot call an event handler while rendering.");
    };
  }
});

// ../use-event/dist/cjs/index.native.js
var require_index_native8 = __commonJS({
  "../use-event/dist/cjs/index.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __reExport2 = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), src_exports2 = {};
    module2.exports = __toCommonJS2(src_exports2);
    __reExport2(src_exports2, require_useEvent_native(), module2.exports);
    __reExport2(src_exports2, require_useGet_native(), module2.exports);
  }
});

// ../web/dist/cjs/index.native.js
var require_index_native9 = __commonJS({
  "../web/dist/cjs/index.native.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty, __getOwnPropDesc2 = Object.getOwnPropertyDescriptor, __getOwnPropNames2 = Object.getOwnPropertyNames, __hasOwnProp2 = Object.prototype.hasOwnProperty, __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: !0 });
    }, __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from == "object" || typeof from == "function")
        for (let key of __getOwnPropNames2(from))
          !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      return to;
    }, __reExport2 = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: !0 }), mod), src_exports2 = {};
    __export2(src_exports2, {
      configureMedia: () => import_useMedia.configureMedia,
      getConfig: () => import_config.getConfig,
      getMedia: () => import_useMedia.getMedia,
      getThemes: () => import_config.getThemes,
      getToken: () => import_config.getToken,
      getTokenValue: () => import_config.getTokenValue,
      getTokens: () => import_config.getTokens,
      mediaObjectToString: () => import_useMedia.mediaObjectToString,
      mediaQueryConfig: () => import_useMedia.mediaQueryConfig,
      mediaState: () => import_useMedia.mediaState,
      setupDev: () => import_config.setupDev,
      updateConfig: () => import_config.updateConfig,
      useMedia: () => import_useMedia.useMedia
    });
    module2.exports = __toCommonJS2(src_exports2);
    __reExport2(src_exports2, require_Tamagui_native(), module2.exports);
    __reExport2(src_exports2, require_createComponent_native(), module2.exports);
    __reExport2(src_exports2, require_createShorthands_native(), module2.exports);
    __reExport2(src_exports2, require_createTheme_native(), module2.exports);
    __reExport2(src_exports2, require_createTamagui_native(), module2.exports);
    __reExport2(src_exports2, require_createFont_native(), module2.exports);
    __reExport2(src_exports2, require_createTokens_native(), module2.exports);
    __reExport2(src_exports2, require_createVariable_native(), module2.exports);
    __reExport2(src_exports2, require_createVariables_native(), module2.exports);
    __reExport2(src_exports2, require_insertFont_native(), module2.exports);
    __reExport2(src_exports2, require_styled_native(), module2.exports);
    __reExport2(src_exports2, require_setupReactNative_native(), module2.exports);
    __reExport2(src_exports2, require_types_native3(), module2.exports);
    __reExport2(src_exports2, require_GetRef_native(), module2.exports);
    var import_config = require_config_native();
    __reExport2(src_exports2, require_constants_native2(), module2.exports);
    __reExport2(src_exports2, require_ComponentContext_native(), module2.exports);
    __reExport2(src_exports2, require_createStyledContext_native(), module2.exports);
    __reExport2(src_exports2, require_expandStyles_native(), module2.exports);
    __reExport2(src_exports2, require_propMapper_native(), module2.exports);
    __reExport2(src_exports2, require_getExpandedShorthands_native(), module2.exports);
    __reExport2(src_exports2, require_getSplitStyles_native(), module2.exports);
    __reExport2(src_exports2, require_getStylesAtomic_native(), module2.exports);
    __reExport2(src_exports2, require_getThemeCSSRules_native(), module2.exports);
    __reExport2(src_exports2, require_getVariantExtras_native(), module2.exports);
    __reExport2(src_exports2, require_isTamaguiComponent_native(), module2.exports);
    __reExport2(src_exports2, require_isTamaguiElement_native(), module2.exports);
    __reExport2(src_exports2, require_matchMedia_native(), module2.exports);
    __reExport2(src_exports2, require_mergeProps_native(), module2.exports);
    __reExport2(src_exports2, require_normalizeColor_native(), module2.exports);
    __reExport2(src_exports2, require_proxyThemeVariables_native(), module2.exports);
    __reExport2(src_exports2, require_proxyThemeToParents_native(), module2.exports);
    __reExport2(src_exports2, require_pseudoDescriptors_native(), module2.exports);
    __reExport2(src_exports2, require_themeable_native(), module2.exports);
    __reExport2(src_exports2, require_themes_native(), module2.exports);
    __reExport2(src_exports2, require_createShallowSetState_native(), module2.exports);
    __reExport2(src_exports2, require_withStaticProperties_native(), module2.exports);
    var import_useMedia = require_useMedia_native();
    __reExport2(src_exports2, require_useTheme_native(), module2.exports);
    __reExport2(src_exports2, require_useThemeName_native(), module2.exports);
    __reExport2(src_exports2, require_useConfiguration_native(), module2.exports);
    __reExport2(src_exports2, require_useIsTouchDevice_native(), module2.exports);
    __reExport2(src_exports2, require_useProps_native(), module2.exports);
    __reExport2(src_exports2, require_useConfiguration_native(), module2.exports);
    __reExport2(src_exports2, require_Slot_native(), module2.exports);
    __reExport2(src_exports2, require_Stack_native(), module2.exports);
    __reExport2(src_exports2, require_View_native(), module2.exports);
    __reExport2(src_exports2, require_Text_native(), module2.exports);
    __reExport2(src_exports2, require_Theme_native(), module2.exports);
    __reExport2(src_exports2, require_ThemeProvider_native(), module2.exports);
    __reExport2(src_exports2, require_FontLanguage_native(), module2.exports);
    __reExport2(src_exports2, require_TamaguiProvider_native(), module2.exports);
    __reExport2(src_exports2, require_Configuration_native(), module2.exports);
    __reExport2(src_exports2, require_index_native6(), module2.exports);
    __reExport2(src_exports2, require_index_native8(), module2.exports);
    __reExport2(src_exports2, require_index_native5(), module2.exports);
    __reExport2(src_exports2, require_index_native4(), module2.exports);
    __reExport2(src_exports2, require_index_native2(), module2.exports);
    __reExport2(src_exports2, require_setupHooks_native(), module2.exports);
  }
});

// ../fake-react-native/index.js
var require_fake_react_native = __commonJS({
  "../fake-react-native/index.js"(exports, module2) {
    module2.exports = proxyWorm();
    function proxyWorm() {
      return new Proxy(
        {
          StyleSheet: {
            create() {
            }
          },
          Platform: {
            OS: "web"
          },
          Image: "Image",
          View: "View",
          Text: "Text",
          TextInput: "TextInput",
          ScrollView: "ScrollView",
          Dimensions: {
            addEventListener(cb) {
            }
          },
          addPoolingTo() {
          }
        },
        {
          get(target, key) {
            return Reflect.get(target, key) || proxyWorm();
          },
          apply() {
            return proxyWorm();
          }
        }
      );
    }
  }
});

// ../fake-react-native/idFn.js
var idFn_exports = {};
__export(idFn_exports, {
  default: () => idFn_default
});
var idFn_default, init_idFn = __esm({
  "../fake-react-native/idFn.js"() {
    idFn_default = (_) => _;
  }
});

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Stack: () => Stack,
  Text: () => Text
});
module.exports = __toCommonJS(src_exports);
var import_react_native_use_responder_events = __toESM(require_index_native()), import_web2 = __toESM(require_index_native9());

// src/getBaseViews.native.ts
function getBaseViews() {
  let native = require("react-native");
  return {
    View: native.View || native.default.View,
    Text: native.Text || native.default.Text,
    Pressable: native.Pressable || native.default.Pressable
  };
}

// src/hooks/useElementLayout.tsx
var import_constants = __toESM(require_index_native2());

// src/helpers/getBoundingClientRect.tsx
var getBoundingClientRect = (node) => {
  var _a;
  if (!(!node || node.nodeType !== 1))
    return (_a = node.getBoundingClientRect) == null ? void 0 : _a.call(node);
};

// src/helpers/getRect.tsx
var getRect = (node) => {
  let rect = getBoundingClientRect(node);
  if (!rect)
    return;
  let { x, y, top, left } = rect;
  return { x, y, width: node.offsetWidth, height: node.offsetHeight, top, left };
};

// src/hooks/useElementLayout.tsx
var LayoutHandlers = /* @__PURE__ */ new WeakMap(), resizeObserver = null;
typeof window < "u" && "ResizeObserver" in window && (resizeObserver = new ResizeObserver((entries) => {
  for (let { target } of entries) {
    let onLayout = LayoutHandlers.get(target);
    if (typeof onLayout != "function")
      return;
    measureLayout(target, null, (x, y, width, height, left, top) => {
      onLayout({
        nativeEvent: {
          layout: { x, y, width, height, left, top },
          target
        },
        timeStamp: Date.now()
      });
    });
  }
}));
var measureLayout = (node, relativeTo, callback) => {
  let relativeNode = relativeTo || (node == null ? void 0 : node.parentNode);
  relativeNode instanceof HTMLElement && setTimeout(() => {
    let relativeRect = getBoundingClientRect(relativeNode), { height, left, top, width } = getRect(node), x = left - relativeRect.left, y = top - relativeRect.top;
    callback(x, y, width, height, left, top);
  }, 0);
};
function useElementLayout(ref, onLayout) {
  (0, import_constants.useIsomorphicLayoutEffect)(() => {
    if (!resizeObserver || !onLayout)
      return;
    let node = ref.current;
    if (node)
      return LayoutHandlers.set(node, onLayout), resizeObserver.observe(node), () => {
        resizeObserver == null || resizeObserver.unobserve(node);
      };
  }, [ref, onLayout]);
}

// src/hooks/usePlatformMethods.ts
var import_web = __toESM(require_index_native9());
function usePlatformMethods(hostRef) {
  (0, import_web.useIsomorphicLayoutEffect)(() => {
    let node = hostRef.current;
    node && (node.measure = (callback) => measureLayout(node, null, callback), node.measureLayout = (relativeToNode, success) => measureLayout(node, relativeToNode, success), node.measureInWindow = (callback) => {
      node && setTimeout(() => {
        let { height, left, top, width } = getRect(node);
        callback(left, top, width, height);
      }, 0);
    });
  }, [hostRef]);
}

// src/vendor/Pressability.native.tsx
var Pressability = require_fake_react_native().default, usePressability = (init_idFn(), __toCommonJS(idFn_exports)).default;

// src/index.tsx
__reExport(src_exports, __toESM(require_index_native9()), module.exports);
var Stack = import_web2.Stack, Text = import_web2.Text;
(0, import_web2.setupHooks)({
  getBaseViews,
  usePropsTransform(elementType, propsIn, hostRef) {
    let {
      // event props
      onMoveShouldSetResponder,
      onMoveShouldSetResponderCapture,
      onResponderEnd,
      onResponderGrant,
      onResponderMove,
      onResponderReject,
      onResponderRelease,
      onResponderStart,
      onResponderTerminate,
      onResponderTerminationRequest,
      onScrollShouldSetResponder,
      onScrollShouldSetResponderCapture,
      onSelectionChangeShouldSetResponder,
      onSelectionChangeShouldSetResponderCapture,
      onStartShouldSetResponder,
      onStartShouldSetResponderCapture,
      // android
      collapsable,
      focusable,
      // deprecated,
      accessible,
      accessibilityDisabled,
      onLayout,
      hrefAttrs,
      ...viewProps
    } = propsIn;
    if (usePlatformMethods(hostRef), useElementLayout(hostRef, onLayout), (0, import_react_native_use_responder_events.useResponderEvents)(hostRef, {
      onMoveShouldSetResponder,
      onMoveShouldSetResponderCapture,
      onResponderEnd,
      onResponderGrant,
      onResponderMove,
      onResponderReject,
      onResponderRelease,
      onResponderStart,
      onResponderTerminate,
      onResponderTerminationRequest,
      onScrollShouldSetResponder,
      onScrollShouldSetResponderCapture,
      onSelectionChangeShouldSetResponder,
      onSelectionChangeShouldSetResponderCapture,
      onStartShouldSetResponder,
      onStartShouldSetResponderCapture
    }), viewProps.href !== void 0 && hrefAttrs !== void 0) {
      let { download, rel, target } = hrefAttrs;
      download != null && (viewProps.download = download), rel != null && (viewProps.rel = rel), typeof target == "string" && (viewProps.target = target.charAt(0) !== "_" ? `_${target}` : target);
    }
    return viewProps;
  },
  useEvents(viewProps, events, { pseudos }, setStateShallow, staticConfig) {
    if (events != null && events.onFocus && (viewProps.onFocus = events.onFocus), events != null && events.onBlur && (viewProps.onBlur = events.onBlur), staticConfig.isInput) {
      if (events) {
        let { onPressIn, onPressOut, onPress } = events, inputEvents = {
          onPressIn,
          onPressOut: onPressOut || onPress
        };
        onPressOut && onPress && (inputEvents.onPressOut = (0, import_web2.composeEventHandlers)(onPress, onPressOut)), Object.assign(viewProps, inputEvents);
      }
    } else {
      events && viewProps.hitSlop && (events.hitSlop = viewProps.hitSlop);
      let pressability = usePressability(events || null);
      if (events && events.onPress)
        for (let key in pressability) {
          let og = viewProps[key], val = pressability[key];
          viewProps[key] = og && !dontComposePressabilityKeys[key] ? (0, import_web2.composeEventHandlers)(og, val) : val;
        }
    }
  }
  // attempt at properly fixing RN input, but <Pressable><TextInput /> just doesnt work on RN
  // useChildren(children, viewProps, events, staticConfig) {
  //   if (process.env.TAMAGUI_TARGET === 'native') {
  //     if (staticConfig.isInput && !staticConfig.isHOC) {
  //       const Pressable = getBaseViews().Pressable
  //       console.log(
  //         'wrapping in pressable',
  //         events?.['onPressIn']?.toString(),
  //         viewProps['onPressIn']
  //       )
  //       // we need to wrap it in a view?
  //       return <Pressable {...events}>{children}</Pressable>
  //     }
  //   }
  // },
});
var dontComposePressabilityKeys = {
  onClick: !0
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Stack,
  Text
});
//# sourceMappingURL=test.js.map
