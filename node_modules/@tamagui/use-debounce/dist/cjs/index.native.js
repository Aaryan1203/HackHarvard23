"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var src_exports = {};
__export(src_exports, {
  debounce: () => debounce,
  useDebounce: () => useDebounce,
  useDebounceValue: () => useDebounceValue
});
module.exports = __toCommonJS(src_exports);
var import_react = require("react");
function debounce(func, wait, leading) {
  let timeout, isCancelled = !1;
  function debounced() {
    isCancelled = !1;
    const context = this, args = arguments;
    leading && !timeout && func.apply(context, args), clearTimeout(timeout), timeout = setTimeout(function() {
      timeout = null, leading || isCancelled || func.apply(context, args), isCancelled = !1;
    }, wait);
  }
  return debounced.cancel = () => {
    isCancelled = !0;
  }, debounced;
}
const defaultOpts = { leading: !1 };
function useDebounce(fn, wait, options = defaultOpts, mountArgs = []) {
  const dbEffect = (0, import_react.useRef)(null);
  return (0, import_react.useEffect)(() => () => {
    var _a;
    (_a = dbEffect.current) == null || _a.cancel();
  }, []), (0, import_react.useMemo)(() => (dbEffect.current = debounce(fn, wait, options.leading), dbEffect.current), [options.leading, ...mountArgs]);
}
function useDebounceValue(val, amt = 0) {
  const [state, setState] = (0, import_react.useState)(val);
  return (0, import_react.useEffect)(() => {
    const tm = setTimeout(() => {
      setState((prev) => prev === val ? prev : val);
    }, amt);
    return () => {
      clearTimeout(tm);
    };
  }, [val]), state;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  debounce,
  useDebounce,
  useDebounceValue
});
//# sourceMappingURL=index.js.map
