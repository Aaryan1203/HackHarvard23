"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var themed_exports = {};
__export(themed_exports, {
  Button: () => Button,
  ButtonFrame: () => ButtonFrame,
  ButtonText: () => ButtonTextFrame,
  buttonStaticConfig: () => buttonStaticConfig,
  createButtonScope: () => createButtonScope,
  useButton: () => useButton
});
module.exports = __toCommonJS(themed_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_create_context = require("@tamagui/create-context");
var import_font_size = require("@tamagui/font-size");
var import_get_button_sized = require("@tamagui/get-button-sized");
var import_helpers_tamagui = require("@tamagui/helpers-tamagui");
var import_text = require("@tamagui/text");
var import_web = require("@tamagui/web");
var import_react = require("react");
var import_Button = require("./Button");
const ButtonFrame = (0, import_web.styled)(import_Button.Button, {
  name: import_Button.BUTTON_NAME,
  variants: {
    unstyled: {
      false: {
        size: "$true",
        justifyContent: "center",
        alignItems: "center",
        flexWrap: "nowrap",
        flexDirection: "row",
        cursor: "pointer",
        hoverTheme: true,
        pressTheme: true,
        backgrounded: true,
        borderWidth: 1,
        borderColor: "$borderColor",
        pressStyle: {
          borderColor: "$borderColorPress"
        },
        focusStyle: {
          outlineColor: "$borderColorFocus",
          outlineStyle: "solid",
          outlineWidth: 2
        }
      }
    },
    size: {
      "...size": import_get_button_sized.getButtonSized
    },
    active: {
      true: {
        hoverStyle: {
          backgroundColor: "$background"
        }
      }
    },
    disabled: {
      true: {
        pointerEvents: "none"
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const [createButtonContext, createButtonScope] = (0, import_create_context.createContextScope)(import_Button.BUTTON_NAME);
const [ButtonProvider, useButtonContext] = createButtonContext("Button");
const ButtonTextFrame = (0, import_web.styled)(import_Button.Button.Text, {
  name: import_Button.BUTTON_TEXT_NAME,
  variants: {
    unstyled: {
      false: {
        userSelect: "none",
        cursor: "pointer",
        // flexGrow 1 leads to inconsistent native style where text pushes to start of view
        flexGrow: 0,
        flexShrink: 1,
        ellipse: true,
        color: "$color"
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const ButtonText = ButtonTextFrame.styleable(
  (props, ref) => {
    const context = useButtonContext(import_Button.BUTTON_TEXT_NAME, props.__scopeButton);
    (0, import_react.useEffect)(() => {
      const unregister = context.registerButtonText();
      return () => unregister();
    }, [context.registerButtonText]);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ButtonTextFrame, { ref, color: context.color, size: context.size, ...props, children: props.children });
  }
);
const ButtonIcon = (props) => {
  const { children, scaleIcon = 1 } = props;
  const context = useButtonContext(import_Button.BUTTON_ICON_NAME, props.__scopeButton);
  const size = context.size;
  const color = context.color;
  const iconSize = (typeof size === "number" ? size * 0.5 : (0, import_font_size.getFontSize)(size)) * scaleIcon;
  const getThemedIcon = (0, import_helpers_tamagui.useGetThemedIcon)({ size: iconSize, color });
  return getThemedIcon(children);
};
const ButtonComponent = ButtonFrame.styleable(
  (props, ref) => {
    const buttonApi = props.forceButtonApi ?? (0, import_web.getConfig)().buttonApi ?? "mixed";
    const { props: buttonProps } = useButton(props);
    const [buttonTextCount, setButtonTextCount] = (0, import_react.useState)(0);
    const registerButtonText = (0, import_react.useCallback)(() => {
      if (buttonApi === "simple") {
        console.warn(
          "You are using Button.Text with simple button API. Either remove Button.Text or use either `buttonApi: composable` or `mixed` in your tamagui config."
        );
      }
      if (buttonApi === "composable")
        return () => {
        };
      setButtonTextCount((prev) => prev + 1);
      return () => setButtonTextCount((prev) => prev - 1);
    }, [setButtonTextCount]);
    const usesComposableApi = buttonApi === "composable" || buttonApi === "mixed" && buttonTextCount > 0;
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      ButtonProvider,
      {
        scope: props.__scopeButton,
        size: props.size ?? "$true",
        color: props.color,
        usesComposableApi,
        registerButtonText,
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ButtonFrame, { unstyled: props.unstyled ?? false, ref, ...buttonProps })
      }
    );
  }
);
const Button = (0, import_web.withStaticProperties)(ButtonComponent, {
  Text: ButtonText,
  Icon: ButtonIcon
});
function useButton(propsIn, { Text = ButtonTextFrame } = { Text: ButtonTextFrame }) {
  const {
    children,
    icon,
    iconAfter,
    noTextWrap,
    theme: themeName,
    space,
    spaceFlex,
    scaleIcon = 1,
    scaleSpace = 0.66,
    separator,
    // text props
    color,
    fontWeight,
    letterSpacing,
    fontSize,
    fontFamily,
    fontStyle,
    textAlign,
    unstyled = false,
    textProps,
    ...rest
  } = propsIn;
  const isNested = import_web.isRSC ? false : (0, import_react.useContext)(import_web.ButtonNestingContext);
  const propsActive = (0, import_web.useMediaPropsActive)(propsIn);
  const size = propsActive.size || "$true";
  const iconSize = (typeof size === "number" ? size * 0.5 : (0, import_font_size.getFontSize)(size)) * scaleIcon;
  const getThemedIcon = (0, import_helpers_tamagui.useGetThemedIcon)({ size: iconSize, color });
  const [themedIcon, themedIconAfter] = [icon, iconAfter].map(getThemedIcon);
  const spaceSize = propsActive.space ?? (0, import_web.getVariableValue)(iconSize) * scaleSpace;
  const contents = (0, import_text.wrapChildrenInText)(
    Text,
    propsActive,
    Text === ButtonTextFrame ? {
      unstyled
    } : void 0
  );
  const inner = (0, import_web.spacedChildren)({
    // a bit arbitrary but scaling to font size is necessary so long as button does
    space: spaceSize,
    spaceFlex,
    separator,
    direction: propsActive.flexDirection === "column" || propsActive.flexDirection === "column-reverse" ? "vertical" : "horizontal",
    children: [themedIcon, ...contents, themedIconAfter]
  });
  const tag = isNested ? "span" : (
    // defaults to <a /> when accessibilityRole = link
    // see https://github.com/tamagui/tamagui/issues/505
    propsIn.accessibilityRole === "link" ? "a" : void 0
  );
  const props = {
    ...propsActive.disabled && {
      // in rnw - false still has keyboard tabIndex, undefined = not actually focusable
      focusable: void 0,
      // even with tabIndex unset, it will keep focusStyle on web so disable it here
      focusStyle: {
        borderColor: "$background"
      }
    },
    tag,
    ...rest,
    children: import_web.isRSC ? inner : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_web.ButtonNestingContext.Provider, { value: true, children: inner })
  };
  return {
    spaceSize,
    isNested,
    props
  };
}
const buttonStaticConfig = {
  inlineProps: /* @__PURE__ */ new Set([
    // text props go here (can't really optimize them, but we never fully extract button anyway)
    // may be able to remove this entirely, as the compiler / runtime have gotten better
    "color",
    "fontWeight",
    "fontSize",
    "fontFamily",
    "fontStyle",
    "letterSpacing",
    "textAlign",
    "unstyled"
  ])
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Button,
  ButtonFrame,
  ButtonText,
  buttonStaticConfig,
  createButtonScope,
  useButton
});
//# sourceMappingURL=themed.js.map
